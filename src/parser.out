Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> instructions_opt
Rule 2     instructions_opt -> instructions
Rule 3     instructions_opt -> <empty>
Rule 4     instructions -> instructions instruction
Rule 5     instructions -> instruction
Rule 6     instruction -> inst ;
Rule 7     instruction -> condition
Rule 8     instruction -> expr ;
Rule 9     instruction -> inst ,
Rule 10    instruction -> expr ,
Rule 11    inst -> ids = expr
Rule 12    inst -> ids ADDASSIGN expr
Rule 13    inst -> ids SUBASSIGN expr
Rule 14    inst -> ids MULASSIGN expr
Rule 15    inst -> ids DIVASSIGN expr
Rule 16    ids -> ID
Rule 17    ids -> ID [ values ]
Rule 18    inst -> BREAK
Rule 19    inst -> CONTINUE
Rule 20    inst -> RETURN
Rule 21    inst -> RETURN values
Rule 22    inst -> RETURN expr
Rule 23    inst -> PRINT values
Rule 24    inst -> PRINT expr
Rule 25    expr -> expr + expr
Rule 26    expr -> expr - expr
Rule 27    expr -> expr * expr
Rule 28    expr -> expr / expr
Rule 29    expr -> expr DOTADD expr
Rule 30    expr -> expr DOTSUB expr
Rule 31    expr -> expr DOTMUL expr
Rule 32    expr -> expr DOTDIV expr
Rule 33    expr -> expr EQ expr
Rule 34    expr -> expr GEQ expr
Rule 35    expr -> expr LEQ expr
Rule 36    expr -> expr NEQ expr
Rule 37    expr -> expr < expr
Rule 38    expr -> expr > expr
Rule 39    expr -> ( expr )
Rule 40    expr -> expr '
Rule 41    expr -> - expr
Rule 42    expr -> ids
Rule 43    expr -> integer
Rule 44    expr -> float
Rule 45    expr -> string
Rule 46    expr -> matrix
Rule 47    integer -> INTNUM
Rule 48    float -> FLOAT
Rule 49    string -> STRING
Rule 50    matrix -> ZEROS ( values )
Rule 51    matrix -> ONES ( values )
Rule 52    matrix -> EYE ( values )
Rule 53    matrix -> [ rows ]
Rule 54    matrix -> [ rows ; ]
Rule 55    rows -> values
Rule 56    rows -> rows ; values
Rule 57    values -> expr
Rule 58    values -> values , expr
Rule 59    block -> { instructions_opt }
Rule 60    block -> instruction
Rule 61    condition -> if_condition
Rule 62    condition -> for_condition
Rule 63    condition -> while_condition
Rule 64    if_condition -> if_cond
Rule 65    if_condition -> if_cond ELSE block
Rule 66    if_condition -> if_cond ELSE if_condition
Rule 67    if_cond -> IF ( expr ) block
Rule 68    for_condition -> FOR ids = range block
Rule 69    range -> expr : expr
Rule 70    while_condition -> WHILE ( expr ) block

Terminals, with rules where they appear

'                    : 40
(                    : 39 50 51 52 67 70
)                    : 39 50 51 52 67 70
*                    : 27
+                    : 25
,                    : 9 10 58
-                    : 26 41
/                    : 28
:                    : 69
;                    : 6 8 54 56
<                    : 37
=                    : 11 68
>                    : 38
ADDASSIGN            : 12
BREAK                : 18
CONTINUE             : 19
DIVASSIGN            : 15
DOTADD               : 29
DOTDIV               : 32
DOTMUL               : 31
DOTSUB               : 30
ELSE                 : 65 66
EQ                   : 33
EYE                  : 52
FLOAT                : 48
FOR                  : 68
GEQ                  : 34
ID                   : 16 17
IF                   : 67
INTNUM               : 47
LEQ                  : 35
MULASSIGN            : 14
NEQ                  : 36
ONES                 : 51
PRINT                : 23 24
RETURN               : 20 21 22
STRING               : 49
SUBASSIGN            : 13
WHILE                : 70
ZEROS                : 50
[                    : 17 53 54
]                    : 17 53 54
error                : 
{                    : 59
}                    : 59

Nonterminals, with rules where they appear

block                : 65 67 68 70
condition            : 7
expr                 : 8 10 11 12 13 14 15 22 24 25 25 26 26 27 27 28 28 29 29 30 30 31 31 32 32 33 33 34 34 35 35 36 36 37 37 38 38 39 40 41 57 58 67 69 69 70
float                : 44
for_condition        : 62
ids                  : 11 12 13 14 15 42 68
if_cond              : 64 65 66
if_condition         : 61 66
inst                 : 6 9
instruction          : 4 5 60
instructions         : 2 4
instructions_opt     : 1 59
integer              : 43
matrix               : 46
program              : 0
range                : 68
rows                 : 53 54 56
string               : 45
values               : 17 21 23 50 51 52 55 56 58
while_condition      : 63

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . instructions_opt
    (2) instructions_opt -> . instructions
    (3) instructions_opt -> .
    (4) instructions -> . instructions instruction
    (5) instructions -> . instruction
    (6) instruction -> . inst ;
    (7) instruction -> . condition
    (8) instruction -> . expr ;
    (9) instruction -> . inst ,
    (10) instruction -> . expr ,
    (11) inst -> . ids = expr
    (12) inst -> . ids ADDASSIGN expr
    (13) inst -> . ids SUBASSIGN expr
    (14) inst -> . ids MULASSIGN expr
    (15) inst -> . ids DIVASSIGN expr
    (18) inst -> . BREAK
    (19) inst -> . CONTINUE
    (20) inst -> . RETURN
    (21) inst -> . RETURN values
    (22) inst -> . RETURN expr
    (23) inst -> . PRINT values
    (24) inst -> . PRINT expr
    (61) condition -> . if_condition
    (62) condition -> . for_condition
    (63) condition -> . while_condition
    (25) expr -> . expr + expr
    (26) expr -> . expr - expr
    (27) expr -> . expr * expr
    (28) expr -> . expr / expr
    (29) expr -> . expr DOTADD expr
    (30) expr -> . expr DOTSUB expr
    (31) expr -> . expr DOTMUL expr
    (32) expr -> . expr DOTDIV expr
    (33) expr -> . expr EQ expr
    (34) expr -> . expr GEQ expr
    (35) expr -> . expr LEQ expr
    (36) expr -> . expr NEQ expr
    (37) expr -> . expr < expr
    (38) expr -> . expr > expr
    (39) expr -> . ( expr )
    (40) expr -> . expr '
    (41) expr -> . - expr
    (42) expr -> . ids
    (43) expr -> . integer
    (44) expr -> . float
    (45) expr -> . string
    (46) expr -> . matrix
    (16) ids -> . ID
    (17) ids -> . ID [ values ]
    (64) if_condition -> . if_cond
    (65) if_condition -> . if_cond ELSE block
    (66) if_condition -> . if_cond ELSE if_condition
    (68) for_condition -> . FOR ids = range block
    (70) while_condition -> . WHILE ( expr ) block
    (47) integer -> . INTNUM
    (48) float -> . FLOAT
    (49) string -> . STRING
    (50) matrix -> . ZEROS ( values )
    (51) matrix -> . ONES ( values )
    (52) matrix -> . EYE ( values )
    (53) matrix -> . [ rows ]
    (54) matrix -> . [ rows ; ]
    (67) if_cond -> . IF ( expr ) block

    $end            reduce using rule 3 (instructions_opt -> .)
    BREAK           shift and go to state 9
    CONTINUE        shift and go to state 10
    RETURN          shift and go to state 11
    PRINT           shift and go to state 12
    (               shift and go to state 17
    -               shift and go to state 16
    ID              shift and go to state 22
    FOR             shift and go to state 25
    WHILE           shift and go to state 26
    INTNUM          shift and go to state 27
    FLOAT           shift and go to state 28
    STRING          shift and go to state 29
    ZEROS           shift and go to state 30
    ONES            shift and go to state 31
    EYE             shift and go to state 32
    [               shift and go to state 23
    IF              shift and go to state 33

    program                        shift and go to state 1
    instructions_opt               shift and go to state 2
    instructions                   shift and go to state 3
    instruction                    shift and go to state 4
    inst                           shift and go to state 5
    condition                      shift and go to state 6
    expr                           shift and go to state 7
    ids                            shift and go to state 8
    if_condition                   shift and go to state 13
    for_condition                  shift and go to state 14
    while_condition                shift and go to state 15
    integer                        shift and go to state 18
    float                          shift and go to state 19
    string                         shift and go to state 20
    matrix                         shift and go to state 21
    if_cond                        shift and go to state 24

state 1

    (0) S' -> program .



state 2

    (1) program -> instructions_opt .

    $end            reduce using rule 1 (program -> instructions_opt .)


state 3

    (2) instructions_opt -> instructions .
    (4) instructions -> instructions . instruction
    (6) instruction -> . inst ;
    (7) instruction -> . condition
    (8) instruction -> . expr ;
    (9) instruction -> . inst ,
    (10) instruction -> . expr ,
    (11) inst -> . ids = expr
    (12) inst -> . ids ADDASSIGN expr
    (13) inst -> . ids SUBASSIGN expr
    (14) inst -> . ids MULASSIGN expr
    (15) inst -> . ids DIVASSIGN expr
    (18) inst -> . BREAK
    (19) inst -> . CONTINUE
    (20) inst -> . RETURN
    (21) inst -> . RETURN values
    (22) inst -> . RETURN expr
    (23) inst -> . PRINT values
    (24) inst -> . PRINT expr
    (61) condition -> . if_condition
    (62) condition -> . for_condition
    (63) condition -> . while_condition
    (25) expr -> . expr + expr
    (26) expr -> . expr - expr
    (27) expr -> . expr * expr
    (28) expr -> . expr / expr
    (29) expr -> . expr DOTADD expr
    (30) expr -> . expr DOTSUB expr
    (31) expr -> . expr DOTMUL expr
    (32) expr -> . expr DOTDIV expr
    (33) expr -> . expr EQ expr
    (34) expr -> . expr GEQ expr
    (35) expr -> . expr LEQ expr
    (36) expr -> . expr NEQ expr
    (37) expr -> . expr < expr
    (38) expr -> . expr > expr
    (39) expr -> . ( expr )
    (40) expr -> . expr '
    (41) expr -> . - expr
    (42) expr -> . ids
    (43) expr -> . integer
    (44) expr -> . float
    (45) expr -> . string
    (46) expr -> . matrix
    (16) ids -> . ID
    (17) ids -> . ID [ values ]
    (64) if_condition -> . if_cond
    (65) if_condition -> . if_cond ELSE block
    (66) if_condition -> . if_cond ELSE if_condition
    (68) for_condition -> . FOR ids = range block
    (70) while_condition -> . WHILE ( expr ) block
    (47) integer -> . INTNUM
    (48) float -> . FLOAT
    (49) string -> . STRING
    (50) matrix -> . ZEROS ( values )
    (51) matrix -> . ONES ( values )
    (52) matrix -> . EYE ( values )
    (53) matrix -> . [ rows ]
    (54) matrix -> . [ rows ; ]
    (67) if_cond -> . IF ( expr ) block

    $end            reduce using rule 2 (instructions_opt -> instructions .)
    }               reduce using rule 2 (instructions_opt -> instructions .)
    BREAK           shift and go to state 9
    CONTINUE        shift and go to state 10
    RETURN          shift and go to state 11
    PRINT           shift and go to state 12
    (               shift and go to state 17
    -               shift and go to state 16
    ID              shift and go to state 22
    FOR             shift and go to state 25
    WHILE           shift and go to state 26
    INTNUM          shift and go to state 27
    FLOAT           shift and go to state 28
    STRING          shift and go to state 29
    ZEROS           shift and go to state 30
    ONES            shift and go to state 31
    EYE             shift and go to state 32
    [               shift and go to state 23
    IF              shift and go to state 33

    instruction                    shift and go to state 34
    inst                           shift and go to state 5
    condition                      shift and go to state 6
    expr                           shift and go to state 7
    ids                            shift and go to state 8
    if_condition                   shift and go to state 13
    for_condition                  shift and go to state 14
    while_condition                shift and go to state 15
    integer                        shift and go to state 18
    float                          shift and go to state 19
    string                         shift and go to state 20
    matrix                         shift and go to state 21
    if_cond                        shift and go to state 24

state 4

    (5) instructions -> instruction .

    BREAK           reduce using rule 5 (instructions -> instruction .)
    CONTINUE        reduce using rule 5 (instructions -> instruction .)
    RETURN          reduce using rule 5 (instructions -> instruction .)
    PRINT           reduce using rule 5 (instructions -> instruction .)
    (               reduce using rule 5 (instructions -> instruction .)
    -               reduce using rule 5 (instructions -> instruction .)
    ID              reduce using rule 5 (instructions -> instruction .)
    FOR             reduce using rule 5 (instructions -> instruction .)
    WHILE           reduce using rule 5 (instructions -> instruction .)
    INTNUM          reduce using rule 5 (instructions -> instruction .)
    FLOAT           reduce using rule 5 (instructions -> instruction .)
    STRING          reduce using rule 5 (instructions -> instruction .)
    ZEROS           reduce using rule 5 (instructions -> instruction .)
    ONES            reduce using rule 5 (instructions -> instruction .)
    EYE             reduce using rule 5 (instructions -> instruction .)
    [               reduce using rule 5 (instructions -> instruction .)
    IF              reduce using rule 5 (instructions -> instruction .)
    $end            reduce using rule 5 (instructions -> instruction .)
    }               reduce using rule 5 (instructions -> instruction .)


state 5

    (6) instruction -> inst . ;
    (9) instruction -> inst . ,

    ;               shift and go to state 35
    ,               shift and go to state 36


state 6

    (7) instruction -> condition .

    BREAK           reduce using rule 7 (instruction -> condition .)
    CONTINUE        reduce using rule 7 (instruction -> condition .)
    RETURN          reduce using rule 7 (instruction -> condition .)
    PRINT           reduce using rule 7 (instruction -> condition .)
    (               reduce using rule 7 (instruction -> condition .)
    -               reduce using rule 7 (instruction -> condition .)
    ID              reduce using rule 7 (instruction -> condition .)
    FOR             reduce using rule 7 (instruction -> condition .)
    WHILE           reduce using rule 7 (instruction -> condition .)
    INTNUM          reduce using rule 7 (instruction -> condition .)
    FLOAT           reduce using rule 7 (instruction -> condition .)
    STRING          reduce using rule 7 (instruction -> condition .)
    ZEROS           reduce using rule 7 (instruction -> condition .)
    ONES            reduce using rule 7 (instruction -> condition .)
    EYE             reduce using rule 7 (instruction -> condition .)
    [               reduce using rule 7 (instruction -> condition .)
    IF              reduce using rule 7 (instruction -> condition .)
    $end            reduce using rule 7 (instruction -> condition .)
    }               reduce using rule 7 (instruction -> condition .)
    ELSE            reduce using rule 7 (instruction -> condition .)


state 7

    (8) instruction -> expr . ;
    (10) instruction -> expr . ,
    (25) expr -> expr . + expr
    (26) expr -> expr . - expr
    (27) expr -> expr . * expr
    (28) expr -> expr . / expr
    (29) expr -> expr . DOTADD expr
    (30) expr -> expr . DOTSUB expr
    (31) expr -> expr . DOTMUL expr
    (32) expr -> expr . DOTDIV expr
    (33) expr -> expr . EQ expr
    (34) expr -> expr . GEQ expr
    (35) expr -> expr . LEQ expr
    (36) expr -> expr . NEQ expr
    (37) expr -> expr . < expr
    (38) expr -> expr . > expr
    (40) expr -> expr . '

    ;               shift and go to state 37
    ,               shift and go to state 38
    +               shift and go to state 39
    -               shift and go to state 40
    *               shift and go to state 41
    /               shift and go to state 42
    DOTADD          shift and go to state 43
    DOTSUB          shift and go to state 44
    DOTMUL          shift and go to state 45
    DOTDIV          shift and go to state 46
    EQ              shift and go to state 47
    GEQ             shift and go to state 48
    LEQ             shift and go to state 49
    NEQ             shift and go to state 50
    <               shift and go to state 51
    >               shift and go to state 52
    '               shift and go to state 53


state 8

    (11) inst -> ids . = expr
    (12) inst -> ids . ADDASSIGN expr
    (13) inst -> ids . SUBASSIGN expr
    (14) inst -> ids . MULASSIGN expr
    (15) inst -> ids . DIVASSIGN expr
    (42) expr -> ids .

    =               shift and go to state 54
    ADDASSIGN       shift and go to state 55
    SUBASSIGN       shift and go to state 56
    MULASSIGN       shift and go to state 57
    DIVASSIGN       shift and go to state 58
    ;               reduce using rule 42 (expr -> ids .)
    ,               reduce using rule 42 (expr -> ids .)
    +               reduce using rule 42 (expr -> ids .)
    -               reduce using rule 42 (expr -> ids .)
    *               reduce using rule 42 (expr -> ids .)
    /               reduce using rule 42 (expr -> ids .)
    DOTADD          reduce using rule 42 (expr -> ids .)
    DOTSUB          reduce using rule 42 (expr -> ids .)
    DOTMUL          reduce using rule 42 (expr -> ids .)
    DOTDIV          reduce using rule 42 (expr -> ids .)
    EQ              reduce using rule 42 (expr -> ids .)
    GEQ             reduce using rule 42 (expr -> ids .)
    LEQ             reduce using rule 42 (expr -> ids .)
    NEQ             reduce using rule 42 (expr -> ids .)
    <               reduce using rule 42 (expr -> ids .)
    >               reduce using rule 42 (expr -> ids .)
    '               reduce using rule 42 (expr -> ids .)


state 9

    (18) inst -> BREAK .

    ;               reduce using rule 18 (inst -> BREAK .)
    ,               reduce using rule 18 (inst -> BREAK .)


state 10

    (19) inst -> CONTINUE .

    ;               reduce using rule 19 (inst -> CONTINUE .)
    ,               reduce using rule 19 (inst -> CONTINUE .)


state 11

    (20) inst -> RETURN .
    (21) inst -> RETURN . values
    (22) inst -> RETURN . expr
    (57) values -> . expr
    (58) values -> . values , expr
    (25) expr -> . expr + expr
    (26) expr -> . expr - expr
    (27) expr -> . expr * expr
    (28) expr -> . expr / expr
    (29) expr -> . expr DOTADD expr
    (30) expr -> . expr DOTSUB expr
    (31) expr -> . expr DOTMUL expr
    (32) expr -> . expr DOTDIV expr
    (33) expr -> . expr EQ expr
    (34) expr -> . expr GEQ expr
    (35) expr -> . expr LEQ expr
    (36) expr -> . expr NEQ expr
    (37) expr -> . expr < expr
    (38) expr -> . expr > expr
    (39) expr -> . ( expr )
    (40) expr -> . expr '
    (41) expr -> . - expr
    (42) expr -> . ids
    (43) expr -> . integer
    (44) expr -> . float
    (45) expr -> . string
    (46) expr -> . matrix
    (16) ids -> . ID
    (17) ids -> . ID [ values ]
    (47) integer -> . INTNUM
    (48) float -> . FLOAT
    (49) string -> . STRING
    (50) matrix -> . ZEROS ( values )
    (51) matrix -> . ONES ( values )
    (52) matrix -> . EYE ( values )
    (53) matrix -> . [ rows ]
    (54) matrix -> . [ rows ; ]

    ;               reduce using rule 20 (inst -> RETURN .)
    ,               reduce using rule 20 (inst -> RETURN .)
    (               shift and go to state 17
    -               shift and go to state 16
    ID              shift and go to state 22
    INTNUM          shift and go to state 27
    FLOAT           shift and go to state 28
    STRING          shift and go to state 29
    ZEROS           shift and go to state 30
    ONES            shift and go to state 31
    EYE             shift and go to state 32
    [               shift and go to state 23

    values                         shift and go to state 59
    expr                           shift and go to state 60
    ids                            shift and go to state 61
    integer                        shift and go to state 18
    float                          shift and go to state 19
    string                         shift and go to state 20
    matrix                         shift and go to state 21

state 12

    (23) inst -> PRINT . values
    (24) inst -> PRINT . expr
    (57) values -> . expr
    (58) values -> . values , expr
    (25) expr -> . expr + expr
    (26) expr -> . expr - expr
    (27) expr -> . expr * expr
    (28) expr -> . expr / expr
    (29) expr -> . expr DOTADD expr
    (30) expr -> . expr DOTSUB expr
    (31) expr -> . expr DOTMUL expr
    (32) expr -> . expr DOTDIV expr
    (33) expr -> . expr EQ expr
    (34) expr -> . expr GEQ expr
    (35) expr -> . expr LEQ expr
    (36) expr -> . expr NEQ expr
    (37) expr -> . expr < expr
    (38) expr -> . expr > expr
    (39) expr -> . ( expr )
    (40) expr -> . expr '
    (41) expr -> . - expr
    (42) expr -> . ids
    (43) expr -> . integer
    (44) expr -> . float
    (45) expr -> . string
    (46) expr -> . matrix
    (16) ids -> . ID
    (17) ids -> . ID [ values ]
    (47) integer -> . INTNUM
    (48) float -> . FLOAT
    (49) string -> . STRING
    (50) matrix -> . ZEROS ( values )
    (51) matrix -> . ONES ( values )
    (52) matrix -> . EYE ( values )
    (53) matrix -> . [ rows ]
    (54) matrix -> . [ rows ; ]

    (               shift and go to state 17
    -               shift and go to state 16
    ID              shift and go to state 22
    INTNUM          shift and go to state 27
    FLOAT           shift and go to state 28
    STRING          shift and go to state 29
    ZEROS           shift and go to state 30
    ONES            shift and go to state 31
    EYE             shift and go to state 32
    [               shift and go to state 23

    values                         shift and go to state 62
    expr                           shift and go to state 63
    ids                            shift and go to state 61
    integer                        shift and go to state 18
    float                          shift and go to state 19
    string                         shift and go to state 20
    matrix                         shift and go to state 21

state 13

    (61) condition -> if_condition .

    BREAK           reduce using rule 61 (condition -> if_condition .)
    CONTINUE        reduce using rule 61 (condition -> if_condition .)
    RETURN          reduce using rule 61 (condition -> if_condition .)
    PRINT           reduce using rule 61 (condition -> if_condition .)
    (               reduce using rule 61 (condition -> if_condition .)
    -               reduce using rule 61 (condition -> if_condition .)
    ID              reduce using rule 61 (condition -> if_condition .)
    FOR             reduce using rule 61 (condition -> if_condition .)
    WHILE           reduce using rule 61 (condition -> if_condition .)
    INTNUM          reduce using rule 61 (condition -> if_condition .)
    FLOAT           reduce using rule 61 (condition -> if_condition .)
    STRING          reduce using rule 61 (condition -> if_condition .)
    ZEROS           reduce using rule 61 (condition -> if_condition .)
    ONES            reduce using rule 61 (condition -> if_condition .)
    EYE             reduce using rule 61 (condition -> if_condition .)
    [               reduce using rule 61 (condition -> if_condition .)
    IF              reduce using rule 61 (condition -> if_condition .)
    $end            reduce using rule 61 (condition -> if_condition .)
    }               reduce using rule 61 (condition -> if_condition .)
    ELSE            reduce using rule 61 (condition -> if_condition .)


state 14

    (62) condition -> for_condition .

    BREAK           reduce using rule 62 (condition -> for_condition .)
    CONTINUE        reduce using rule 62 (condition -> for_condition .)
    RETURN          reduce using rule 62 (condition -> for_condition .)
    PRINT           reduce using rule 62 (condition -> for_condition .)
    (               reduce using rule 62 (condition -> for_condition .)
    -               reduce using rule 62 (condition -> for_condition .)
    ID              reduce using rule 62 (condition -> for_condition .)
    FOR             reduce using rule 62 (condition -> for_condition .)
    WHILE           reduce using rule 62 (condition -> for_condition .)
    INTNUM          reduce using rule 62 (condition -> for_condition .)
    FLOAT           reduce using rule 62 (condition -> for_condition .)
    STRING          reduce using rule 62 (condition -> for_condition .)
    ZEROS           reduce using rule 62 (condition -> for_condition .)
    ONES            reduce using rule 62 (condition -> for_condition .)
    EYE             reduce using rule 62 (condition -> for_condition .)
    [               reduce using rule 62 (condition -> for_condition .)
    IF              reduce using rule 62 (condition -> for_condition .)
    $end            reduce using rule 62 (condition -> for_condition .)
    }               reduce using rule 62 (condition -> for_condition .)
    ELSE            reduce using rule 62 (condition -> for_condition .)


state 15

    (63) condition -> while_condition .

    BREAK           reduce using rule 63 (condition -> while_condition .)
    CONTINUE        reduce using rule 63 (condition -> while_condition .)
    RETURN          reduce using rule 63 (condition -> while_condition .)
    PRINT           reduce using rule 63 (condition -> while_condition .)
    (               reduce using rule 63 (condition -> while_condition .)
    -               reduce using rule 63 (condition -> while_condition .)
    ID              reduce using rule 63 (condition -> while_condition .)
    FOR             reduce using rule 63 (condition -> while_condition .)
    WHILE           reduce using rule 63 (condition -> while_condition .)
    INTNUM          reduce using rule 63 (condition -> while_condition .)
    FLOAT           reduce using rule 63 (condition -> while_condition .)
    STRING          reduce using rule 63 (condition -> while_condition .)
    ZEROS           reduce using rule 63 (condition -> while_condition .)
    ONES            reduce using rule 63 (condition -> while_condition .)
    EYE             reduce using rule 63 (condition -> while_condition .)
    [               reduce using rule 63 (condition -> while_condition .)
    IF              reduce using rule 63 (condition -> while_condition .)
    $end            reduce using rule 63 (condition -> while_condition .)
    }               reduce using rule 63 (condition -> while_condition .)
    ELSE            reduce using rule 63 (condition -> while_condition .)


state 16

    (41) expr -> - . expr
    (25) expr -> . expr + expr
    (26) expr -> . expr - expr
    (27) expr -> . expr * expr
    (28) expr -> . expr / expr
    (29) expr -> . expr DOTADD expr
    (30) expr -> . expr DOTSUB expr
    (31) expr -> . expr DOTMUL expr
    (32) expr -> . expr DOTDIV expr
    (33) expr -> . expr EQ expr
    (34) expr -> . expr GEQ expr
    (35) expr -> . expr LEQ expr
    (36) expr -> . expr NEQ expr
    (37) expr -> . expr < expr
    (38) expr -> . expr > expr
    (39) expr -> . ( expr )
    (40) expr -> . expr '
    (41) expr -> . - expr
    (42) expr -> . ids
    (43) expr -> . integer
    (44) expr -> . float
    (45) expr -> . string
    (46) expr -> . matrix
    (16) ids -> . ID
    (17) ids -> . ID [ values ]
    (47) integer -> . INTNUM
    (48) float -> . FLOAT
    (49) string -> . STRING
    (50) matrix -> . ZEROS ( values )
    (51) matrix -> . ONES ( values )
    (52) matrix -> . EYE ( values )
    (53) matrix -> . [ rows ]
    (54) matrix -> . [ rows ; ]

    (               shift and go to state 17
    -               shift and go to state 16
    ID              shift and go to state 22
    INTNUM          shift and go to state 27
    FLOAT           shift and go to state 28
    STRING          shift and go to state 29
    ZEROS           shift and go to state 30
    ONES            shift and go to state 31
    EYE             shift and go to state 32
    [               shift and go to state 23

    expr                           shift and go to state 64
    ids                            shift and go to state 61
    integer                        shift and go to state 18
    float                          shift and go to state 19
    string                         shift and go to state 20
    matrix                         shift and go to state 21

state 17

    (39) expr -> ( . expr )
    (25) expr -> . expr + expr
    (26) expr -> . expr - expr
    (27) expr -> . expr * expr
    (28) expr -> . expr / expr
    (29) expr -> . expr DOTADD expr
    (30) expr -> . expr DOTSUB expr
    (31) expr -> . expr DOTMUL expr
    (32) expr -> . expr DOTDIV expr
    (33) expr -> . expr EQ expr
    (34) expr -> . expr GEQ expr
    (35) expr -> . expr LEQ expr
    (36) expr -> . expr NEQ expr
    (37) expr -> . expr < expr
    (38) expr -> . expr > expr
    (39) expr -> . ( expr )
    (40) expr -> . expr '
    (41) expr -> . - expr
    (42) expr -> . ids
    (43) expr -> . integer
    (44) expr -> . float
    (45) expr -> . string
    (46) expr -> . matrix
    (16) ids -> . ID
    (17) ids -> . ID [ values ]
    (47) integer -> . INTNUM
    (48) float -> . FLOAT
    (49) string -> . STRING
    (50) matrix -> . ZEROS ( values )
    (51) matrix -> . ONES ( values )
    (52) matrix -> . EYE ( values )
    (53) matrix -> . [ rows ]
    (54) matrix -> . [ rows ; ]

    (               shift and go to state 17
    -               shift and go to state 16
    ID              shift and go to state 22
    INTNUM          shift and go to state 27
    FLOAT           shift and go to state 28
    STRING          shift and go to state 29
    ZEROS           shift and go to state 30
    ONES            shift and go to state 31
    EYE             shift and go to state 32
    [               shift and go to state 23

    expr                           shift and go to state 65
    ids                            shift and go to state 61
    integer                        shift and go to state 18
    float                          shift and go to state 19
    string                         shift and go to state 20
    matrix                         shift and go to state 21

state 18

    (43) expr -> integer .

    ;               reduce using rule 43 (expr -> integer .)
    ,               reduce using rule 43 (expr -> integer .)
    +               reduce using rule 43 (expr -> integer .)
    -               reduce using rule 43 (expr -> integer .)
    *               reduce using rule 43 (expr -> integer .)
    /               reduce using rule 43 (expr -> integer .)
    DOTADD          reduce using rule 43 (expr -> integer .)
    DOTSUB          reduce using rule 43 (expr -> integer .)
    DOTMUL          reduce using rule 43 (expr -> integer .)
    DOTDIV          reduce using rule 43 (expr -> integer .)
    EQ              reduce using rule 43 (expr -> integer .)
    GEQ             reduce using rule 43 (expr -> integer .)
    LEQ             reduce using rule 43 (expr -> integer .)
    NEQ             reduce using rule 43 (expr -> integer .)
    <               reduce using rule 43 (expr -> integer .)
    >               reduce using rule 43 (expr -> integer .)
    '               reduce using rule 43 (expr -> integer .)
    )               reduce using rule 43 (expr -> integer .)
    ]               reduce using rule 43 (expr -> integer .)
    :               reduce using rule 43 (expr -> integer .)
    {               reduce using rule 43 (expr -> integer .)
    BREAK           reduce using rule 43 (expr -> integer .)
    CONTINUE        reduce using rule 43 (expr -> integer .)
    RETURN          reduce using rule 43 (expr -> integer .)
    PRINT           reduce using rule 43 (expr -> integer .)
    (               reduce using rule 43 (expr -> integer .)
    ID              reduce using rule 43 (expr -> integer .)
    FOR             reduce using rule 43 (expr -> integer .)
    WHILE           reduce using rule 43 (expr -> integer .)
    INTNUM          reduce using rule 43 (expr -> integer .)
    FLOAT           reduce using rule 43 (expr -> integer .)
    STRING          reduce using rule 43 (expr -> integer .)
    ZEROS           reduce using rule 43 (expr -> integer .)
    ONES            reduce using rule 43 (expr -> integer .)
    EYE             reduce using rule 43 (expr -> integer .)
    [               reduce using rule 43 (expr -> integer .)
    IF              reduce using rule 43 (expr -> integer .)


state 19

    (44) expr -> float .

    ;               reduce using rule 44 (expr -> float .)
    ,               reduce using rule 44 (expr -> float .)
    +               reduce using rule 44 (expr -> float .)
    -               reduce using rule 44 (expr -> float .)
    *               reduce using rule 44 (expr -> float .)
    /               reduce using rule 44 (expr -> float .)
    DOTADD          reduce using rule 44 (expr -> float .)
    DOTSUB          reduce using rule 44 (expr -> float .)
    DOTMUL          reduce using rule 44 (expr -> float .)
    DOTDIV          reduce using rule 44 (expr -> float .)
    EQ              reduce using rule 44 (expr -> float .)
    GEQ             reduce using rule 44 (expr -> float .)
    LEQ             reduce using rule 44 (expr -> float .)
    NEQ             reduce using rule 44 (expr -> float .)
    <               reduce using rule 44 (expr -> float .)
    >               reduce using rule 44 (expr -> float .)
    '               reduce using rule 44 (expr -> float .)
    )               reduce using rule 44 (expr -> float .)
    ]               reduce using rule 44 (expr -> float .)
    :               reduce using rule 44 (expr -> float .)
    {               reduce using rule 44 (expr -> float .)
    BREAK           reduce using rule 44 (expr -> float .)
    CONTINUE        reduce using rule 44 (expr -> float .)
    RETURN          reduce using rule 44 (expr -> float .)
    PRINT           reduce using rule 44 (expr -> float .)
    (               reduce using rule 44 (expr -> float .)
    ID              reduce using rule 44 (expr -> float .)
    FOR             reduce using rule 44 (expr -> float .)
    WHILE           reduce using rule 44 (expr -> float .)
    INTNUM          reduce using rule 44 (expr -> float .)
    FLOAT           reduce using rule 44 (expr -> float .)
    STRING          reduce using rule 44 (expr -> float .)
    ZEROS           reduce using rule 44 (expr -> float .)
    ONES            reduce using rule 44 (expr -> float .)
    EYE             reduce using rule 44 (expr -> float .)
    [               reduce using rule 44 (expr -> float .)
    IF              reduce using rule 44 (expr -> float .)


state 20

    (45) expr -> string .

    ;               reduce using rule 45 (expr -> string .)
    ,               reduce using rule 45 (expr -> string .)
    +               reduce using rule 45 (expr -> string .)
    -               reduce using rule 45 (expr -> string .)
    *               reduce using rule 45 (expr -> string .)
    /               reduce using rule 45 (expr -> string .)
    DOTADD          reduce using rule 45 (expr -> string .)
    DOTSUB          reduce using rule 45 (expr -> string .)
    DOTMUL          reduce using rule 45 (expr -> string .)
    DOTDIV          reduce using rule 45 (expr -> string .)
    EQ              reduce using rule 45 (expr -> string .)
    GEQ             reduce using rule 45 (expr -> string .)
    LEQ             reduce using rule 45 (expr -> string .)
    NEQ             reduce using rule 45 (expr -> string .)
    <               reduce using rule 45 (expr -> string .)
    >               reduce using rule 45 (expr -> string .)
    '               reduce using rule 45 (expr -> string .)
    )               reduce using rule 45 (expr -> string .)
    ]               reduce using rule 45 (expr -> string .)
    :               reduce using rule 45 (expr -> string .)
    {               reduce using rule 45 (expr -> string .)
    BREAK           reduce using rule 45 (expr -> string .)
    CONTINUE        reduce using rule 45 (expr -> string .)
    RETURN          reduce using rule 45 (expr -> string .)
    PRINT           reduce using rule 45 (expr -> string .)
    (               reduce using rule 45 (expr -> string .)
    ID              reduce using rule 45 (expr -> string .)
    FOR             reduce using rule 45 (expr -> string .)
    WHILE           reduce using rule 45 (expr -> string .)
    INTNUM          reduce using rule 45 (expr -> string .)
    FLOAT           reduce using rule 45 (expr -> string .)
    STRING          reduce using rule 45 (expr -> string .)
    ZEROS           reduce using rule 45 (expr -> string .)
    ONES            reduce using rule 45 (expr -> string .)
    EYE             reduce using rule 45 (expr -> string .)
    [               reduce using rule 45 (expr -> string .)
    IF              reduce using rule 45 (expr -> string .)


state 21

    (46) expr -> matrix .

    ;               reduce using rule 46 (expr -> matrix .)
    ,               reduce using rule 46 (expr -> matrix .)
    +               reduce using rule 46 (expr -> matrix .)
    -               reduce using rule 46 (expr -> matrix .)
    *               reduce using rule 46 (expr -> matrix .)
    /               reduce using rule 46 (expr -> matrix .)
    DOTADD          reduce using rule 46 (expr -> matrix .)
    DOTSUB          reduce using rule 46 (expr -> matrix .)
    DOTMUL          reduce using rule 46 (expr -> matrix .)
    DOTDIV          reduce using rule 46 (expr -> matrix .)
    EQ              reduce using rule 46 (expr -> matrix .)
    GEQ             reduce using rule 46 (expr -> matrix .)
    LEQ             reduce using rule 46 (expr -> matrix .)
    NEQ             reduce using rule 46 (expr -> matrix .)
    <               reduce using rule 46 (expr -> matrix .)
    >               reduce using rule 46 (expr -> matrix .)
    '               reduce using rule 46 (expr -> matrix .)
    )               reduce using rule 46 (expr -> matrix .)
    ]               reduce using rule 46 (expr -> matrix .)
    :               reduce using rule 46 (expr -> matrix .)
    {               reduce using rule 46 (expr -> matrix .)
    BREAK           reduce using rule 46 (expr -> matrix .)
    CONTINUE        reduce using rule 46 (expr -> matrix .)
    RETURN          reduce using rule 46 (expr -> matrix .)
    PRINT           reduce using rule 46 (expr -> matrix .)
    (               reduce using rule 46 (expr -> matrix .)
    ID              reduce using rule 46 (expr -> matrix .)
    FOR             reduce using rule 46 (expr -> matrix .)
    WHILE           reduce using rule 46 (expr -> matrix .)
    INTNUM          reduce using rule 46 (expr -> matrix .)
    FLOAT           reduce using rule 46 (expr -> matrix .)
    STRING          reduce using rule 46 (expr -> matrix .)
    ZEROS           reduce using rule 46 (expr -> matrix .)
    ONES            reduce using rule 46 (expr -> matrix .)
    EYE             reduce using rule 46 (expr -> matrix .)
    [               reduce using rule 46 (expr -> matrix .)
    IF              reduce using rule 46 (expr -> matrix .)


state 22

    (16) ids -> ID .
    (17) ids -> ID . [ values ]

  ! shift/reduce conflict for [ resolved as shift
    =               reduce using rule 16 (ids -> ID .)
    ADDASSIGN       reduce using rule 16 (ids -> ID .)
    SUBASSIGN       reduce using rule 16 (ids -> ID .)
    MULASSIGN       reduce using rule 16 (ids -> ID .)
    DIVASSIGN       reduce using rule 16 (ids -> ID .)
    ;               reduce using rule 16 (ids -> ID .)
    ,               reduce using rule 16 (ids -> ID .)
    +               reduce using rule 16 (ids -> ID .)
    -               reduce using rule 16 (ids -> ID .)
    *               reduce using rule 16 (ids -> ID .)
    /               reduce using rule 16 (ids -> ID .)
    DOTADD          reduce using rule 16 (ids -> ID .)
    DOTSUB          reduce using rule 16 (ids -> ID .)
    DOTMUL          reduce using rule 16 (ids -> ID .)
    DOTDIV          reduce using rule 16 (ids -> ID .)
    EQ              reduce using rule 16 (ids -> ID .)
    GEQ             reduce using rule 16 (ids -> ID .)
    LEQ             reduce using rule 16 (ids -> ID .)
    NEQ             reduce using rule 16 (ids -> ID .)
    <               reduce using rule 16 (ids -> ID .)
    >               reduce using rule 16 (ids -> ID .)
    '               reduce using rule 16 (ids -> ID .)
    )               reduce using rule 16 (ids -> ID .)
    ]               reduce using rule 16 (ids -> ID .)
    :               reduce using rule 16 (ids -> ID .)
    {               reduce using rule 16 (ids -> ID .)
    BREAK           reduce using rule 16 (ids -> ID .)
    CONTINUE        reduce using rule 16 (ids -> ID .)
    RETURN          reduce using rule 16 (ids -> ID .)
    PRINT           reduce using rule 16 (ids -> ID .)
    (               reduce using rule 16 (ids -> ID .)
    ID              reduce using rule 16 (ids -> ID .)
    FOR             reduce using rule 16 (ids -> ID .)
    WHILE           reduce using rule 16 (ids -> ID .)
    INTNUM          reduce using rule 16 (ids -> ID .)
    FLOAT           reduce using rule 16 (ids -> ID .)
    STRING          reduce using rule 16 (ids -> ID .)
    ZEROS           reduce using rule 16 (ids -> ID .)
    ONES            reduce using rule 16 (ids -> ID .)
    EYE             reduce using rule 16 (ids -> ID .)
    IF              reduce using rule 16 (ids -> ID .)
    [               shift and go to state 66

  ! [               [ reduce using rule 16 (ids -> ID .) ]


state 23

    (53) matrix -> [ . rows ]
    (54) matrix -> [ . rows ; ]
    (55) rows -> . values
    (56) rows -> . rows ; values
    (57) values -> . expr
    (58) values -> . values , expr
    (25) expr -> . expr + expr
    (26) expr -> . expr - expr
    (27) expr -> . expr * expr
    (28) expr -> . expr / expr
    (29) expr -> . expr DOTADD expr
    (30) expr -> . expr DOTSUB expr
    (31) expr -> . expr DOTMUL expr
    (32) expr -> . expr DOTDIV expr
    (33) expr -> . expr EQ expr
    (34) expr -> . expr GEQ expr
    (35) expr -> . expr LEQ expr
    (36) expr -> . expr NEQ expr
    (37) expr -> . expr < expr
    (38) expr -> . expr > expr
    (39) expr -> . ( expr )
    (40) expr -> . expr '
    (41) expr -> . - expr
    (42) expr -> . ids
    (43) expr -> . integer
    (44) expr -> . float
    (45) expr -> . string
    (46) expr -> . matrix
    (16) ids -> . ID
    (17) ids -> . ID [ values ]
    (47) integer -> . INTNUM
    (48) float -> . FLOAT
    (49) string -> . STRING
    (50) matrix -> . ZEROS ( values )
    (51) matrix -> . ONES ( values )
    (52) matrix -> . EYE ( values )
    (53) matrix -> . [ rows ]
    (54) matrix -> . [ rows ; ]

    (               shift and go to state 17
    -               shift and go to state 16
    ID              shift and go to state 22
    INTNUM          shift and go to state 27
    FLOAT           shift and go to state 28
    STRING          shift and go to state 29
    ZEROS           shift and go to state 30
    ONES            shift and go to state 31
    EYE             shift and go to state 32
    [               shift and go to state 23

    rows                           shift and go to state 67
    values                         shift and go to state 68
    expr                           shift and go to state 69
    ids                            shift and go to state 61
    integer                        shift and go to state 18
    float                          shift and go to state 19
    string                         shift and go to state 20
    matrix                         shift and go to state 21

state 24

    (64) if_condition -> if_cond .
    (65) if_condition -> if_cond . ELSE block
    (66) if_condition -> if_cond . ELSE if_condition

  ! shift/reduce conflict for ELSE resolved as shift
    BREAK           reduce using rule 64 (if_condition -> if_cond .)
    CONTINUE        reduce using rule 64 (if_condition -> if_cond .)
    RETURN          reduce using rule 64 (if_condition -> if_cond .)
    PRINT           reduce using rule 64 (if_condition -> if_cond .)
    (               reduce using rule 64 (if_condition -> if_cond .)
    -               reduce using rule 64 (if_condition -> if_cond .)
    ID              reduce using rule 64 (if_condition -> if_cond .)
    FOR             reduce using rule 64 (if_condition -> if_cond .)
    WHILE           reduce using rule 64 (if_condition -> if_cond .)
    INTNUM          reduce using rule 64 (if_condition -> if_cond .)
    FLOAT           reduce using rule 64 (if_condition -> if_cond .)
    STRING          reduce using rule 64 (if_condition -> if_cond .)
    ZEROS           reduce using rule 64 (if_condition -> if_cond .)
    ONES            reduce using rule 64 (if_condition -> if_cond .)
    EYE             reduce using rule 64 (if_condition -> if_cond .)
    [               reduce using rule 64 (if_condition -> if_cond .)
    IF              reduce using rule 64 (if_condition -> if_cond .)
    $end            reduce using rule 64 (if_condition -> if_cond .)
    }               reduce using rule 64 (if_condition -> if_cond .)
    ELSE            shift and go to state 70

  ! ELSE            [ reduce using rule 64 (if_condition -> if_cond .) ]


state 25

    (68) for_condition -> FOR . ids = range block
    (16) ids -> . ID
    (17) ids -> . ID [ values ]

    ID              shift and go to state 22

    ids                            shift and go to state 71

state 26

    (70) while_condition -> WHILE . ( expr ) block

    (               shift and go to state 72


state 27

    (47) integer -> INTNUM .

    ;               reduce using rule 47 (integer -> INTNUM .)
    ,               reduce using rule 47 (integer -> INTNUM .)
    +               reduce using rule 47 (integer -> INTNUM .)
    -               reduce using rule 47 (integer -> INTNUM .)
    *               reduce using rule 47 (integer -> INTNUM .)
    /               reduce using rule 47 (integer -> INTNUM .)
    DOTADD          reduce using rule 47 (integer -> INTNUM .)
    DOTSUB          reduce using rule 47 (integer -> INTNUM .)
    DOTMUL          reduce using rule 47 (integer -> INTNUM .)
    DOTDIV          reduce using rule 47 (integer -> INTNUM .)
    EQ              reduce using rule 47 (integer -> INTNUM .)
    GEQ             reduce using rule 47 (integer -> INTNUM .)
    LEQ             reduce using rule 47 (integer -> INTNUM .)
    NEQ             reduce using rule 47 (integer -> INTNUM .)
    <               reduce using rule 47 (integer -> INTNUM .)
    >               reduce using rule 47 (integer -> INTNUM .)
    '               reduce using rule 47 (integer -> INTNUM .)
    )               reduce using rule 47 (integer -> INTNUM .)
    ]               reduce using rule 47 (integer -> INTNUM .)
    :               reduce using rule 47 (integer -> INTNUM .)
    {               reduce using rule 47 (integer -> INTNUM .)
    BREAK           reduce using rule 47 (integer -> INTNUM .)
    CONTINUE        reduce using rule 47 (integer -> INTNUM .)
    RETURN          reduce using rule 47 (integer -> INTNUM .)
    PRINT           reduce using rule 47 (integer -> INTNUM .)
    (               reduce using rule 47 (integer -> INTNUM .)
    ID              reduce using rule 47 (integer -> INTNUM .)
    FOR             reduce using rule 47 (integer -> INTNUM .)
    WHILE           reduce using rule 47 (integer -> INTNUM .)
    INTNUM          reduce using rule 47 (integer -> INTNUM .)
    FLOAT           reduce using rule 47 (integer -> INTNUM .)
    STRING          reduce using rule 47 (integer -> INTNUM .)
    ZEROS           reduce using rule 47 (integer -> INTNUM .)
    ONES            reduce using rule 47 (integer -> INTNUM .)
    EYE             reduce using rule 47 (integer -> INTNUM .)
    [               reduce using rule 47 (integer -> INTNUM .)
    IF              reduce using rule 47 (integer -> INTNUM .)


state 28

    (48) float -> FLOAT .

    ;               reduce using rule 48 (float -> FLOAT .)
    ,               reduce using rule 48 (float -> FLOAT .)
    +               reduce using rule 48 (float -> FLOAT .)
    -               reduce using rule 48 (float -> FLOAT .)
    *               reduce using rule 48 (float -> FLOAT .)
    /               reduce using rule 48 (float -> FLOAT .)
    DOTADD          reduce using rule 48 (float -> FLOAT .)
    DOTSUB          reduce using rule 48 (float -> FLOAT .)
    DOTMUL          reduce using rule 48 (float -> FLOAT .)
    DOTDIV          reduce using rule 48 (float -> FLOAT .)
    EQ              reduce using rule 48 (float -> FLOAT .)
    GEQ             reduce using rule 48 (float -> FLOAT .)
    LEQ             reduce using rule 48 (float -> FLOAT .)
    NEQ             reduce using rule 48 (float -> FLOAT .)
    <               reduce using rule 48 (float -> FLOAT .)
    >               reduce using rule 48 (float -> FLOAT .)
    '               reduce using rule 48 (float -> FLOAT .)
    )               reduce using rule 48 (float -> FLOAT .)
    ]               reduce using rule 48 (float -> FLOAT .)
    :               reduce using rule 48 (float -> FLOAT .)
    {               reduce using rule 48 (float -> FLOAT .)
    BREAK           reduce using rule 48 (float -> FLOAT .)
    CONTINUE        reduce using rule 48 (float -> FLOAT .)
    RETURN          reduce using rule 48 (float -> FLOAT .)
    PRINT           reduce using rule 48 (float -> FLOAT .)
    (               reduce using rule 48 (float -> FLOAT .)
    ID              reduce using rule 48 (float -> FLOAT .)
    FOR             reduce using rule 48 (float -> FLOAT .)
    WHILE           reduce using rule 48 (float -> FLOAT .)
    INTNUM          reduce using rule 48 (float -> FLOAT .)
    FLOAT           reduce using rule 48 (float -> FLOAT .)
    STRING          reduce using rule 48 (float -> FLOAT .)
    ZEROS           reduce using rule 48 (float -> FLOAT .)
    ONES            reduce using rule 48 (float -> FLOAT .)
    EYE             reduce using rule 48 (float -> FLOAT .)
    [               reduce using rule 48 (float -> FLOAT .)
    IF              reduce using rule 48 (float -> FLOAT .)


state 29

    (49) string -> STRING .

    ;               reduce using rule 49 (string -> STRING .)
    ,               reduce using rule 49 (string -> STRING .)
    +               reduce using rule 49 (string -> STRING .)
    -               reduce using rule 49 (string -> STRING .)
    *               reduce using rule 49 (string -> STRING .)
    /               reduce using rule 49 (string -> STRING .)
    DOTADD          reduce using rule 49 (string -> STRING .)
    DOTSUB          reduce using rule 49 (string -> STRING .)
    DOTMUL          reduce using rule 49 (string -> STRING .)
    DOTDIV          reduce using rule 49 (string -> STRING .)
    EQ              reduce using rule 49 (string -> STRING .)
    GEQ             reduce using rule 49 (string -> STRING .)
    LEQ             reduce using rule 49 (string -> STRING .)
    NEQ             reduce using rule 49 (string -> STRING .)
    <               reduce using rule 49 (string -> STRING .)
    >               reduce using rule 49 (string -> STRING .)
    '               reduce using rule 49 (string -> STRING .)
    )               reduce using rule 49 (string -> STRING .)
    ]               reduce using rule 49 (string -> STRING .)
    :               reduce using rule 49 (string -> STRING .)
    {               reduce using rule 49 (string -> STRING .)
    BREAK           reduce using rule 49 (string -> STRING .)
    CONTINUE        reduce using rule 49 (string -> STRING .)
    RETURN          reduce using rule 49 (string -> STRING .)
    PRINT           reduce using rule 49 (string -> STRING .)
    (               reduce using rule 49 (string -> STRING .)
    ID              reduce using rule 49 (string -> STRING .)
    FOR             reduce using rule 49 (string -> STRING .)
    WHILE           reduce using rule 49 (string -> STRING .)
    INTNUM          reduce using rule 49 (string -> STRING .)
    FLOAT           reduce using rule 49 (string -> STRING .)
    STRING          reduce using rule 49 (string -> STRING .)
    ZEROS           reduce using rule 49 (string -> STRING .)
    ONES            reduce using rule 49 (string -> STRING .)
    EYE             reduce using rule 49 (string -> STRING .)
    [               reduce using rule 49 (string -> STRING .)
    IF              reduce using rule 49 (string -> STRING .)


state 30

    (50) matrix -> ZEROS . ( values )

    (               shift and go to state 73


state 31

    (51) matrix -> ONES . ( values )

    (               shift and go to state 74


state 32

    (52) matrix -> EYE . ( values )

    (               shift and go to state 75


state 33

    (67) if_cond -> IF . ( expr ) block

    (               shift and go to state 76


state 34

    (4) instructions -> instructions instruction .

    BREAK           reduce using rule 4 (instructions -> instructions instruction .)
    CONTINUE        reduce using rule 4 (instructions -> instructions instruction .)
    RETURN          reduce using rule 4 (instructions -> instructions instruction .)
    PRINT           reduce using rule 4 (instructions -> instructions instruction .)
    (               reduce using rule 4 (instructions -> instructions instruction .)
    -               reduce using rule 4 (instructions -> instructions instruction .)
    ID              reduce using rule 4 (instructions -> instructions instruction .)
    FOR             reduce using rule 4 (instructions -> instructions instruction .)
    WHILE           reduce using rule 4 (instructions -> instructions instruction .)
    INTNUM          reduce using rule 4 (instructions -> instructions instruction .)
    FLOAT           reduce using rule 4 (instructions -> instructions instruction .)
    STRING          reduce using rule 4 (instructions -> instructions instruction .)
    ZEROS           reduce using rule 4 (instructions -> instructions instruction .)
    ONES            reduce using rule 4 (instructions -> instructions instruction .)
    EYE             reduce using rule 4 (instructions -> instructions instruction .)
    [               reduce using rule 4 (instructions -> instructions instruction .)
    IF              reduce using rule 4 (instructions -> instructions instruction .)
    $end            reduce using rule 4 (instructions -> instructions instruction .)
    }               reduce using rule 4 (instructions -> instructions instruction .)


state 35

    (6) instruction -> inst ; .

    BREAK           reduce using rule 6 (instruction -> inst ; .)
    CONTINUE        reduce using rule 6 (instruction -> inst ; .)
    RETURN          reduce using rule 6 (instruction -> inst ; .)
    PRINT           reduce using rule 6 (instruction -> inst ; .)
    (               reduce using rule 6 (instruction -> inst ; .)
    -               reduce using rule 6 (instruction -> inst ; .)
    ID              reduce using rule 6 (instruction -> inst ; .)
    FOR             reduce using rule 6 (instruction -> inst ; .)
    WHILE           reduce using rule 6 (instruction -> inst ; .)
    INTNUM          reduce using rule 6 (instruction -> inst ; .)
    FLOAT           reduce using rule 6 (instruction -> inst ; .)
    STRING          reduce using rule 6 (instruction -> inst ; .)
    ZEROS           reduce using rule 6 (instruction -> inst ; .)
    ONES            reduce using rule 6 (instruction -> inst ; .)
    EYE             reduce using rule 6 (instruction -> inst ; .)
    [               reduce using rule 6 (instruction -> inst ; .)
    IF              reduce using rule 6 (instruction -> inst ; .)
    $end            reduce using rule 6 (instruction -> inst ; .)
    }               reduce using rule 6 (instruction -> inst ; .)
    ELSE            reduce using rule 6 (instruction -> inst ; .)


state 36

    (9) instruction -> inst , .

    BREAK           reduce using rule 9 (instruction -> inst , .)
    CONTINUE        reduce using rule 9 (instruction -> inst , .)
    RETURN          reduce using rule 9 (instruction -> inst , .)
    PRINT           reduce using rule 9 (instruction -> inst , .)
    (               reduce using rule 9 (instruction -> inst , .)
    -               reduce using rule 9 (instruction -> inst , .)
    ID              reduce using rule 9 (instruction -> inst , .)
    FOR             reduce using rule 9 (instruction -> inst , .)
    WHILE           reduce using rule 9 (instruction -> inst , .)
    INTNUM          reduce using rule 9 (instruction -> inst , .)
    FLOAT           reduce using rule 9 (instruction -> inst , .)
    STRING          reduce using rule 9 (instruction -> inst , .)
    ZEROS           reduce using rule 9 (instruction -> inst , .)
    ONES            reduce using rule 9 (instruction -> inst , .)
    EYE             reduce using rule 9 (instruction -> inst , .)
    [               reduce using rule 9 (instruction -> inst , .)
    IF              reduce using rule 9 (instruction -> inst , .)
    $end            reduce using rule 9 (instruction -> inst , .)
    }               reduce using rule 9 (instruction -> inst , .)
    ELSE            reduce using rule 9 (instruction -> inst , .)


state 37

    (8) instruction -> expr ; .

    BREAK           reduce using rule 8 (instruction -> expr ; .)
    CONTINUE        reduce using rule 8 (instruction -> expr ; .)
    RETURN          reduce using rule 8 (instruction -> expr ; .)
    PRINT           reduce using rule 8 (instruction -> expr ; .)
    (               reduce using rule 8 (instruction -> expr ; .)
    -               reduce using rule 8 (instruction -> expr ; .)
    ID              reduce using rule 8 (instruction -> expr ; .)
    FOR             reduce using rule 8 (instruction -> expr ; .)
    WHILE           reduce using rule 8 (instruction -> expr ; .)
    INTNUM          reduce using rule 8 (instruction -> expr ; .)
    FLOAT           reduce using rule 8 (instruction -> expr ; .)
    STRING          reduce using rule 8 (instruction -> expr ; .)
    ZEROS           reduce using rule 8 (instruction -> expr ; .)
    ONES            reduce using rule 8 (instruction -> expr ; .)
    EYE             reduce using rule 8 (instruction -> expr ; .)
    [               reduce using rule 8 (instruction -> expr ; .)
    IF              reduce using rule 8 (instruction -> expr ; .)
    $end            reduce using rule 8 (instruction -> expr ; .)
    }               reduce using rule 8 (instruction -> expr ; .)
    ELSE            reduce using rule 8 (instruction -> expr ; .)


state 38

    (10) instruction -> expr , .

    BREAK           reduce using rule 10 (instruction -> expr , .)
    CONTINUE        reduce using rule 10 (instruction -> expr , .)
    RETURN          reduce using rule 10 (instruction -> expr , .)
    PRINT           reduce using rule 10 (instruction -> expr , .)
    (               reduce using rule 10 (instruction -> expr , .)
    -               reduce using rule 10 (instruction -> expr , .)
    ID              reduce using rule 10 (instruction -> expr , .)
    FOR             reduce using rule 10 (instruction -> expr , .)
    WHILE           reduce using rule 10 (instruction -> expr , .)
    INTNUM          reduce using rule 10 (instruction -> expr , .)
    FLOAT           reduce using rule 10 (instruction -> expr , .)
    STRING          reduce using rule 10 (instruction -> expr , .)
    ZEROS           reduce using rule 10 (instruction -> expr , .)
    ONES            reduce using rule 10 (instruction -> expr , .)
    EYE             reduce using rule 10 (instruction -> expr , .)
    [               reduce using rule 10 (instruction -> expr , .)
    IF              reduce using rule 10 (instruction -> expr , .)
    $end            reduce using rule 10 (instruction -> expr , .)
    }               reduce using rule 10 (instruction -> expr , .)
    ELSE            reduce using rule 10 (instruction -> expr , .)


state 39

    (25) expr -> expr + . expr
    (25) expr -> . expr + expr
    (26) expr -> . expr - expr
    (27) expr -> . expr * expr
    (28) expr -> . expr / expr
    (29) expr -> . expr DOTADD expr
    (30) expr -> . expr DOTSUB expr
    (31) expr -> . expr DOTMUL expr
    (32) expr -> . expr DOTDIV expr
    (33) expr -> . expr EQ expr
    (34) expr -> . expr GEQ expr
    (35) expr -> . expr LEQ expr
    (36) expr -> . expr NEQ expr
    (37) expr -> . expr < expr
    (38) expr -> . expr > expr
    (39) expr -> . ( expr )
    (40) expr -> . expr '
    (41) expr -> . - expr
    (42) expr -> . ids
    (43) expr -> . integer
    (44) expr -> . float
    (45) expr -> . string
    (46) expr -> . matrix
    (16) ids -> . ID
    (17) ids -> . ID [ values ]
    (47) integer -> . INTNUM
    (48) float -> . FLOAT
    (49) string -> . STRING
    (50) matrix -> . ZEROS ( values )
    (51) matrix -> . ONES ( values )
    (52) matrix -> . EYE ( values )
    (53) matrix -> . [ rows ]
    (54) matrix -> . [ rows ; ]

    (               shift and go to state 17
    -               shift and go to state 16
    ID              shift and go to state 22
    INTNUM          shift and go to state 27
    FLOAT           shift and go to state 28
    STRING          shift and go to state 29
    ZEROS           shift and go to state 30
    ONES            shift and go to state 31
    EYE             shift and go to state 32
    [               shift and go to state 23

    expr                           shift and go to state 77
    ids                            shift and go to state 61
    integer                        shift and go to state 18
    float                          shift and go to state 19
    string                         shift and go to state 20
    matrix                         shift and go to state 21

state 40

    (26) expr -> expr - . expr
    (25) expr -> . expr + expr
    (26) expr -> . expr - expr
    (27) expr -> . expr * expr
    (28) expr -> . expr / expr
    (29) expr -> . expr DOTADD expr
    (30) expr -> . expr DOTSUB expr
    (31) expr -> . expr DOTMUL expr
    (32) expr -> . expr DOTDIV expr
    (33) expr -> . expr EQ expr
    (34) expr -> . expr GEQ expr
    (35) expr -> . expr LEQ expr
    (36) expr -> . expr NEQ expr
    (37) expr -> . expr < expr
    (38) expr -> . expr > expr
    (39) expr -> . ( expr )
    (40) expr -> . expr '
    (41) expr -> . - expr
    (42) expr -> . ids
    (43) expr -> . integer
    (44) expr -> . float
    (45) expr -> . string
    (46) expr -> . matrix
    (16) ids -> . ID
    (17) ids -> . ID [ values ]
    (47) integer -> . INTNUM
    (48) float -> . FLOAT
    (49) string -> . STRING
    (50) matrix -> . ZEROS ( values )
    (51) matrix -> . ONES ( values )
    (52) matrix -> . EYE ( values )
    (53) matrix -> . [ rows ]
    (54) matrix -> . [ rows ; ]

    (               shift and go to state 17
    -               shift and go to state 16
    ID              shift and go to state 22
    INTNUM          shift and go to state 27
    FLOAT           shift and go to state 28
    STRING          shift and go to state 29
    ZEROS           shift and go to state 30
    ONES            shift and go to state 31
    EYE             shift and go to state 32
    [               shift and go to state 23

    expr                           shift and go to state 78
    ids                            shift and go to state 61
    integer                        shift and go to state 18
    float                          shift and go to state 19
    string                         shift and go to state 20
    matrix                         shift and go to state 21

state 41

    (27) expr -> expr * . expr
    (25) expr -> . expr + expr
    (26) expr -> . expr - expr
    (27) expr -> . expr * expr
    (28) expr -> . expr / expr
    (29) expr -> . expr DOTADD expr
    (30) expr -> . expr DOTSUB expr
    (31) expr -> . expr DOTMUL expr
    (32) expr -> . expr DOTDIV expr
    (33) expr -> . expr EQ expr
    (34) expr -> . expr GEQ expr
    (35) expr -> . expr LEQ expr
    (36) expr -> . expr NEQ expr
    (37) expr -> . expr < expr
    (38) expr -> . expr > expr
    (39) expr -> . ( expr )
    (40) expr -> . expr '
    (41) expr -> . - expr
    (42) expr -> . ids
    (43) expr -> . integer
    (44) expr -> . float
    (45) expr -> . string
    (46) expr -> . matrix
    (16) ids -> . ID
    (17) ids -> . ID [ values ]
    (47) integer -> . INTNUM
    (48) float -> . FLOAT
    (49) string -> . STRING
    (50) matrix -> . ZEROS ( values )
    (51) matrix -> . ONES ( values )
    (52) matrix -> . EYE ( values )
    (53) matrix -> . [ rows ]
    (54) matrix -> . [ rows ; ]

    (               shift and go to state 17
    -               shift and go to state 16
    ID              shift and go to state 22
    INTNUM          shift and go to state 27
    FLOAT           shift and go to state 28
    STRING          shift and go to state 29
    ZEROS           shift and go to state 30
    ONES            shift and go to state 31
    EYE             shift and go to state 32
    [               shift and go to state 23

    expr                           shift and go to state 79
    ids                            shift and go to state 61
    integer                        shift and go to state 18
    float                          shift and go to state 19
    string                         shift and go to state 20
    matrix                         shift and go to state 21

state 42

    (28) expr -> expr / . expr
    (25) expr -> . expr + expr
    (26) expr -> . expr - expr
    (27) expr -> . expr * expr
    (28) expr -> . expr / expr
    (29) expr -> . expr DOTADD expr
    (30) expr -> . expr DOTSUB expr
    (31) expr -> . expr DOTMUL expr
    (32) expr -> . expr DOTDIV expr
    (33) expr -> . expr EQ expr
    (34) expr -> . expr GEQ expr
    (35) expr -> . expr LEQ expr
    (36) expr -> . expr NEQ expr
    (37) expr -> . expr < expr
    (38) expr -> . expr > expr
    (39) expr -> . ( expr )
    (40) expr -> . expr '
    (41) expr -> . - expr
    (42) expr -> . ids
    (43) expr -> . integer
    (44) expr -> . float
    (45) expr -> . string
    (46) expr -> . matrix
    (16) ids -> . ID
    (17) ids -> . ID [ values ]
    (47) integer -> . INTNUM
    (48) float -> . FLOAT
    (49) string -> . STRING
    (50) matrix -> . ZEROS ( values )
    (51) matrix -> . ONES ( values )
    (52) matrix -> . EYE ( values )
    (53) matrix -> . [ rows ]
    (54) matrix -> . [ rows ; ]

    (               shift and go to state 17
    -               shift and go to state 16
    ID              shift and go to state 22
    INTNUM          shift and go to state 27
    FLOAT           shift and go to state 28
    STRING          shift and go to state 29
    ZEROS           shift and go to state 30
    ONES            shift and go to state 31
    EYE             shift and go to state 32
    [               shift and go to state 23

    expr                           shift and go to state 80
    ids                            shift and go to state 61
    integer                        shift and go to state 18
    float                          shift and go to state 19
    string                         shift and go to state 20
    matrix                         shift and go to state 21

state 43

    (29) expr -> expr DOTADD . expr
    (25) expr -> . expr + expr
    (26) expr -> . expr - expr
    (27) expr -> . expr * expr
    (28) expr -> . expr / expr
    (29) expr -> . expr DOTADD expr
    (30) expr -> . expr DOTSUB expr
    (31) expr -> . expr DOTMUL expr
    (32) expr -> . expr DOTDIV expr
    (33) expr -> . expr EQ expr
    (34) expr -> . expr GEQ expr
    (35) expr -> . expr LEQ expr
    (36) expr -> . expr NEQ expr
    (37) expr -> . expr < expr
    (38) expr -> . expr > expr
    (39) expr -> . ( expr )
    (40) expr -> . expr '
    (41) expr -> . - expr
    (42) expr -> . ids
    (43) expr -> . integer
    (44) expr -> . float
    (45) expr -> . string
    (46) expr -> . matrix
    (16) ids -> . ID
    (17) ids -> . ID [ values ]
    (47) integer -> . INTNUM
    (48) float -> . FLOAT
    (49) string -> . STRING
    (50) matrix -> . ZEROS ( values )
    (51) matrix -> . ONES ( values )
    (52) matrix -> . EYE ( values )
    (53) matrix -> . [ rows ]
    (54) matrix -> . [ rows ; ]

    (               shift and go to state 17
    -               shift and go to state 16
    ID              shift and go to state 22
    INTNUM          shift and go to state 27
    FLOAT           shift and go to state 28
    STRING          shift and go to state 29
    ZEROS           shift and go to state 30
    ONES            shift and go to state 31
    EYE             shift and go to state 32
    [               shift and go to state 23

    expr                           shift and go to state 81
    ids                            shift and go to state 61
    integer                        shift and go to state 18
    float                          shift and go to state 19
    string                         shift and go to state 20
    matrix                         shift and go to state 21

state 44

    (30) expr -> expr DOTSUB . expr
    (25) expr -> . expr + expr
    (26) expr -> . expr - expr
    (27) expr -> . expr * expr
    (28) expr -> . expr / expr
    (29) expr -> . expr DOTADD expr
    (30) expr -> . expr DOTSUB expr
    (31) expr -> . expr DOTMUL expr
    (32) expr -> . expr DOTDIV expr
    (33) expr -> . expr EQ expr
    (34) expr -> . expr GEQ expr
    (35) expr -> . expr LEQ expr
    (36) expr -> . expr NEQ expr
    (37) expr -> . expr < expr
    (38) expr -> . expr > expr
    (39) expr -> . ( expr )
    (40) expr -> . expr '
    (41) expr -> . - expr
    (42) expr -> . ids
    (43) expr -> . integer
    (44) expr -> . float
    (45) expr -> . string
    (46) expr -> . matrix
    (16) ids -> . ID
    (17) ids -> . ID [ values ]
    (47) integer -> . INTNUM
    (48) float -> . FLOAT
    (49) string -> . STRING
    (50) matrix -> . ZEROS ( values )
    (51) matrix -> . ONES ( values )
    (52) matrix -> . EYE ( values )
    (53) matrix -> . [ rows ]
    (54) matrix -> . [ rows ; ]

    (               shift and go to state 17
    -               shift and go to state 16
    ID              shift and go to state 22
    INTNUM          shift and go to state 27
    FLOAT           shift and go to state 28
    STRING          shift and go to state 29
    ZEROS           shift and go to state 30
    ONES            shift and go to state 31
    EYE             shift and go to state 32
    [               shift and go to state 23

    expr                           shift and go to state 82
    ids                            shift and go to state 61
    integer                        shift and go to state 18
    float                          shift and go to state 19
    string                         shift and go to state 20
    matrix                         shift and go to state 21

state 45

    (31) expr -> expr DOTMUL . expr
    (25) expr -> . expr + expr
    (26) expr -> . expr - expr
    (27) expr -> . expr * expr
    (28) expr -> . expr / expr
    (29) expr -> . expr DOTADD expr
    (30) expr -> . expr DOTSUB expr
    (31) expr -> . expr DOTMUL expr
    (32) expr -> . expr DOTDIV expr
    (33) expr -> . expr EQ expr
    (34) expr -> . expr GEQ expr
    (35) expr -> . expr LEQ expr
    (36) expr -> . expr NEQ expr
    (37) expr -> . expr < expr
    (38) expr -> . expr > expr
    (39) expr -> . ( expr )
    (40) expr -> . expr '
    (41) expr -> . - expr
    (42) expr -> . ids
    (43) expr -> . integer
    (44) expr -> . float
    (45) expr -> . string
    (46) expr -> . matrix
    (16) ids -> . ID
    (17) ids -> . ID [ values ]
    (47) integer -> . INTNUM
    (48) float -> . FLOAT
    (49) string -> . STRING
    (50) matrix -> . ZEROS ( values )
    (51) matrix -> . ONES ( values )
    (52) matrix -> . EYE ( values )
    (53) matrix -> . [ rows ]
    (54) matrix -> . [ rows ; ]

    (               shift and go to state 17
    -               shift and go to state 16
    ID              shift and go to state 22
    INTNUM          shift and go to state 27
    FLOAT           shift and go to state 28
    STRING          shift and go to state 29
    ZEROS           shift and go to state 30
    ONES            shift and go to state 31
    EYE             shift and go to state 32
    [               shift and go to state 23

    expr                           shift and go to state 83
    ids                            shift and go to state 61
    integer                        shift and go to state 18
    float                          shift and go to state 19
    string                         shift and go to state 20
    matrix                         shift and go to state 21

state 46

    (32) expr -> expr DOTDIV . expr
    (25) expr -> . expr + expr
    (26) expr -> . expr - expr
    (27) expr -> . expr * expr
    (28) expr -> . expr / expr
    (29) expr -> . expr DOTADD expr
    (30) expr -> . expr DOTSUB expr
    (31) expr -> . expr DOTMUL expr
    (32) expr -> . expr DOTDIV expr
    (33) expr -> . expr EQ expr
    (34) expr -> . expr GEQ expr
    (35) expr -> . expr LEQ expr
    (36) expr -> . expr NEQ expr
    (37) expr -> . expr < expr
    (38) expr -> . expr > expr
    (39) expr -> . ( expr )
    (40) expr -> . expr '
    (41) expr -> . - expr
    (42) expr -> . ids
    (43) expr -> . integer
    (44) expr -> . float
    (45) expr -> . string
    (46) expr -> . matrix
    (16) ids -> . ID
    (17) ids -> . ID [ values ]
    (47) integer -> . INTNUM
    (48) float -> . FLOAT
    (49) string -> . STRING
    (50) matrix -> . ZEROS ( values )
    (51) matrix -> . ONES ( values )
    (52) matrix -> . EYE ( values )
    (53) matrix -> . [ rows ]
    (54) matrix -> . [ rows ; ]

    (               shift and go to state 17
    -               shift and go to state 16
    ID              shift and go to state 22
    INTNUM          shift and go to state 27
    FLOAT           shift and go to state 28
    STRING          shift and go to state 29
    ZEROS           shift and go to state 30
    ONES            shift and go to state 31
    EYE             shift and go to state 32
    [               shift and go to state 23

    expr                           shift and go to state 84
    ids                            shift and go to state 61
    integer                        shift and go to state 18
    float                          shift and go to state 19
    string                         shift and go to state 20
    matrix                         shift and go to state 21

state 47

    (33) expr -> expr EQ . expr
    (25) expr -> . expr + expr
    (26) expr -> . expr - expr
    (27) expr -> . expr * expr
    (28) expr -> . expr / expr
    (29) expr -> . expr DOTADD expr
    (30) expr -> . expr DOTSUB expr
    (31) expr -> . expr DOTMUL expr
    (32) expr -> . expr DOTDIV expr
    (33) expr -> . expr EQ expr
    (34) expr -> . expr GEQ expr
    (35) expr -> . expr LEQ expr
    (36) expr -> . expr NEQ expr
    (37) expr -> . expr < expr
    (38) expr -> . expr > expr
    (39) expr -> . ( expr )
    (40) expr -> . expr '
    (41) expr -> . - expr
    (42) expr -> . ids
    (43) expr -> . integer
    (44) expr -> . float
    (45) expr -> . string
    (46) expr -> . matrix
    (16) ids -> . ID
    (17) ids -> . ID [ values ]
    (47) integer -> . INTNUM
    (48) float -> . FLOAT
    (49) string -> . STRING
    (50) matrix -> . ZEROS ( values )
    (51) matrix -> . ONES ( values )
    (52) matrix -> . EYE ( values )
    (53) matrix -> . [ rows ]
    (54) matrix -> . [ rows ; ]

    (               shift and go to state 17
    -               shift and go to state 16
    ID              shift and go to state 22
    INTNUM          shift and go to state 27
    FLOAT           shift and go to state 28
    STRING          shift and go to state 29
    ZEROS           shift and go to state 30
    ONES            shift and go to state 31
    EYE             shift and go to state 32
    [               shift and go to state 23

    expr                           shift and go to state 85
    ids                            shift and go to state 61
    integer                        shift and go to state 18
    float                          shift and go to state 19
    string                         shift and go to state 20
    matrix                         shift and go to state 21

state 48

    (34) expr -> expr GEQ . expr
    (25) expr -> . expr + expr
    (26) expr -> . expr - expr
    (27) expr -> . expr * expr
    (28) expr -> . expr / expr
    (29) expr -> . expr DOTADD expr
    (30) expr -> . expr DOTSUB expr
    (31) expr -> . expr DOTMUL expr
    (32) expr -> . expr DOTDIV expr
    (33) expr -> . expr EQ expr
    (34) expr -> . expr GEQ expr
    (35) expr -> . expr LEQ expr
    (36) expr -> . expr NEQ expr
    (37) expr -> . expr < expr
    (38) expr -> . expr > expr
    (39) expr -> . ( expr )
    (40) expr -> . expr '
    (41) expr -> . - expr
    (42) expr -> . ids
    (43) expr -> . integer
    (44) expr -> . float
    (45) expr -> . string
    (46) expr -> . matrix
    (16) ids -> . ID
    (17) ids -> . ID [ values ]
    (47) integer -> . INTNUM
    (48) float -> . FLOAT
    (49) string -> . STRING
    (50) matrix -> . ZEROS ( values )
    (51) matrix -> . ONES ( values )
    (52) matrix -> . EYE ( values )
    (53) matrix -> . [ rows ]
    (54) matrix -> . [ rows ; ]

    (               shift and go to state 17
    -               shift and go to state 16
    ID              shift and go to state 22
    INTNUM          shift and go to state 27
    FLOAT           shift and go to state 28
    STRING          shift and go to state 29
    ZEROS           shift and go to state 30
    ONES            shift and go to state 31
    EYE             shift and go to state 32
    [               shift and go to state 23

    expr                           shift and go to state 86
    ids                            shift and go to state 61
    integer                        shift and go to state 18
    float                          shift and go to state 19
    string                         shift and go to state 20
    matrix                         shift and go to state 21

state 49

    (35) expr -> expr LEQ . expr
    (25) expr -> . expr + expr
    (26) expr -> . expr - expr
    (27) expr -> . expr * expr
    (28) expr -> . expr / expr
    (29) expr -> . expr DOTADD expr
    (30) expr -> . expr DOTSUB expr
    (31) expr -> . expr DOTMUL expr
    (32) expr -> . expr DOTDIV expr
    (33) expr -> . expr EQ expr
    (34) expr -> . expr GEQ expr
    (35) expr -> . expr LEQ expr
    (36) expr -> . expr NEQ expr
    (37) expr -> . expr < expr
    (38) expr -> . expr > expr
    (39) expr -> . ( expr )
    (40) expr -> . expr '
    (41) expr -> . - expr
    (42) expr -> . ids
    (43) expr -> . integer
    (44) expr -> . float
    (45) expr -> . string
    (46) expr -> . matrix
    (16) ids -> . ID
    (17) ids -> . ID [ values ]
    (47) integer -> . INTNUM
    (48) float -> . FLOAT
    (49) string -> . STRING
    (50) matrix -> . ZEROS ( values )
    (51) matrix -> . ONES ( values )
    (52) matrix -> . EYE ( values )
    (53) matrix -> . [ rows ]
    (54) matrix -> . [ rows ; ]

    (               shift and go to state 17
    -               shift and go to state 16
    ID              shift and go to state 22
    INTNUM          shift and go to state 27
    FLOAT           shift and go to state 28
    STRING          shift and go to state 29
    ZEROS           shift and go to state 30
    ONES            shift and go to state 31
    EYE             shift and go to state 32
    [               shift and go to state 23

    expr                           shift and go to state 87
    ids                            shift and go to state 61
    integer                        shift and go to state 18
    float                          shift and go to state 19
    string                         shift and go to state 20
    matrix                         shift and go to state 21

state 50

    (36) expr -> expr NEQ . expr
    (25) expr -> . expr + expr
    (26) expr -> . expr - expr
    (27) expr -> . expr * expr
    (28) expr -> . expr / expr
    (29) expr -> . expr DOTADD expr
    (30) expr -> . expr DOTSUB expr
    (31) expr -> . expr DOTMUL expr
    (32) expr -> . expr DOTDIV expr
    (33) expr -> . expr EQ expr
    (34) expr -> . expr GEQ expr
    (35) expr -> . expr LEQ expr
    (36) expr -> . expr NEQ expr
    (37) expr -> . expr < expr
    (38) expr -> . expr > expr
    (39) expr -> . ( expr )
    (40) expr -> . expr '
    (41) expr -> . - expr
    (42) expr -> . ids
    (43) expr -> . integer
    (44) expr -> . float
    (45) expr -> . string
    (46) expr -> . matrix
    (16) ids -> . ID
    (17) ids -> . ID [ values ]
    (47) integer -> . INTNUM
    (48) float -> . FLOAT
    (49) string -> . STRING
    (50) matrix -> . ZEROS ( values )
    (51) matrix -> . ONES ( values )
    (52) matrix -> . EYE ( values )
    (53) matrix -> . [ rows ]
    (54) matrix -> . [ rows ; ]

    (               shift and go to state 17
    -               shift and go to state 16
    ID              shift and go to state 22
    INTNUM          shift and go to state 27
    FLOAT           shift and go to state 28
    STRING          shift and go to state 29
    ZEROS           shift and go to state 30
    ONES            shift and go to state 31
    EYE             shift and go to state 32
    [               shift and go to state 23

    expr                           shift and go to state 88
    ids                            shift and go to state 61
    integer                        shift and go to state 18
    float                          shift and go to state 19
    string                         shift and go to state 20
    matrix                         shift and go to state 21

state 51

    (37) expr -> expr < . expr
    (25) expr -> . expr + expr
    (26) expr -> . expr - expr
    (27) expr -> . expr * expr
    (28) expr -> . expr / expr
    (29) expr -> . expr DOTADD expr
    (30) expr -> . expr DOTSUB expr
    (31) expr -> . expr DOTMUL expr
    (32) expr -> . expr DOTDIV expr
    (33) expr -> . expr EQ expr
    (34) expr -> . expr GEQ expr
    (35) expr -> . expr LEQ expr
    (36) expr -> . expr NEQ expr
    (37) expr -> . expr < expr
    (38) expr -> . expr > expr
    (39) expr -> . ( expr )
    (40) expr -> . expr '
    (41) expr -> . - expr
    (42) expr -> . ids
    (43) expr -> . integer
    (44) expr -> . float
    (45) expr -> . string
    (46) expr -> . matrix
    (16) ids -> . ID
    (17) ids -> . ID [ values ]
    (47) integer -> . INTNUM
    (48) float -> . FLOAT
    (49) string -> . STRING
    (50) matrix -> . ZEROS ( values )
    (51) matrix -> . ONES ( values )
    (52) matrix -> . EYE ( values )
    (53) matrix -> . [ rows ]
    (54) matrix -> . [ rows ; ]

    (               shift and go to state 17
    -               shift and go to state 16
    ID              shift and go to state 22
    INTNUM          shift and go to state 27
    FLOAT           shift and go to state 28
    STRING          shift and go to state 29
    ZEROS           shift and go to state 30
    ONES            shift and go to state 31
    EYE             shift and go to state 32
    [               shift and go to state 23

    expr                           shift and go to state 89
    ids                            shift and go to state 61
    integer                        shift and go to state 18
    float                          shift and go to state 19
    string                         shift and go to state 20
    matrix                         shift and go to state 21

state 52

    (38) expr -> expr > . expr
    (25) expr -> . expr + expr
    (26) expr -> . expr - expr
    (27) expr -> . expr * expr
    (28) expr -> . expr / expr
    (29) expr -> . expr DOTADD expr
    (30) expr -> . expr DOTSUB expr
    (31) expr -> . expr DOTMUL expr
    (32) expr -> . expr DOTDIV expr
    (33) expr -> . expr EQ expr
    (34) expr -> . expr GEQ expr
    (35) expr -> . expr LEQ expr
    (36) expr -> . expr NEQ expr
    (37) expr -> . expr < expr
    (38) expr -> . expr > expr
    (39) expr -> . ( expr )
    (40) expr -> . expr '
    (41) expr -> . - expr
    (42) expr -> . ids
    (43) expr -> . integer
    (44) expr -> . float
    (45) expr -> . string
    (46) expr -> . matrix
    (16) ids -> . ID
    (17) ids -> . ID [ values ]
    (47) integer -> . INTNUM
    (48) float -> . FLOAT
    (49) string -> . STRING
    (50) matrix -> . ZEROS ( values )
    (51) matrix -> . ONES ( values )
    (52) matrix -> . EYE ( values )
    (53) matrix -> . [ rows ]
    (54) matrix -> . [ rows ; ]

    (               shift and go to state 17
    -               shift and go to state 16
    ID              shift and go to state 22
    INTNUM          shift and go to state 27
    FLOAT           shift and go to state 28
    STRING          shift and go to state 29
    ZEROS           shift and go to state 30
    ONES            shift and go to state 31
    EYE             shift and go to state 32
    [               shift and go to state 23

    expr                           shift and go to state 90
    ids                            shift and go to state 61
    integer                        shift and go to state 18
    float                          shift and go to state 19
    string                         shift and go to state 20
    matrix                         shift and go to state 21

state 53

    (40) expr -> expr ' .

    ;               reduce using rule 40 (expr -> expr ' .)
    ,               reduce using rule 40 (expr -> expr ' .)
    +               reduce using rule 40 (expr -> expr ' .)
    -               reduce using rule 40 (expr -> expr ' .)
    *               reduce using rule 40 (expr -> expr ' .)
    /               reduce using rule 40 (expr -> expr ' .)
    DOTADD          reduce using rule 40 (expr -> expr ' .)
    DOTSUB          reduce using rule 40 (expr -> expr ' .)
    DOTMUL          reduce using rule 40 (expr -> expr ' .)
    DOTDIV          reduce using rule 40 (expr -> expr ' .)
    EQ              reduce using rule 40 (expr -> expr ' .)
    GEQ             reduce using rule 40 (expr -> expr ' .)
    LEQ             reduce using rule 40 (expr -> expr ' .)
    NEQ             reduce using rule 40 (expr -> expr ' .)
    <               reduce using rule 40 (expr -> expr ' .)
    >               reduce using rule 40 (expr -> expr ' .)
    '               reduce using rule 40 (expr -> expr ' .)
    )               reduce using rule 40 (expr -> expr ' .)
    ]               reduce using rule 40 (expr -> expr ' .)
    :               reduce using rule 40 (expr -> expr ' .)
    {               reduce using rule 40 (expr -> expr ' .)
    BREAK           reduce using rule 40 (expr -> expr ' .)
    CONTINUE        reduce using rule 40 (expr -> expr ' .)
    RETURN          reduce using rule 40 (expr -> expr ' .)
    PRINT           reduce using rule 40 (expr -> expr ' .)
    (               reduce using rule 40 (expr -> expr ' .)
    ID              reduce using rule 40 (expr -> expr ' .)
    FOR             reduce using rule 40 (expr -> expr ' .)
    WHILE           reduce using rule 40 (expr -> expr ' .)
    INTNUM          reduce using rule 40 (expr -> expr ' .)
    FLOAT           reduce using rule 40 (expr -> expr ' .)
    STRING          reduce using rule 40 (expr -> expr ' .)
    ZEROS           reduce using rule 40 (expr -> expr ' .)
    ONES            reduce using rule 40 (expr -> expr ' .)
    EYE             reduce using rule 40 (expr -> expr ' .)
    [               reduce using rule 40 (expr -> expr ' .)
    IF              reduce using rule 40 (expr -> expr ' .)


state 54

    (11) inst -> ids = . expr
    (25) expr -> . expr + expr
    (26) expr -> . expr - expr
    (27) expr -> . expr * expr
    (28) expr -> . expr / expr
    (29) expr -> . expr DOTADD expr
    (30) expr -> . expr DOTSUB expr
    (31) expr -> . expr DOTMUL expr
    (32) expr -> . expr DOTDIV expr
    (33) expr -> . expr EQ expr
    (34) expr -> . expr GEQ expr
    (35) expr -> . expr LEQ expr
    (36) expr -> . expr NEQ expr
    (37) expr -> . expr < expr
    (38) expr -> . expr > expr
    (39) expr -> . ( expr )
    (40) expr -> . expr '
    (41) expr -> . - expr
    (42) expr -> . ids
    (43) expr -> . integer
    (44) expr -> . float
    (45) expr -> . string
    (46) expr -> . matrix
    (16) ids -> . ID
    (17) ids -> . ID [ values ]
    (47) integer -> . INTNUM
    (48) float -> . FLOAT
    (49) string -> . STRING
    (50) matrix -> . ZEROS ( values )
    (51) matrix -> . ONES ( values )
    (52) matrix -> . EYE ( values )
    (53) matrix -> . [ rows ]
    (54) matrix -> . [ rows ; ]

    (               shift and go to state 17
    -               shift and go to state 16
    ID              shift and go to state 22
    INTNUM          shift and go to state 27
    FLOAT           shift and go to state 28
    STRING          shift and go to state 29
    ZEROS           shift and go to state 30
    ONES            shift and go to state 31
    EYE             shift and go to state 32
    [               shift and go to state 23

    ids                            shift and go to state 61
    expr                           shift and go to state 91
    integer                        shift and go to state 18
    float                          shift and go to state 19
    string                         shift and go to state 20
    matrix                         shift and go to state 21

state 55

    (12) inst -> ids ADDASSIGN . expr
    (25) expr -> . expr + expr
    (26) expr -> . expr - expr
    (27) expr -> . expr * expr
    (28) expr -> . expr / expr
    (29) expr -> . expr DOTADD expr
    (30) expr -> . expr DOTSUB expr
    (31) expr -> . expr DOTMUL expr
    (32) expr -> . expr DOTDIV expr
    (33) expr -> . expr EQ expr
    (34) expr -> . expr GEQ expr
    (35) expr -> . expr LEQ expr
    (36) expr -> . expr NEQ expr
    (37) expr -> . expr < expr
    (38) expr -> . expr > expr
    (39) expr -> . ( expr )
    (40) expr -> . expr '
    (41) expr -> . - expr
    (42) expr -> . ids
    (43) expr -> . integer
    (44) expr -> . float
    (45) expr -> . string
    (46) expr -> . matrix
    (16) ids -> . ID
    (17) ids -> . ID [ values ]
    (47) integer -> . INTNUM
    (48) float -> . FLOAT
    (49) string -> . STRING
    (50) matrix -> . ZEROS ( values )
    (51) matrix -> . ONES ( values )
    (52) matrix -> . EYE ( values )
    (53) matrix -> . [ rows ]
    (54) matrix -> . [ rows ; ]

    (               shift and go to state 17
    -               shift and go to state 16
    ID              shift and go to state 22
    INTNUM          shift and go to state 27
    FLOAT           shift and go to state 28
    STRING          shift and go to state 29
    ZEROS           shift and go to state 30
    ONES            shift and go to state 31
    EYE             shift and go to state 32
    [               shift and go to state 23

    ids                            shift and go to state 61
    expr                           shift and go to state 92
    integer                        shift and go to state 18
    float                          shift and go to state 19
    string                         shift and go to state 20
    matrix                         shift and go to state 21

state 56

    (13) inst -> ids SUBASSIGN . expr
    (25) expr -> . expr + expr
    (26) expr -> . expr - expr
    (27) expr -> . expr * expr
    (28) expr -> . expr / expr
    (29) expr -> . expr DOTADD expr
    (30) expr -> . expr DOTSUB expr
    (31) expr -> . expr DOTMUL expr
    (32) expr -> . expr DOTDIV expr
    (33) expr -> . expr EQ expr
    (34) expr -> . expr GEQ expr
    (35) expr -> . expr LEQ expr
    (36) expr -> . expr NEQ expr
    (37) expr -> . expr < expr
    (38) expr -> . expr > expr
    (39) expr -> . ( expr )
    (40) expr -> . expr '
    (41) expr -> . - expr
    (42) expr -> . ids
    (43) expr -> . integer
    (44) expr -> . float
    (45) expr -> . string
    (46) expr -> . matrix
    (16) ids -> . ID
    (17) ids -> . ID [ values ]
    (47) integer -> . INTNUM
    (48) float -> . FLOAT
    (49) string -> . STRING
    (50) matrix -> . ZEROS ( values )
    (51) matrix -> . ONES ( values )
    (52) matrix -> . EYE ( values )
    (53) matrix -> . [ rows ]
    (54) matrix -> . [ rows ; ]

    (               shift and go to state 17
    -               shift and go to state 16
    ID              shift and go to state 22
    INTNUM          shift and go to state 27
    FLOAT           shift and go to state 28
    STRING          shift and go to state 29
    ZEROS           shift and go to state 30
    ONES            shift and go to state 31
    EYE             shift and go to state 32
    [               shift and go to state 23

    ids                            shift and go to state 61
    expr                           shift and go to state 93
    integer                        shift and go to state 18
    float                          shift and go to state 19
    string                         shift and go to state 20
    matrix                         shift and go to state 21

state 57

    (14) inst -> ids MULASSIGN . expr
    (25) expr -> . expr + expr
    (26) expr -> . expr - expr
    (27) expr -> . expr * expr
    (28) expr -> . expr / expr
    (29) expr -> . expr DOTADD expr
    (30) expr -> . expr DOTSUB expr
    (31) expr -> . expr DOTMUL expr
    (32) expr -> . expr DOTDIV expr
    (33) expr -> . expr EQ expr
    (34) expr -> . expr GEQ expr
    (35) expr -> . expr LEQ expr
    (36) expr -> . expr NEQ expr
    (37) expr -> . expr < expr
    (38) expr -> . expr > expr
    (39) expr -> . ( expr )
    (40) expr -> . expr '
    (41) expr -> . - expr
    (42) expr -> . ids
    (43) expr -> . integer
    (44) expr -> . float
    (45) expr -> . string
    (46) expr -> . matrix
    (16) ids -> . ID
    (17) ids -> . ID [ values ]
    (47) integer -> . INTNUM
    (48) float -> . FLOAT
    (49) string -> . STRING
    (50) matrix -> . ZEROS ( values )
    (51) matrix -> . ONES ( values )
    (52) matrix -> . EYE ( values )
    (53) matrix -> . [ rows ]
    (54) matrix -> . [ rows ; ]

    (               shift and go to state 17
    -               shift and go to state 16
    ID              shift and go to state 22
    INTNUM          shift and go to state 27
    FLOAT           shift and go to state 28
    STRING          shift and go to state 29
    ZEROS           shift and go to state 30
    ONES            shift and go to state 31
    EYE             shift and go to state 32
    [               shift and go to state 23

    ids                            shift and go to state 61
    expr                           shift and go to state 94
    integer                        shift and go to state 18
    float                          shift and go to state 19
    string                         shift and go to state 20
    matrix                         shift and go to state 21

state 58

    (15) inst -> ids DIVASSIGN . expr
    (25) expr -> . expr + expr
    (26) expr -> . expr - expr
    (27) expr -> . expr * expr
    (28) expr -> . expr / expr
    (29) expr -> . expr DOTADD expr
    (30) expr -> . expr DOTSUB expr
    (31) expr -> . expr DOTMUL expr
    (32) expr -> . expr DOTDIV expr
    (33) expr -> . expr EQ expr
    (34) expr -> . expr GEQ expr
    (35) expr -> . expr LEQ expr
    (36) expr -> . expr NEQ expr
    (37) expr -> . expr < expr
    (38) expr -> . expr > expr
    (39) expr -> . ( expr )
    (40) expr -> . expr '
    (41) expr -> . - expr
    (42) expr -> . ids
    (43) expr -> . integer
    (44) expr -> . float
    (45) expr -> . string
    (46) expr -> . matrix
    (16) ids -> . ID
    (17) ids -> . ID [ values ]
    (47) integer -> . INTNUM
    (48) float -> . FLOAT
    (49) string -> . STRING
    (50) matrix -> . ZEROS ( values )
    (51) matrix -> . ONES ( values )
    (52) matrix -> . EYE ( values )
    (53) matrix -> . [ rows ]
    (54) matrix -> . [ rows ; ]

    (               shift and go to state 17
    -               shift and go to state 16
    ID              shift and go to state 22
    INTNUM          shift and go to state 27
    FLOAT           shift and go to state 28
    STRING          shift and go to state 29
    ZEROS           shift and go to state 30
    ONES            shift and go to state 31
    EYE             shift and go to state 32
    [               shift and go to state 23

    ids                            shift and go to state 61
    expr                           shift and go to state 95
    integer                        shift and go to state 18
    float                          shift and go to state 19
    string                         shift and go to state 20
    matrix                         shift and go to state 21

state 59

    (21) inst -> RETURN values .
    (58) values -> values . , expr

  ! shift/reduce conflict for , resolved as shift
    ;               reduce using rule 21 (inst -> RETURN values .)
    ,               shift and go to state 96

  ! ,               [ reduce using rule 21 (inst -> RETURN values .) ]


state 60

    (22) inst -> RETURN expr .
    (57) values -> expr .
    (25) expr -> expr . + expr
    (26) expr -> expr . - expr
    (27) expr -> expr . * expr
    (28) expr -> expr . / expr
    (29) expr -> expr . DOTADD expr
    (30) expr -> expr . DOTSUB expr
    (31) expr -> expr . DOTMUL expr
    (32) expr -> expr . DOTDIV expr
    (33) expr -> expr . EQ expr
    (34) expr -> expr . GEQ expr
    (35) expr -> expr . LEQ expr
    (36) expr -> expr . NEQ expr
    (37) expr -> expr . < expr
    (38) expr -> expr . > expr
    (40) expr -> expr . '

  ! reduce/reduce conflict for , resolved using rule 22 (inst -> RETURN expr .)
  ! reduce/reduce conflict for ; resolved using rule 22 (inst -> RETURN expr .)
    ;               reduce using rule 22 (inst -> RETURN expr .)
    ,               reduce using rule 22 (inst -> RETURN expr .)
    +               shift and go to state 39
    -               shift and go to state 40
    *               shift and go to state 41
    /               shift and go to state 42
    DOTADD          shift and go to state 43
    DOTSUB          shift and go to state 44
    DOTMUL          shift and go to state 45
    DOTDIV          shift and go to state 46
    EQ              shift and go to state 47
    GEQ             shift and go to state 48
    LEQ             shift and go to state 49
    NEQ             shift and go to state 50
    <               shift and go to state 51
    >               shift and go to state 52
    '               shift and go to state 53

  ! ,               [ reduce using rule 57 (values -> expr .) ]
  ! ;               [ reduce using rule 57 (values -> expr .) ]


state 61

    (42) expr -> ids .

    +               reduce using rule 42 (expr -> ids .)
    -               reduce using rule 42 (expr -> ids .)
    *               reduce using rule 42 (expr -> ids .)
    /               reduce using rule 42 (expr -> ids .)
    DOTADD          reduce using rule 42 (expr -> ids .)
    DOTSUB          reduce using rule 42 (expr -> ids .)
    DOTMUL          reduce using rule 42 (expr -> ids .)
    DOTDIV          reduce using rule 42 (expr -> ids .)
    EQ              reduce using rule 42 (expr -> ids .)
    GEQ             reduce using rule 42 (expr -> ids .)
    LEQ             reduce using rule 42 (expr -> ids .)
    NEQ             reduce using rule 42 (expr -> ids .)
    <               reduce using rule 42 (expr -> ids .)
    >               reduce using rule 42 (expr -> ids .)
    '               reduce using rule 42 (expr -> ids .)
    ;               reduce using rule 42 (expr -> ids .)
    ,               reduce using rule 42 (expr -> ids .)
    )               reduce using rule 42 (expr -> ids .)
    ]               reduce using rule 42 (expr -> ids .)
    :               reduce using rule 42 (expr -> ids .)
    {               reduce using rule 42 (expr -> ids .)
    BREAK           reduce using rule 42 (expr -> ids .)
    CONTINUE        reduce using rule 42 (expr -> ids .)
    RETURN          reduce using rule 42 (expr -> ids .)
    PRINT           reduce using rule 42 (expr -> ids .)
    (               reduce using rule 42 (expr -> ids .)
    ID              reduce using rule 42 (expr -> ids .)
    FOR             reduce using rule 42 (expr -> ids .)
    WHILE           reduce using rule 42 (expr -> ids .)
    INTNUM          reduce using rule 42 (expr -> ids .)
    FLOAT           reduce using rule 42 (expr -> ids .)
    STRING          reduce using rule 42 (expr -> ids .)
    ZEROS           reduce using rule 42 (expr -> ids .)
    ONES            reduce using rule 42 (expr -> ids .)
    EYE             reduce using rule 42 (expr -> ids .)
    [               reduce using rule 42 (expr -> ids .)
    IF              reduce using rule 42 (expr -> ids .)


state 62

    (23) inst -> PRINT values .
    (58) values -> values . , expr

  ! shift/reduce conflict for , resolved as shift
    ;               reduce using rule 23 (inst -> PRINT values .)
    ,               shift and go to state 96

  ! ,               [ reduce using rule 23 (inst -> PRINT values .) ]


state 63

    (24) inst -> PRINT expr .
    (57) values -> expr .
    (25) expr -> expr . + expr
    (26) expr -> expr . - expr
    (27) expr -> expr . * expr
    (28) expr -> expr . / expr
    (29) expr -> expr . DOTADD expr
    (30) expr -> expr . DOTSUB expr
    (31) expr -> expr . DOTMUL expr
    (32) expr -> expr . DOTDIV expr
    (33) expr -> expr . EQ expr
    (34) expr -> expr . GEQ expr
    (35) expr -> expr . LEQ expr
    (36) expr -> expr . NEQ expr
    (37) expr -> expr . < expr
    (38) expr -> expr . > expr
    (40) expr -> expr . '

  ! reduce/reduce conflict for , resolved using rule 24 (inst -> PRINT expr .)
  ! reduce/reduce conflict for ; resolved using rule 24 (inst -> PRINT expr .)
    ;               reduce using rule 24 (inst -> PRINT expr .)
    ,               reduce using rule 24 (inst -> PRINT expr .)
    +               shift and go to state 39
    -               shift and go to state 40
    *               shift and go to state 41
    /               shift and go to state 42
    DOTADD          shift and go to state 43
    DOTSUB          shift and go to state 44
    DOTMUL          shift and go to state 45
    DOTDIV          shift and go to state 46
    EQ              shift and go to state 47
    GEQ             shift and go to state 48
    LEQ             shift and go to state 49
    NEQ             shift and go to state 50
    <               shift and go to state 51
    >               shift and go to state 52
    '               shift and go to state 53

  ! ,               [ reduce using rule 57 (values -> expr .) ]
  ! ;               [ reduce using rule 57 (values -> expr .) ]


state 64

    (41) expr -> - expr .
    (25) expr -> expr . + expr
    (26) expr -> expr . - expr
    (27) expr -> expr . * expr
    (28) expr -> expr . / expr
    (29) expr -> expr . DOTADD expr
    (30) expr -> expr . DOTSUB expr
    (31) expr -> expr . DOTMUL expr
    (32) expr -> expr . DOTDIV expr
    (33) expr -> expr . EQ expr
    (34) expr -> expr . GEQ expr
    (35) expr -> expr . LEQ expr
    (36) expr -> expr . NEQ expr
    (37) expr -> expr . < expr
    (38) expr -> expr . > expr
    (40) expr -> expr . '

    ;               reduce using rule 41 (expr -> - expr .)
    ,               reduce using rule 41 (expr -> - expr .)
    +               reduce using rule 41 (expr -> - expr .)
    -               reduce using rule 41 (expr -> - expr .)
    *               reduce using rule 41 (expr -> - expr .)
    /               reduce using rule 41 (expr -> - expr .)
    DOTADD          reduce using rule 41 (expr -> - expr .)
    DOTSUB          reduce using rule 41 (expr -> - expr .)
    DOTMUL          reduce using rule 41 (expr -> - expr .)
    DOTDIV          reduce using rule 41 (expr -> - expr .)
    EQ              reduce using rule 41 (expr -> - expr .)
    GEQ             reduce using rule 41 (expr -> - expr .)
    LEQ             reduce using rule 41 (expr -> - expr .)
    NEQ             reduce using rule 41 (expr -> - expr .)
    <               reduce using rule 41 (expr -> - expr .)
    >               reduce using rule 41 (expr -> - expr .)
    '               reduce using rule 41 (expr -> - expr .)
    )               reduce using rule 41 (expr -> - expr .)
    ]               reduce using rule 41 (expr -> - expr .)
    :               reduce using rule 41 (expr -> - expr .)
    {               reduce using rule 41 (expr -> - expr .)
    BREAK           reduce using rule 41 (expr -> - expr .)
    CONTINUE        reduce using rule 41 (expr -> - expr .)
    RETURN          reduce using rule 41 (expr -> - expr .)
    PRINT           reduce using rule 41 (expr -> - expr .)
    (               reduce using rule 41 (expr -> - expr .)
    ID              reduce using rule 41 (expr -> - expr .)
    FOR             reduce using rule 41 (expr -> - expr .)
    WHILE           reduce using rule 41 (expr -> - expr .)
    INTNUM          reduce using rule 41 (expr -> - expr .)
    FLOAT           reduce using rule 41 (expr -> - expr .)
    STRING          reduce using rule 41 (expr -> - expr .)
    ZEROS           reduce using rule 41 (expr -> - expr .)
    ONES            reduce using rule 41 (expr -> - expr .)
    EYE             reduce using rule 41 (expr -> - expr .)
    [               reduce using rule 41 (expr -> - expr .)
    IF              reduce using rule 41 (expr -> - expr .)

  ! +               [ shift and go to state 39 ]
  ! -               [ shift and go to state 40 ]
  ! *               [ shift and go to state 41 ]
  ! /               [ shift and go to state 42 ]
  ! DOTADD          [ shift and go to state 43 ]
  ! DOTSUB          [ shift and go to state 44 ]
  ! DOTMUL          [ shift and go to state 45 ]
  ! DOTDIV          [ shift and go to state 46 ]
  ! EQ              [ shift and go to state 47 ]
  ! GEQ             [ shift and go to state 48 ]
  ! LEQ             [ shift and go to state 49 ]
  ! NEQ             [ shift and go to state 50 ]
  ! <               [ shift and go to state 51 ]
  ! >               [ shift and go to state 52 ]
  ! '               [ shift and go to state 53 ]


state 65

    (39) expr -> ( expr . )
    (25) expr -> expr . + expr
    (26) expr -> expr . - expr
    (27) expr -> expr . * expr
    (28) expr -> expr . / expr
    (29) expr -> expr . DOTADD expr
    (30) expr -> expr . DOTSUB expr
    (31) expr -> expr . DOTMUL expr
    (32) expr -> expr . DOTDIV expr
    (33) expr -> expr . EQ expr
    (34) expr -> expr . GEQ expr
    (35) expr -> expr . LEQ expr
    (36) expr -> expr . NEQ expr
    (37) expr -> expr . < expr
    (38) expr -> expr . > expr
    (40) expr -> expr . '

    )               shift and go to state 97
    +               shift and go to state 39
    -               shift and go to state 40
    *               shift and go to state 41
    /               shift and go to state 42
    DOTADD          shift and go to state 43
    DOTSUB          shift and go to state 44
    DOTMUL          shift and go to state 45
    DOTDIV          shift and go to state 46
    EQ              shift and go to state 47
    GEQ             shift and go to state 48
    LEQ             shift and go to state 49
    NEQ             shift and go to state 50
    <               shift and go to state 51
    >               shift and go to state 52
    '               shift and go to state 53


state 66

    (17) ids -> ID [ . values ]
    (57) values -> . expr
    (58) values -> . values , expr
    (25) expr -> . expr + expr
    (26) expr -> . expr - expr
    (27) expr -> . expr * expr
    (28) expr -> . expr / expr
    (29) expr -> . expr DOTADD expr
    (30) expr -> . expr DOTSUB expr
    (31) expr -> . expr DOTMUL expr
    (32) expr -> . expr DOTDIV expr
    (33) expr -> . expr EQ expr
    (34) expr -> . expr GEQ expr
    (35) expr -> . expr LEQ expr
    (36) expr -> . expr NEQ expr
    (37) expr -> . expr < expr
    (38) expr -> . expr > expr
    (39) expr -> . ( expr )
    (40) expr -> . expr '
    (41) expr -> . - expr
    (42) expr -> . ids
    (43) expr -> . integer
    (44) expr -> . float
    (45) expr -> . string
    (46) expr -> . matrix
    (16) ids -> . ID
    (17) ids -> . ID [ values ]
    (47) integer -> . INTNUM
    (48) float -> . FLOAT
    (49) string -> . STRING
    (50) matrix -> . ZEROS ( values )
    (51) matrix -> . ONES ( values )
    (52) matrix -> . EYE ( values )
    (53) matrix -> . [ rows ]
    (54) matrix -> . [ rows ; ]

    (               shift and go to state 17
    -               shift and go to state 16
    ID              shift and go to state 22
    INTNUM          shift and go to state 27
    FLOAT           shift and go to state 28
    STRING          shift and go to state 29
    ZEROS           shift and go to state 30
    ONES            shift and go to state 31
    EYE             shift and go to state 32
    [               shift and go to state 23

    values                         shift and go to state 98
    expr                           shift and go to state 69
    ids                            shift and go to state 61
    integer                        shift and go to state 18
    float                          shift and go to state 19
    string                         shift and go to state 20
    matrix                         shift and go to state 21

state 67

    (53) matrix -> [ rows . ]
    (54) matrix -> [ rows . ; ]
    (56) rows -> rows . ; values

    ]               shift and go to state 99
    ;               shift and go to state 100


state 68

    (55) rows -> values .
    (58) values -> values . , expr

    ]               reduce using rule 55 (rows -> values .)
    ;               reduce using rule 55 (rows -> values .)
    ,               shift and go to state 96


state 69

    (57) values -> expr .
    (25) expr -> expr . + expr
    (26) expr -> expr . - expr
    (27) expr -> expr . * expr
    (28) expr -> expr . / expr
    (29) expr -> expr . DOTADD expr
    (30) expr -> expr . DOTSUB expr
    (31) expr -> expr . DOTMUL expr
    (32) expr -> expr . DOTDIV expr
    (33) expr -> expr . EQ expr
    (34) expr -> expr . GEQ expr
    (35) expr -> expr . LEQ expr
    (36) expr -> expr . NEQ expr
    (37) expr -> expr . < expr
    (38) expr -> expr . > expr
    (40) expr -> expr . '

    ,               reduce using rule 57 (values -> expr .)
    ]               reduce using rule 57 (values -> expr .)
    ;               reduce using rule 57 (values -> expr .)
    )               reduce using rule 57 (values -> expr .)
    +               shift and go to state 39
    -               shift and go to state 40
    *               shift and go to state 41
    /               shift and go to state 42
    DOTADD          shift and go to state 43
    DOTSUB          shift and go to state 44
    DOTMUL          shift and go to state 45
    DOTDIV          shift and go to state 46
    EQ              shift and go to state 47
    GEQ             shift and go to state 48
    LEQ             shift and go to state 49
    NEQ             shift and go to state 50
    <               shift and go to state 51
    >               shift and go to state 52
    '               shift and go to state 53


state 70

    (65) if_condition -> if_cond ELSE . block
    (66) if_condition -> if_cond ELSE . if_condition
    (59) block -> . { instructions_opt }
    (60) block -> . instruction
    (64) if_condition -> . if_cond
    (65) if_condition -> . if_cond ELSE block
    (66) if_condition -> . if_cond ELSE if_condition
    (6) instruction -> . inst ;
    (7) instruction -> . condition
    (8) instruction -> . expr ;
    (9) instruction -> . inst ,
    (10) instruction -> . expr ,
    (67) if_cond -> . IF ( expr ) block
    (11) inst -> . ids = expr
    (12) inst -> . ids ADDASSIGN expr
    (13) inst -> . ids SUBASSIGN expr
    (14) inst -> . ids MULASSIGN expr
    (15) inst -> . ids DIVASSIGN expr
    (18) inst -> . BREAK
    (19) inst -> . CONTINUE
    (20) inst -> . RETURN
    (21) inst -> . RETURN values
    (22) inst -> . RETURN expr
    (23) inst -> . PRINT values
    (24) inst -> . PRINT expr
    (61) condition -> . if_condition
    (62) condition -> . for_condition
    (63) condition -> . while_condition
    (25) expr -> . expr + expr
    (26) expr -> . expr - expr
    (27) expr -> . expr * expr
    (28) expr -> . expr / expr
    (29) expr -> . expr DOTADD expr
    (30) expr -> . expr DOTSUB expr
    (31) expr -> . expr DOTMUL expr
    (32) expr -> . expr DOTDIV expr
    (33) expr -> . expr EQ expr
    (34) expr -> . expr GEQ expr
    (35) expr -> . expr LEQ expr
    (36) expr -> . expr NEQ expr
    (37) expr -> . expr < expr
    (38) expr -> . expr > expr
    (39) expr -> . ( expr )
    (40) expr -> . expr '
    (41) expr -> . - expr
    (42) expr -> . ids
    (43) expr -> . integer
    (44) expr -> . float
    (45) expr -> . string
    (46) expr -> . matrix
    (16) ids -> . ID
    (17) ids -> . ID [ values ]
    (68) for_condition -> . FOR ids = range block
    (70) while_condition -> . WHILE ( expr ) block
    (47) integer -> . INTNUM
    (48) float -> . FLOAT
    (49) string -> . STRING
    (50) matrix -> . ZEROS ( values )
    (51) matrix -> . ONES ( values )
    (52) matrix -> . EYE ( values )
    (53) matrix -> . [ rows ]
    (54) matrix -> . [ rows ; ]

    {               shift and go to state 103
    IF              shift and go to state 33
    BREAK           shift and go to state 9
    CONTINUE        shift and go to state 10
    RETURN          shift and go to state 11
    PRINT           shift and go to state 12
    (               shift and go to state 17
    -               shift and go to state 16
    ID              shift and go to state 22
    FOR             shift and go to state 25
    WHILE           shift and go to state 26
    INTNUM          shift and go to state 27
    FLOAT           shift and go to state 28
    STRING          shift and go to state 29
    ZEROS           shift and go to state 30
    ONES            shift and go to state 31
    EYE             shift and go to state 32
    [               shift and go to state 23

    if_cond                        shift and go to state 24
    block                          shift and go to state 101
    if_condition                   shift and go to state 102
    instruction                    shift and go to state 104
    inst                           shift and go to state 5
    condition                      shift and go to state 6
    expr                           shift and go to state 7
    ids                            shift and go to state 8
    for_condition                  shift and go to state 14
    while_condition                shift and go to state 15
    integer                        shift and go to state 18
    float                          shift and go to state 19
    string                         shift and go to state 20
    matrix                         shift and go to state 21

state 71

    (68) for_condition -> FOR ids . = range block

    =               shift and go to state 105


state 72

    (70) while_condition -> WHILE ( . expr ) block
    (25) expr -> . expr + expr
    (26) expr -> . expr - expr
    (27) expr -> . expr * expr
    (28) expr -> . expr / expr
    (29) expr -> . expr DOTADD expr
    (30) expr -> . expr DOTSUB expr
    (31) expr -> . expr DOTMUL expr
    (32) expr -> . expr DOTDIV expr
    (33) expr -> . expr EQ expr
    (34) expr -> . expr GEQ expr
    (35) expr -> . expr LEQ expr
    (36) expr -> . expr NEQ expr
    (37) expr -> . expr < expr
    (38) expr -> . expr > expr
    (39) expr -> . ( expr )
    (40) expr -> . expr '
    (41) expr -> . - expr
    (42) expr -> . ids
    (43) expr -> . integer
    (44) expr -> . float
    (45) expr -> . string
    (46) expr -> . matrix
    (16) ids -> . ID
    (17) ids -> . ID [ values ]
    (47) integer -> . INTNUM
    (48) float -> . FLOAT
    (49) string -> . STRING
    (50) matrix -> . ZEROS ( values )
    (51) matrix -> . ONES ( values )
    (52) matrix -> . EYE ( values )
    (53) matrix -> . [ rows ]
    (54) matrix -> . [ rows ; ]

    (               shift and go to state 17
    -               shift and go to state 16
    ID              shift and go to state 22
    INTNUM          shift and go to state 27
    FLOAT           shift and go to state 28
    STRING          shift and go to state 29
    ZEROS           shift and go to state 30
    ONES            shift and go to state 31
    EYE             shift and go to state 32
    [               shift and go to state 23

    expr                           shift and go to state 106
    ids                            shift and go to state 61
    integer                        shift and go to state 18
    float                          shift and go to state 19
    string                         shift and go to state 20
    matrix                         shift and go to state 21

state 73

    (50) matrix -> ZEROS ( . values )
    (57) values -> . expr
    (58) values -> . values , expr
    (25) expr -> . expr + expr
    (26) expr -> . expr - expr
    (27) expr -> . expr * expr
    (28) expr -> . expr / expr
    (29) expr -> . expr DOTADD expr
    (30) expr -> . expr DOTSUB expr
    (31) expr -> . expr DOTMUL expr
    (32) expr -> . expr DOTDIV expr
    (33) expr -> . expr EQ expr
    (34) expr -> . expr GEQ expr
    (35) expr -> . expr LEQ expr
    (36) expr -> . expr NEQ expr
    (37) expr -> . expr < expr
    (38) expr -> . expr > expr
    (39) expr -> . ( expr )
    (40) expr -> . expr '
    (41) expr -> . - expr
    (42) expr -> . ids
    (43) expr -> . integer
    (44) expr -> . float
    (45) expr -> . string
    (46) expr -> . matrix
    (16) ids -> . ID
    (17) ids -> . ID [ values ]
    (47) integer -> . INTNUM
    (48) float -> . FLOAT
    (49) string -> . STRING
    (50) matrix -> . ZEROS ( values )
    (51) matrix -> . ONES ( values )
    (52) matrix -> . EYE ( values )
    (53) matrix -> . [ rows ]
    (54) matrix -> . [ rows ; ]

    (               shift and go to state 17
    -               shift and go to state 16
    ID              shift and go to state 22
    INTNUM          shift and go to state 27
    FLOAT           shift and go to state 28
    STRING          shift and go to state 29
    ZEROS           shift and go to state 30
    ONES            shift and go to state 31
    EYE             shift and go to state 32
    [               shift and go to state 23

    values                         shift and go to state 107
    expr                           shift and go to state 69
    ids                            shift and go to state 61
    integer                        shift and go to state 18
    float                          shift and go to state 19
    string                         shift and go to state 20
    matrix                         shift and go to state 21

state 74

    (51) matrix -> ONES ( . values )
    (57) values -> . expr
    (58) values -> . values , expr
    (25) expr -> . expr + expr
    (26) expr -> . expr - expr
    (27) expr -> . expr * expr
    (28) expr -> . expr / expr
    (29) expr -> . expr DOTADD expr
    (30) expr -> . expr DOTSUB expr
    (31) expr -> . expr DOTMUL expr
    (32) expr -> . expr DOTDIV expr
    (33) expr -> . expr EQ expr
    (34) expr -> . expr GEQ expr
    (35) expr -> . expr LEQ expr
    (36) expr -> . expr NEQ expr
    (37) expr -> . expr < expr
    (38) expr -> . expr > expr
    (39) expr -> . ( expr )
    (40) expr -> . expr '
    (41) expr -> . - expr
    (42) expr -> . ids
    (43) expr -> . integer
    (44) expr -> . float
    (45) expr -> . string
    (46) expr -> . matrix
    (16) ids -> . ID
    (17) ids -> . ID [ values ]
    (47) integer -> . INTNUM
    (48) float -> . FLOAT
    (49) string -> . STRING
    (50) matrix -> . ZEROS ( values )
    (51) matrix -> . ONES ( values )
    (52) matrix -> . EYE ( values )
    (53) matrix -> . [ rows ]
    (54) matrix -> . [ rows ; ]

    (               shift and go to state 17
    -               shift and go to state 16
    ID              shift and go to state 22
    INTNUM          shift and go to state 27
    FLOAT           shift and go to state 28
    STRING          shift and go to state 29
    ZEROS           shift and go to state 30
    ONES            shift and go to state 31
    EYE             shift and go to state 32
    [               shift and go to state 23

    values                         shift and go to state 108
    expr                           shift and go to state 69
    ids                            shift and go to state 61
    integer                        shift and go to state 18
    float                          shift and go to state 19
    string                         shift and go to state 20
    matrix                         shift and go to state 21

state 75

    (52) matrix -> EYE ( . values )
    (57) values -> . expr
    (58) values -> . values , expr
    (25) expr -> . expr + expr
    (26) expr -> . expr - expr
    (27) expr -> . expr * expr
    (28) expr -> . expr / expr
    (29) expr -> . expr DOTADD expr
    (30) expr -> . expr DOTSUB expr
    (31) expr -> . expr DOTMUL expr
    (32) expr -> . expr DOTDIV expr
    (33) expr -> . expr EQ expr
    (34) expr -> . expr GEQ expr
    (35) expr -> . expr LEQ expr
    (36) expr -> . expr NEQ expr
    (37) expr -> . expr < expr
    (38) expr -> . expr > expr
    (39) expr -> . ( expr )
    (40) expr -> . expr '
    (41) expr -> . - expr
    (42) expr -> . ids
    (43) expr -> . integer
    (44) expr -> . float
    (45) expr -> . string
    (46) expr -> . matrix
    (16) ids -> . ID
    (17) ids -> . ID [ values ]
    (47) integer -> . INTNUM
    (48) float -> . FLOAT
    (49) string -> . STRING
    (50) matrix -> . ZEROS ( values )
    (51) matrix -> . ONES ( values )
    (52) matrix -> . EYE ( values )
    (53) matrix -> . [ rows ]
    (54) matrix -> . [ rows ; ]

    (               shift and go to state 17
    -               shift and go to state 16
    ID              shift and go to state 22
    INTNUM          shift and go to state 27
    FLOAT           shift and go to state 28
    STRING          shift and go to state 29
    ZEROS           shift and go to state 30
    ONES            shift and go to state 31
    EYE             shift and go to state 32
    [               shift and go to state 23

    values                         shift and go to state 109
    expr                           shift and go to state 69
    ids                            shift and go to state 61
    integer                        shift and go to state 18
    float                          shift and go to state 19
    string                         shift and go to state 20
    matrix                         shift and go to state 21

state 76

    (67) if_cond -> IF ( . expr ) block
    (25) expr -> . expr + expr
    (26) expr -> . expr - expr
    (27) expr -> . expr * expr
    (28) expr -> . expr / expr
    (29) expr -> . expr DOTADD expr
    (30) expr -> . expr DOTSUB expr
    (31) expr -> . expr DOTMUL expr
    (32) expr -> . expr DOTDIV expr
    (33) expr -> . expr EQ expr
    (34) expr -> . expr GEQ expr
    (35) expr -> . expr LEQ expr
    (36) expr -> . expr NEQ expr
    (37) expr -> . expr < expr
    (38) expr -> . expr > expr
    (39) expr -> . ( expr )
    (40) expr -> . expr '
    (41) expr -> . - expr
    (42) expr -> . ids
    (43) expr -> . integer
    (44) expr -> . float
    (45) expr -> . string
    (46) expr -> . matrix
    (16) ids -> . ID
    (17) ids -> . ID [ values ]
    (47) integer -> . INTNUM
    (48) float -> . FLOAT
    (49) string -> . STRING
    (50) matrix -> . ZEROS ( values )
    (51) matrix -> . ONES ( values )
    (52) matrix -> . EYE ( values )
    (53) matrix -> . [ rows ]
    (54) matrix -> . [ rows ; ]

    (               shift and go to state 17
    -               shift and go to state 16
    ID              shift and go to state 22
    INTNUM          shift and go to state 27
    FLOAT           shift and go to state 28
    STRING          shift and go to state 29
    ZEROS           shift and go to state 30
    ONES            shift and go to state 31
    EYE             shift and go to state 32
    [               shift and go to state 23

    expr                           shift and go to state 110
    ids                            shift and go to state 61
    integer                        shift and go to state 18
    float                          shift and go to state 19
    string                         shift and go to state 20
    matrix                         shift and go to state 21

state 77

    (25) expr -> expr + expr .
    (25) expr -> expr . + expr
    (26) expr -> expr . - expr
    (27) expr -> expr . * expr
    (28) expr -> expr . / expr
    (29) expr -> expr . DOTADD expr
    (30) expr -> expr . DOTSUB expr
    (31) expr -> expr . DOTMUL expr
    (32) expr -> expr . DOTDIV expr
    (33) expr -> expr . EQ expr
    (34) expr -> expr . GEQ expr
    (35) expr -> expr . LEQ expr
    (36) expr -> expr . NEQ expr
    (37) expr -> expr . < expr
    (38) expr -> expr . > expr
    (40) expr -> expr . '

    ;               reduce using rule 25 (expr -> expr + expr .)
    ,               reduce using rule 25 (expr -> expr + expr .)
    +               reduce using rule 25 (expr -> expr + expr .)
    -               reduce using rule 25 (expr -> expr + expr .)
    DOTADD          reduce using rule 25 (expr -> expr + expr .)
    DOTSUB          reduce using rule 25 (expr -> expr + expr .)
    EQ              reduce using rule 25 (expr -> expr + expr .)
    GEQ             reduce using rule 25 (expr -> expr + expr .)
    LEQ             reduce using rule 25 (expr -> expr + expr .)
    NEQ             reduce using rule 25 (expr -> expr + expr .)
    <               reduce using rule 25 (expr -> expr + expr .)
    >               reduce using rule 25 (expr -> expr + expr .)
    '               reduce using rule 25 (expr -> expr + expr .)
    )               reduce using rule 25 (expr -> expr + expr .)
    ]               reduce using rule 25 (expr -> expr + expr .)
    :               reduce using rule 25 (expr -> expr + expr .)
    {               reduce using rule 25 (expr -> expr + expr .)
    BREAK           reduce using rule 25 (expr -> expr + expr .)
    CONTINUE        reduce using rule 25 (expr -> expr + expr .)
    RETURN          reduce using rule 25 (expr -> expr + expr .)
    PRINT           reduce using rule 25 (expr -> expr + expr .)
    (               reduce using rule 25 (expr -> expr + expr .)
    ID              reduce using rule 25 (expr -> expr + expr .)
    FOR             reduce using rule 25 (expr -> expr + expr .)
    WHILE           reduce using rule 25 (expr -> expr + expr .)
    INTNUM          reduce using rule 25 (expr -> expr + expr .)
    FLOAT           reduce using rule 25 (expr -> expr + expr .)
    STRING          reduce using rule 25 (expr -> expr + expr .)
    ZEROS           reduce using rule 25 (expr -> expr + expr .)
    ONES            reduce using rule 25 (expr -> expr + expr .)
    EYE             reduce using rule 25 (expr -> expr + expr .)
    [               reduce using rule 25 (expr -> expr + expr .)
    IF              reduce using rule 25 (expr -> expr + expr .)
    *               shift and go to state 41
    /               shift and go to state 42
    DOTMUL          shift and go to state 45
    DOTDIV          shift and go to state 46

  ! *               [ reduce using rule 25 (expr -> expr + expr .) ]
  ! /               [ reduce using rule 25 (expr -> expr + expr .) ]
  ! DOTMUL          [ reduce using rule 25 (expr -> expr + expr .) ]
  ! DOTDIV          [ reduce using rule 25 (expr -> expr + expr .) ]
  ! +               [ shift and go to state 39 ]
  ! -               [ shift and go to state 40 ]
  ! DOTADD          [ shift and go to state 43 ]
  ! DOTSUB          [ shift and go to state 44 ]
  ! EQ              [ shift and go to state 47 ]
  ! GEQ             [ shift and go to state 48 ]
  ! LEQ             [ shift and go to state 49 ]
  ! NEQ             [ shift and go to state 50 ]
  ! <               [ shift and go to state 51 ]
  ! >               [ shift and go to state 52 ]
  ! '               [ shift and go to state 53 ]


state 78

    (26) expr -> expr - expr .
    (25) expr -> expr . + expr
    (26) expr -> expr . - expr
    (27) expr -> expr . * expr
    (28) expr -> expr . / expr
    (29) expr -> expr . DOTADD expr
    (30) expr -> expr . DOTSUB expr
    (31) expr -> expr . DOTMUL expr
    (32) expr -> expr . DOTDIV expr
    (33) expr -> expr . EQ expr
    (34) expr -> expr . GEQ expr
    (35) expr -> expr . LEQ expr
    (36) expr -> expr . NEQ expr
    (37) expr -> expr . < expr
    (38) expr -> expr . > expr
    (40) expr -> expr . '

    ;               reduce using rule 26 (expr -> expr - expr .)
    ,               reduce using rule 26 (expr -> expr - expr .)
    +               reduce using rule 26 (expr -> expr - expr .)
    -               reduce using rule 26 (expr -> expr - expr .)
    DOTADD          reduce using rule 26 (expr -> expr - expr .)
    DOTSUB          reduce using rule 26 (expr -> expr - expr .)
    EQ              reduce using rule 26 (expr -> expr - expr .)
    GEQ             reduce using rule 26 (expr -> expr - expr .)
    LEQ             reduce using rule 26 (expr -> expr - expr .)
    NEQ             reduce using rule 26 (expr -> expr - expr .)
    <               reduce using rule 26 (expr -> expr - expr .)
    >               reduce using rule 26 (expr -> expr - expr .)
    '               reduce using rule 26 (expr -> expr - expr .)
    )               reduce using rule 26 (expr -> expr - expr .)
    ]               reduce using rule 26 (expr -> expr - expr .)
    :               reduce using rule 26 (expr -> expr - expr .)
    {               reduce using rule 26 (expr -> expr - expr .)
    BREAK           reduce using rule 26 (expr -> expr - expr .)
    CONTINUE        reduce using rule 26 (expr -> expr - expr .)
    RETURN          reduce using rule 26 (expr -> expr - expr .)
    PRINT           reduce using rule 26 (expr -> expr - expr .)
    (               reduce using rule 26 (expr -> expr - expr .)
    ID              reduce using rule 26 (expr -> expr - expr .)
    FOR             reduce using rule 26 (expr -> expr - expr .)
    WHILE           reduce using rule 26 (expr -> expr - expr .)
    INTNUM          reduce using rule 26 (expr -> expr - expr .)
    FLOAT           reduce using rule 26 (expr -> expr - expr .)
    STRING          reduce using rule 26 (expr -> expr - expr .)
    ZEROS           reduce using rule 26 (expr -> expr - expr .)
    ONES            reduce using rule 26 (expr -> expr - expr .)
    EYE             reduce using rule 26 (expr -> expr - expr .)
    [               reduce using rule 26 (expr -> expr - expr .)
    IF              reduce using rule 26 (expr -> expr - expr .)
    *               shift and go to state 41
    /               shift and go to state 42
    DOTMUL          shift and go to state 45
    DOTDIV          shift and go to state 46

  ! *               [ reduce using rule 26 (expr -> expr - expr .) ]
  ! /               [ reduce using rule 26 (expr -> expr - expr .) ]
  ! DOTMUL          [ reduce using rule 26 (expr -> expr - expr .) ]
  ! DOTDIV          [ reduce using rule 26 (expr -> expr - expr .) ]
  ! +               [ shift and go to state 39 ]
  ! -               [ shift and go to state 40 ]
  ! DOTADD          [ shift and go to state 43 ]
  ! DOTSUB          [ shift and go to state 44 ]
  ! EQ              [ shift and go to state 47 ]
  ! GEQ             [ shift and go to state 48 ]
  ! LEQ             [ shift and go to state 49 ]
  ! NEQ             [ shift and go to state 50 ]
  ! <               [ shift and go to state 51 ]
  ! >               [ shift and go to state 52 ]
  ! '               [ shift and go to state 53 ]


state 79

    (27) expr -> expr * expr .
    (25) expr -> expr . + expr
    (26) expr -> expr . - expr
    (27) expr -> expr . * expr
    (28) expr -> expr . / expr
    (29) expr -> expr . DOTADD expr
    (30) expr -> expr . DOTSUB expr
    (31) expr -> expr . DOTMUL expr
    (32) expr -> expr . DOTDIV expr
    (33) expr -> expr . EQ expr
    (34) expr -> expr . GEQ expr
    (35) expr -> expr . LEQ expr
    (36) expr -> expr . NEQ expr
    (37) expr -> expr . < expr
    (38) expr -> expr . > expr
    (40) expr -> expr . '

    ;               reduce using rule 27 (expr -> expr * expr .)
    ,               reduce using rule 27 (expr -> expr * expr .)
    +               reduce using rule 27 (expr -> expr * expr .)
    -               reduce using rule 27 (expr -> expr * expr .)
    *               reduce using rule 27 (expr -> expr * expr .)
    /               reduce using rule 27 (expr -> expr * expr .)
    DOTADD          reduce using rule 27 (expr -> expr * expr .)
    DOTSUB          reduce using rule 27 (expr -> expr * expr .)
    DOTMUL          reduce using rule 27 (expr -> expr * expr .)
    DOTDIV          reduce using rule 27 (expr -> expr * expr .)
    EQ              reduce using rule 27 (expr -> expr * expr .)
    GEQ             reduce using rule 27 (expr -> expr * expr .)
    LEQ             reduce using rule 27 (expr -> expr * expr .)
    NEQ             reduce using rule 27 (expr -> expr * expr .)
    <               reduce using rule 27 (expr -> expr * expr .)
    >               reduce using rule 27 (expr -> expr * expr .)
    '               reduce using rule 27 (expr -> expr * expr .)
    )               reduce using rule 27 (expr -> expr * expr .)
    ]               reduce using rule 27 (expr -> expr * expr .)
    :               reduce using rule 27 (expr -> expr * expr .)
    {               reduce using rule 27 (expr -> expr * expr .)
    BREAK           reduce using rule 27 (expr -> expr * expr .)
    CONTINUE        reduce using rule 27 (expr -> expr * expr .)
    RETURN          reduce using rule 27 (expr -> expr * expr .)
    PRINT           reduce using rule 27 (expr -> expr * expr .)
    (               reduce using rule 27 (expr -> expr * expr .)
    ID              reduce using rule 27 (expr -> expr * expr .)
    FOR             reduce using rule 27 (expr -> expr * expr .)
    WHILE           reduce using rule 27 (expr -> expr * expr .)
    INTNUM          reduce using rule 27 (expr -> expr * expr .)
    FLOAT           reduce using rule 27 (expr -> expr * expr .)
    STRING          reduce using rule 27 (expr -> expr * expr .)
    ZEROS           reduce using rule 27 (expr -> expr * expr .)
    ONES            reduce using rule 27 (expr -> expr * expr .)
    EYE             reduce using rule 27 (expr -> expr * expr .)
    [               reduce using rule 27 (expr -> expr * expr .)
    IF              reduce using rule 27 (expr -> expr * expr .)

  ! +               [ shift and go to state 39 ]
  ! -               [ shift and go to state 40 ]
  ! *               [ shift and go to state 41 ]
  ! /               [ shift and go to state 42 ]
  ! DOTADD          [ shift and go to state 43 ]
  ! DOTSUB          [ shift and go to state 44 ]
  ! DOTMUL          [ shift and go to state 45 ]
  ! DOTDIV          [ shift and go to state 46 ]
  ! EQ              [ shift and go to state 47 ]
  ! GEQ             [ shift and go to state 48 ]
  ! LEQ             [ shift and go to state 49 ]
  ! NEQ             [ shift and go to state 50 ]
  ! <               [ shift and go to state 51 ]
  ! >               [ shift and go to state 52 ]
  ! '               [ shift and go to state 53 ]


state 80

    (28) expr -> expr / expr .
    (25) expr -> expr . + expr
    (26) expr -> expr . - expr
    (27) expr -> expr . * expr
    (28) expr -> expr . / expr
    (29) expr -> expr . DOTADD expr
    (30) expr -> expr . DOTSUB expr
    (31) expr -> expr . DOTMUL expr
    (32) expr -> expr . DOTDIV expr
    (33) expr -> expr . EQ expr
    (34) expr -> expr . GEQ expr
    (35) expr -> expr . LEQ expr
    (36) expr -> expr . NEQ expr
    (37) expr -> expr . < expr
    (38) expr -> expr . > expr
    (40) expr -> expr . '

    ;               reduce using rule 28 (expr -> expr / expr .)
    ,               reduce using rule 28 (expr -> expr / expr .)
    +               reduce using rule 28 (expr -> expr / expr .)
    -               reduce using rule 28 (expr -> expr / expr .)
    *               reduce using rule 28 (expr -> expr / expr .)
    /               reduce using rule 28 (expr -> expr / expr .)
    DOTADD          reduce using rule 28 (expr -> expr / expr .)
    DOTSUB          reduce using rule 28 (expr -> expr / expr .)
    DOTMUL          reduce using rule 28 (expr -> expr / expr .)
    DOTDIV          reduce using rule 28 (expr -> expr / expr .)
    EQ              reduce using rule 28 (expr -> expr / expr .)
    GEQ             reduce using rule 28 (expr -> expr / expr .)
    LEQ             reduce using rule 28 (expr -> expr / expr .)
    NEQ             reduce using rule 28 (expr -> expr / expr .)
    <               reduce using rule 28 (expr -> expr / expr .)
    >               reduce using rule 28 (expr -> expr / expr .)
    '               reduce using rule 28 (expr -> expr / expr .)
    )               reduce using rule 28 (expr -> expr / expr .)
    ]               reduce using rule 28 (expr -> expr / expr .)
    :               reduce using rule 28 (expr -> expr / expr .)
    {               reduce using rule 28 (expr -> expr / expr .)
    BREAK           reduce using rule 28 (expr -> expr / expr .)
    CONTINUE        reduce using rule 28 (expr -> expr / expr .)
    RETURN          reduce using rule 28 (expr -> expr / expr .)
    PRINT           reduce using rule 28 (expr -> expr / expr .)
    (               reduce using rule 28 (expr -> expr / expr .)
    ID              reduce using rule 28 (expr -> expr / expr .)
    FOR             reduce using rule 28 (expr -> expr / expr .)
    WHILE           reduce using rule 28 (expr -> expr / expr .)
    INTNUM          reduce using rule 28 (expr -> expr / expr .)
    FLOAT           reduce using rule 28 (expr -> expr / expr .)
    STRING          reduce using rule 28 (expr -> expr / expr .)
    ZEROS           reduce using rule 28 (expr -> expr / expr .)
    ONES            reduce using rule 28 (expr -> expr / expr .)
    EYE             reduce using rule 28 (expr -> expr / expr .)
    [               reduce using rule 28 (expr -> expr / expr .)
    IF              reduce using rule 28 (expr -> expr / expr .)

  ! +               [ shift and go to state 39 ]
  ! -               [ shift and go to state 40 ]
  ! *               [ shift and go to state 41 ]
  ! /               [ shift and go to state 42 ]
  ! DOTADD          [ shift and go to state 43 ]
  ! DOTSUB          [ shift and go to state 44 ]
  ! DOTMUL          [ shift and go to state 45 ]
  ! DOTDIV          [ shift and go to state 46 ]
  ! EQ              [ shift and go to state 47 ]
  ! GEQ             [ shift and go to state 48 ]
  ! LEQ             [ shift and go to state 49 ]
  ! NEQ             [ shift and go to state 50 ]
  ! <               [ shift and go to state 51 ]
  ! >               [ shift and go to state 52 ]
  ! '               [ shift and go to state 53 ]


state 81

    (29) expr -> expr DOTADD expr .
    (25) expr -> expr . + expr
    (26) expr -> expr . - expr
    (27) expr -> expr . * expr
    (28) expr -> expr . / expr
    (29) expr -> expr . DOTADD expr
    (30) expr -> expr . DOTSUB expr
    (31) expr -> expr . DOTMUL expr
    (32) expr -> expr . DOTDIV expr
    (33) expr -> expr . EQ expr
    (34) expr -> expr . GEQ expr
    (35) expr -> expr . LEQ expr
    (36) expr -> expr . NEQ expr
    (37) expr -> expr . < expr
    (38) expr -> expr . > expr
    (40) expr -> expr . '

    ;               reduce using rule 29 (expr -> expr DOTADD expr .)
    ,               reduce using rule 29 (expr -> expr DOTADD expr .)
    +               reduce using rule 29 (expr -> expr DOTADD expr .)
    -               reduce using rule 29 (expr -> expr DOTADD expr .)
    DOTADD          reduce using rule 29 (expr -> expr DOTADD expr .)
    DOTSUB          reduce using rule 29 (expr -> expr DOTADD expr .)
    EQ              reduce using rule 29 (expr -> expr DOTADD expr .)
    GEQ             reduce using rule 29 (expr -> expr DOTADD expr .)
    LEQ             reduce using rule 29 (expr -> expr DOTADD expr .)
    NEQ             reduce using rule 29 (expr -> expr DOTADD expr .)
    <               reduce using rule 29 (expr -> expr DOTADD expr .)
    >               reduce using rule 29 (expr -> expr DOTADD expr .)
    '               reduce using rule 29 (expr -> expr DOTADD expr .)
    )               reduce using rule 29 (expr -> expr DOTADD expr .)
    ]               reduce using rule 29 (expr -> expr DOTADD expr .)
    :               reduce using rule 29 (expr -> expr DOTADD expr .)
    {               reduce using rule 29 (expr -> expr DOTADD expr .)
    BREAK           reduce using rule 29 (expr -> expr DOTADD expr .)
    CONTINUE        reduce using rule 29 (expr -> expr DOTADD expr .)
    RETURN          reduce using rule 29 (expr -> expr DOTADD expr .)
    PRINT           reduce using rule 29 (expr -> expr DOTADD expr .)
    (               reduce using rule 29 (expr -> expr DOTADD expr .)
    ID              reduce using rule 29 (expr -> expr DOTADD expr .)
    FOR             reduce using rule 29 (expr -> expr DOTADD expr .)
    WHILE           reduce using rule 29 (expr -> expr DOTADD expr .)
    INTNUM          reduce using rule 29 (expr -> expr DOTADD expr .)
    FLOAT           reduce using rule 29 (expr -> expr DOTADD expr .)
    STRING          reduce using rule 29 (expr -> expr DOTADD expr .)
    ZEROS           reduce using rule 29 (expr -> expr DOTADD expr .)
    ONES            reduce using rule 29 (expr -> expr DOTADD expr .)
    EYE             reduce using rule 29 (expr -> expr DOTADD expr .)
    [               reduce using rule 29 (expr -> expr DOTADD expr .)
    IF              reduce using rule 29 (expr -> expr DOTADD expr .)
    *               shift and go to state 41
    /               shift and go to state 42
    DOTMUL          shift and go to state 45
    DOTDIV          shift and go to state 46

  ! *               [ reduce using rule 29 (expr -> expr DOTADD expr .) ]
  ! /               [ reduce using rule 29 (expr -> expr DOTADD expr .) ]
  ! DOTMUL          [ reduce using rule 29 (expr -> expr DOTADD expr .) ]
  ! DOTDIV          [ reduce using rule 29 (expr -> expr DOTADD expr .) ]
  ! +               [ shift and go to state 39 ]
  ! -               [ shift and go to state 40 ]
  ! DOTADD          [ shift and go to state 43 ]
  ! DOTSUB          [ shift and go to state 44 ]
  ! EQ              [ shift and go to state 47 ]
  ! GEQ             [ shift and go to state 48 ]
  ! LEQ             [ shift and go to state 49 ]
  ! NEQ             [ shift and go to state 50 ]
  ! <               [ shift and go to state 51 ]
  ! >               [ shift and go to state 52 ]
  ! '               [ shift and go to state 53 ]


state 82

    (30) expr -> expr DOTSUB expr .
    (25) expr -> expr . + expr
    (26) expr -> expr . - expr
    (27) expr -> expr . * expr
    (28) expr -> expr . / expr
    (29) expr -> expr . DOTADD expr
    (30) expr -> expr . DOTSUB expr
    (31) expr -> expr . DOTMUL expr
    (32) expr -> expr . DOTDIV expr
    (33) expr -> expr . EQ expr
    (34) expr -> expr . GEQ expr
    (35) expr -> expr . LEQ expr
    (36) expr -> expr . NEQ expr
    (37) expr -> expr . < expr
    (38) expr -> expr . > expr
    (40) expr -> expr . '

    ;               reduce using rule 30 (expr -> expr DOTSUB expr .)
    ,               reduce using rule 30 (expr -> expr DOTSUB expr .)
    +               reduce using rule 30 (expr -> expr DOTSUB expr .)
    -               reduce using rule 30 (expr -> expr DOTSUB expr .)
    DOTADD          reduce using rule 30 (expr -> expr DOTSUB expr .)
    DOTSUB          reduce using rule 30 (expr -> expr DOTSUB expr .)
    EQ              reduce using rule 30 (expr -> expr DOTSUB expr .)
    GEQ             reduce using rule 30 (expr -> expr DOTSUB expr .)
    LEQ             reduce using rule 30 (expr -> expr DOTSUB expr .)
    NEQ             reduce using rule 30 (expr -> expr DOTSUB expr .)
    <               reduce using rule 30 (expr -> expr DOTSUB expr .)
    >               reduce using rule 30 (expr -> expr DOTSUB expr .)
    '               reduce using rule 30 (expr -> expr DOTSUB expr .)
    )               reduce using rule 30 (expr -> expr DOTSUB expr .)
    ]               reduce using rule 30 (expr -> expr DOTSUB expr .)
    :               reduce using rule 30 (expr -> expr DOTSUB expr .)
    {               reduce using rule 30 (expr -> expr DOTSUB expr .)
    BREAK           reduce using rule 30 (expr -> expr DOTSUB expr .)
    CONTINUE        reduce using rule 30 (expr -> expr DOTSUB expr .)
    RETURN          reduce using rule 30 (expr -> expr DOTSUB expr .)
    PRINT           reduce using rule 30 (expr -> expr DOTSUB expr .)
    (               reduce using rule 30 (expr -> expr DOTSUB expr .)
    ID              reduce using rule 30 (expr -> expr DOTSUB expr .)
    FOR             reduce using rule 30 (expr -> expr DOTSUB expr .)
    WHILE           reduce using rule 30 (expr -> expr DOTSUB expr .)
    INTNUM          reduce using rule 30 (expr -> expr DOTSUB expr .)
    FLOAT           reduce using rule 30 (expr -> expr DOTSUB expr .)
    STRING          reduce using rule 30 (expr -> expr DOTSUB expr .)
    ZEROS           reduce using rule 30 (expr -> expr DOTSUB expr .)
    ONES            reduce using rule 30 (expr -> expr DOTSUB expr .)
    EYE             reduce using rule 30 (expr -> expr DOTSUB expr .)
    [               reduce using rule 30 (expr -> expr DOTSUB expr .)
    IF              reduce using rule 30 (expr -> expr DOTSUB expr .)
    *               shift and go to state 41
    /               shift and go to state 42
    DOTMUL          shift and go to state 45
    DOTDIV          shift and go to state 46

  ! *               [ reduce using rule 30 (expr -> expr DOTSUB expr .) ]
  ! /               [ reduce using rule 30 (expr -> expr DOTSUB expr .) ]
  ! DOTMUL          [ reduce using rule 30 (expr -> expr DOTSUB expr .) ]
  ! DOTDIV          [ reduce using rule 30 (expr -> expr DOTSUB expr .) ]
  ! +               [ shift and go to state 39 ]
  ! -               [ shift and go to state 40 ]
  ! DOTADD          [ shift and go to state 43 ]
  ! DOTSUB          [ shift and go to state 44 ]
  ! EQ              [ shift and go to state 47 ]
  ! GEQ             [ shift and go to state 48 ]
  ! LEQ             [ shift and go to state 49 ]
  ! NEQ             [ shift and go to state 50 ]
  ! <               [ shift and go to state 51 ]
  ! >               [ shift and go to state 52 ]
  ! '               [ shift and go to state 53 ]


state 83

    (31) expr -> expr DOTMUL expr .
    (25) expr -> expr . + expr
    (26) expr -> expr . - expr
    (27) expr -> expr . * expr
    (28) expr -> expr . / expr
    (29) expr -> expr . DOTADD expr
    (30) expr -> expr . DOTSUB expr
    (31) expr -> expr . DOTMUL expr
    (32) expr -> expr . DOTDIV expr
    (33) expr -> expr . EQ expr
    (34) expr -> expr . GEQ expr
    (35) expr -> expr . LEQ expr
    (36) expr -> expr . NEQ expr
    (37) expr -> expr . < expr
    (38) expr -> expr . > expr
    (40) expr -> expr . '

    ;               reduce using rule 31 (expr -> expr DOTMUL expr .)
    ,               reduce using rule 31 (expr -> expr DOTMUL expr .)
    +               reduce using rule 31 (expr -> expr DOTMUL expr .)
    -               reduce using rule 31 (expr -> expr DOTMUL expr .)
    *               reduce using rule 31 (expr -> expr DOTMUL expr .)
    /               reduce using rule 31 (expr -> expr DOTMUL expr .)
    DOTADD          reduce using rule 31 (expr -> expr DOTMUL expr .)
    DOTSUB          reduce using rule 31 (expr -> expr DOTMUL expr .)
    DOTMUL          reduce using rule 31 (expr -> expr DOTMUL expr .)
    DOTDIV          reduce using rule 31 (expr -> expr DOTMUL expr .)
    EQ              reduce using rule 31 (expr -> expr DOTMUL expr .)
    GEQ             reduce using rule 31 (expr -> expr DOTMUL expr .)
    LEQ             reduce using rule 31 (expr -> expr DOTMUL expr .)
    NEQ             reduce using rule 31 (expr -> expr DOTMUL expr .)
    <               reduce using rule 31 (expr -> expr DOTMUL expr .)
    >               reduce using rule 31 (expr -> expr DOTMUL expr .)
    '               reduce using rule 31 (expr -> expr DOTMUL expr .)
    )               reduce using rule 31 (expr -> expr DOTMUL expr .)
    ]               reduce using rule 31 (expr -> expr DOTMUL expr .)
    :               reduce using rule 31 (expr -> expr DOTMUL expr .)
    {               reduce using rule 31 (expr -> expr DOTMUL expr .)
    BREAK           reduce using rule 31 (expr -> expr DOTMUL expr .)
    CONTINUE        reduce using rule 31 (expr -> expr DOTMUL expr .)
    RETURN          reduce using rule 31 (expr -> expr DOTMUL expr .)
    PRINT           reduce using rule 31 (expr -> expr DOTMUL expr .)
    (               reduce using rule 31 (expr -> expr DOTMUL expr .)
    ID              reduce using rule 31 (expr -> expr DOTMUL expr .)
    FOR             reduce using rule 31 (expr -> expr DOTMUL expr .)
    WHILE           reduce using rule 31 (expr -> expr DOTMUL expr .)
    INTNUM          reduce using rule 31 (expr -> expr DOTMUL expr .)
    FLOAT           reduce using rule 31 (expr -> expr DOTMUL expr .)
    STRING          reduce using rule 31 (expr -> expr DOTMUL expr .)
    ZEROS           reduce using rule 31 (expr -> expr DOTMUL expr .)
    ONES            reduce using rule 31 (expr -> expr DOTMUL expr .)
    EYE             reduce using rule 31 (expr -> expr DOTMUL expr .)
    [               reduce using rule 31 (expr -> expr DOTMUL expr .)
    IF              reduce using rule 31 (expr -> expr DOTMUL expr .)

  ! +               [ shift and go to state 39 ]
  ! -               [ shift and go to state 40 ]
  ! *               [ shift and go to state 41 ]
  ! /               [ shift and go to state 42 ]
  ! DOTADD          [ shift and go to state 43 ]
  ! DOTSUB          [ shift and go to state 44 ]
  ! DOTMUL          [ shift and go to state 45 ]
  ! DOTDIV          [ shift and go to state 46 ]
  ! EQ              [ shift and go to state 47 ]
  ! GEQ             [ shift and go to state 48 ]
  ! LEQ             [ shift and go to state 49 ]
  ! NEQ             [ shift and go to state 50 ]
  ! <               [ shift and go to state 51 ]
  ! >               [ shift and go to state 52 ]
  ! '               [ shift and go to state 53 ]


state 84

    (32) expr -> expr DOTDIV expr .
    (25) expr -> expr . + expr
    (26) expr -> expr . - expr
    (27) expr -> expr . * expr
    (28) expr -> expr . / expr
    (29) expr -> expr . DOTADD expr
    (30) expr -> expr . DOTSUB expr
    (31) expr -> expr . DOTMUL expr
    (32) expr -> expr . DOTDIV expr
    (33) expr -> expr . EQ expr
    (34) expr -> expr . GEQ expr
    (35) expr -> expr . LEQ expr
    (36) expr -> expr . NEQ expr
    (37) expr -> expr . < expr
    (38) expr -> expr . > expr
    (40) expr -> expr . '

    ;               reduce using rule 32 (expr -> expr DOTDIV expr .)
    ,               reduce using rule 32 (expr -> expr DOTDIV expr .)
    +               reduce using rule 32 (expr -> expr DOTDIV expr .)
    -               reduce using rule 32 (expr -> expr DOTDIV expr .)
    *               reduce using rule 32 (expr -> expr DOTDIV expr .)
    /               reduce using rule 32 (expr -> expr DOTDIV expr .)
    DOTADD          reduce using rule 32 (expr -> expr DOTDIV expr .)
    DOTSUB          reduce using rule 32 (expr -> expr DOTDIV expr .)
    DOTMUL          reduce using rule 32 (expr -> expr DOTDIV expr .)
    DOTDIV          reduce using rule 32 (expr -> expr DOTDIV expr .)
    EQ              reduce using rule 32 (expr -> expr DOTDIV expr .)
    GEQ             reduce using rule 32 (expr -> expr DOTDIV expr .)
    LEQ             reduce using rule 32 (expr -> expr DOTDIV expr .)
    NEQ             reduce using rule 32 (expr -> expr DOTDIV expr .)
    <               reduce using rule 32 (expr -> expr DOTDIV expr .)
    >               reduce using rule 32 (expr -> expr DOTDIV expr .)
    '               reduce using rule 32 (expr -> expr DOTDIV expr .)
    )               reduce using rule 32 (expr -> expr DOTDIV expr .)
    ]               reduce using rule 32 (expr -> expr DOTDIV expr .)
    :               reduce using rule 32 (expr -> expr DOTDIV expr .)
    {               reduce using rule 32 (expr -> expr DOTDIV expr .)
    BREAK           reduce using rule 32 (expr -> expr DOTDIV expr .)
    CONTINUE        reduce using rule 32 (expr -> expr DOTDIV expr .)
    RETURN          reduce using rule 32 (expr -> expr DOTDIV expr .)
    PRINT           reduce using rule 32 (expr -> expr DOTDIV expr .)
    (               reduce using rule 32 (expr -> expr DOTDIV expr .)
    ID              reduce using rule 32 (expr -> expr DOTDIV expr .)
    FOR             reduce using rule 32 (expr -> expr DOTDIV expr .)
    WHILE           reduce using rule 32 (expr -> expr DOTDIV expr .)
    INTNUM          reduce using rule 32 (expr -> expr DOTDIV expr .)
    FLOAT           reduce using rule 32 (expr -> expr DOTDIV expr .)
    STRING          reduce using rule 32 (expr -> expr DOTDIV expr .)
    ZEROS           reduce using rule 32 (expr -> expr DOTDIV expr .)
    ONES            reduce using rule 32 (expr -> expr DOTDIV expr .)
    EYE             reduce using rule 32 (expr -> expr DOTDIV expr .)
    [               reduce using rule 32 (expr -> expr DOTDIV expr .)
    IF              reduce using rule 32 (expr -> expr DOTDIV expr .)

  ! +               [ shift and go to state 39 ]
  ! -               [ shift and go to state 40 ]
  ! *               [ shift and go to state 41 ]
  ! /               [ shift and go to state 42 ]
  ! DOTADD          [ shift and go to state 43 ]
  ! DOTSUB          [ shift and go to state 44 ]
  ! DOTMUL          [ shift and go to state 45 ]
  ! DOTDIV          [ shift and go to state 46 ]
  ! EQ              [ shift and go to state 47 ]
  ! GEQ             [ shift and go to state 48 ]
  ! LEQ             [ shift and go to state 49 ]
  ! NEQ             [ shift and go to state 50 ]
  ! <               [ shift and go to state 51 ]
  ! >               [ shift and go to state 52 ]
  ! '               [ shift and go to state 53 ]


state 85

    (33) expr -> expr EQ expr .
    (25) expr -> expr . + expr
    (26) expr -> expr . - expr
    (27) expr -> expr . * expr
    (28) expr -> expr . / expr
    (29) expr -> expr . DOTADD expr
    (30) expr -> expr . DOTSUB expr
    (31) expr -> expr . DOTMUL expr
    (32) expr -> expr . DOTDIV expr
    (33) expr -> expr . EQ expr
    (34) expr -> expr . GEQ expr
    (35) expr -> expr . LEQ expr
    (36) expr -> expr . NEQ expr
    (37) expr -> expr . < expr
    (38) expr -> expr . > expr
    (40) expr -> expr . '

    ;               reduce using rule 33 (expr -> expr EQ expr .)
    ,               reduce using rule 33 (expr -> expr EQ expr .)
    EQ              reduce using rule 33 (expr -> expr EQ expr .)
    NEQ             reduce using rule 33 (expr -> expr EQ expr .)
    '               reduce using rule 33 (expr -> expr EQ expr .)
    )               reduce using rule 33 (expr -> expr EQ expr .)
    ]               reduce using rule 33 (expr -> expr EQ expr .)
    :               reduce using rule 33 (expr -> expr EQ expr .)
    {               reduce using rule 33 (expr -> expr EQ expr .)
    BREAK           reduce using rule 33 (expr -> expr EQ expr .)
    CONTINUE        reduce using rule 33 (expr -> expr EQ expr .)
    RETURN          reduce using rule 33 (expr -> expr EQ expr .)
    PRINT           reduce using rule 33 (expr -> expr EQ expr .)
    (               reduce using rule 33 (expr -> expr EQ expr .)
    ID              reduce using rule 33 (expr -> expr EQ expr .)
    FOR             reduce using rule 33 (expr -> expr EQ expr .)
    WHILE           reduce using rule 33 (expr -> expr EQ expr .)
    INTNUM          reduce using rule 33 (expr -> expr EQ expr .)
    FLOAT           reduce using rule 33 (expr -> expr EQ expr .)
    STRING          reduce using rule 33 (expr -> expr EQ expr .)
    ZEROS           reduce using rule 33 (expr -> expr EQ expr .)
    ONES            reduce using rule 33 (expr -> expr EQ expr .)
    EYE             reduce using rule 33 (expr -> expr EQ expr .)
    [               reduce using rule 33 (expr -> expr EQ expr .)
    IF              reduce using rule 33 (expr -> expr EQ expr .)
    +               shift and go to state 39
    -               shift and go to state 40
    *               shift and go to state 41
    /               shift and go to state 42
    DOTADD          shift and go to state 43
    DOTSUB          shift and go to state 44
    DOTMUL          shift and go to state 45
    DOTDIV          shift and go to state 46
    GEQ             shift and go to state 48
    LEQ             shift and go to state 49
    <               shift and go to state 51
    >               shift and go to state 52

  ! +               [ reduce using rule 33 (expr -> expr EQ expr .) ]
  ! -               [ reduce using rule 33 (expr -> expr EQ expr .) ]
  ! *               [ reduce using rule 33 (expr -> expr EQ expr .) ]
  ! /               [ reduce using rule 33 (expr -> expr EQ expr .) ]
  ! DOTADD          [ reduce using rule 33 (expr -> expr EQ expr .) ]
  ! DOTSUB          [ reduce using rule 33 (expr -> expr EQ expr .) ]
  ! DOTMUL          [ reduce using rule 33 (expr -> expr EQ expr .) ]
  ! DOTDIV          [ reduce using rule 33 (expr -> expr EQ expr .) ]
  ! GEQ             [ reduce using rule 33 (expr -> expr EQ expr .) ]
  ! LEQ             [ reduce using rule 33 (expr -> expr EQ expr .) ]
  ! <               [ reduce using rule 33 (expr -> expr EQ expr .) ]
  ! >               [ reduce using rule 33 (expr -> expr EQ expr .) ]
  ! EQ              [ shift and go to state 47 ]
  ! NEQ             [ shift and go to state 50 ]
  ! '               [ shift and go to state 53 ]


state 86

    (34) expr -> expr GEQ expr .
    (25) expr -> expr . + expr
    (26) expr -> expr . - expr
    (27) expr -> expr . * expr
    (28) expr -> expr . / expr
    (29) expr -> expr . DOTADD expr
    (30) expr -> expr . DOTSUB expr
    (31) expr -> expr . DOTMUL expr
    (32) expr -> expr . DOTDIV expr
    (33) expr -> expr . EQ expr
    (34) expr -> expr . GEQ expr
    (35) expr -> expr . LEQ expr
    (36) expr -> expr . NEQ expr
    (37) expr -> expr . < expr
    (38) expr -> expr . > expr
    (40) expr -> expr . '

    ;               reduce using rule 34 (expr -> expr GEQ expr .)
    ,               reduce using rule 34 (expr -> expr GEQ expr .)
    EQ              reduce using rule 34 (expr -> expr GEQ expr .)
    GEQ             reduce using rule 34 (expr -> expr GEQ expr .)
    LEQ             reduce using rule 34 (expr -> expr GEQ expr .)
    NEQ             reduce using rule 34 (expr -> expr GEQ expr .)
    <               reduce using rule 34 (expr -> expr GEQ expr .)
    >               reduce using rule 34 (expr -> expr GEQ expr .)
    '               reduce using rule 34 (expr -> expr GEQ expr .)
    )               reduce using rule 34 (expr -> expr GEQ expr .)
    ]               reduce using rule 34 (expr -> expr GEQ expr .)
    :               reduce using rule 34 (expr -> expr GEQ expr .)
    {               reduce using rule 34 (expr -> expr GEQ expr .)
    BREAK           reduce using rule 34 (expr -> expr GEQ expr .)
    CONTINUE        reduce using rule 34 (expr -> expr GEQ expr .)
    RETURN          reduce using rule 34 (expr -> expr GEQ expr .)
    PRINT           reduce using rule 34 (expr -> expr GEQ expr .)
    (               reduce using rule 34 (expr -> expr GEQ expr .)
    ID              reduce using rule 34 (expr -> expr GEQ expr .)
    FOR             reduce using rule 34 (expr -> expr GEQ expr .)
    WHILE           reduce using rule 34 (expr -> expr GEQ expr .)
    INTNUM          reduce using rule 34 (expr -> expr GEQ expr .)
    FLOAT           reduce using rule 34 (expr -> expr GEQ expr .)
    STRING          reduce using rule 34 (expr -> expr GEQ expr .)
    ZEROS           reduce using rule 34 (expr -> expr GEQ expr .)
    ONES            reduce using rule 34 (expr -> expr GEQ expr .)
    EYE             reduce using rule 34 (expr -> expr GEQ expr .)
    [               reduce using rule 34 (expr -> expr GEQ expr .)
    IF              reduce using rule 34 (expr -> expr GEQ expr .)
    +               shift and go to state 39
    -               shift and go to state 40
    *               shift and go to state 41
    /               shift and go to state 42
    DOTADD          shift and go to state 43
    DOTSUB          shift and go to state 44
    DOTMUL          shift and go to state 45
    DOTDIV          shift and go to state 46

  ! +               [ reduce using rule 34 (expr -> expr GEQ expr .) ]
  ! -               [ reduce using rule 34 (expr -> expr GEQ expr .) ]
  ! *               [ reduce using rule 34 (expr -> expr GEQ expr .) ]
  ! /               [ reduce using rule 34 (expr -> expr GEQ expr .) ]
  ! DOTADD          [ reduce using rule 34 (expr -> expr GEQ expr .) ]
  ! DOTSUB          [ reduce using rule 34 (expr -> expr GEQ expr .) ]
  ! DOTMUL          [ reduce using rule 34 (expr -> expr GEQ expr .) ]
  ! DOTDIV          [ reduce using rule 34 (expr -> expr GEQ expr .) ]
  ! EQ              [ shift and go to state 47 ]
  ! GEQ             [ shift and go to state 48 ]
  ! LEQ             [ shift and go to state 49 ]
  ! NEQ             [ shift and go to state 50 ]
  ! <               [ shift and go to state 51 ]
  ! >               [ shift and go to state 52 ]
  ! '               [ shift and go to state 53 ]


state 87

    (35) expr -> expr LEQ expr .
    (25) expr -> expr . + expr
    (26) expr -> expr . - expr
    (27) expr -> expr . * expr
    (28) expr -> expr . / expr
    (29) expr -> expr . DOTADD expr
    (30) expr -> expr . DOTSUB expr
    (31) expr -> expr . DOTMUL expr
    (32) expr -> expr . DOTDIV expr
    (33) expr -> expr . EQ expr
    (34) expr -> expr . GEQ expr
    (35) expr -> expr . LEQ expr
    (36) expr -> expr . NEQ expr
    (37) expr -> expr . < expr
    (38) expr -> expr . > expr
    (40) expr -> expr . '

    ;               reduce using rule 35 (expr -> expr LEQ expr .)
    ,               reduce using rule 35 (expr -> expr LEQ expr .)
    EQ              reduce using rule 35 (expr -> expr LEQ expr .)
    GEQ             reduce using rule 35 (expr -> expr LEQ expr .)
    LEQ             reduce using rule 35 (expr -> expr LEQ expr .)
    NEQ             reduce using rule 35 (expr -> expr LEQ expr .)
    <               reduce using rule 35 (expr -> expr LEQ expr .)
    >               reduce using rule 35 (expr -> expr LEQ expr .)
    '               reduce using rule 35 (expr -> expr LEQ expr .)
    )               reduce using rule 35 (expr -> expr LEQ expr .)
    ]               reduce using rule 35 (expr -> expr LEQ expr .)
    :               reduce using rule 35 (expr -> expr LEQ expr .)
    {               reduce using rule 35 (expr -> expr LEQ expr .)
    BREAK           reduce using rule 35 (expr -> expr LEQ expr .)
    CONTINUE        reduce using rule 35 (expr -> expr LEQ expr .)
    RETURN          reduce using rule 35 (expr -> expr LEQ expr .)
    PRINT           reduce using rule 35 (expr -> expr LEQ expr .)
    (               reduce using rule 35 (expr -> expr LEQ expr .)
    ID              reduce using rule 35 (expr -> expr LEQ expr .)
    FOR             reduce using rule 35 (expr -> expr LEQ expr .)
    WHILE           reduce using rule 35 (expr -> expr LEQ expr .)
    INTNUM          reduce using rule 35 (expr -> expr LEQ expr .)
    FLOAT           reduce using rule 35 (expr -> expr LEQ expr .)
    STRING          reduce using rule 35 (expr -> expr LEQ expr .)
    ZEROS           reduce using rule 35 (expr -> expr LEQ expr .)
    ONES            reduce using rule 35 (expr -> expr LEQ expr .)
    EYE             reduce using rule 35 (expr -> expr LEQ expr .)
    [               reduce using rule 35 (expr -> expr LEQ expr .)
    IF              reduce using rule 35 (expr -> expr LEQ expr .)
    +               shift and go to state 39
    -               shift and go to state 40
    *               shift and go to state 41
    /               shift and go to state 42
    DOTADD          shift and go to state 43
    DOTSUB          shift and go to state 44
    DOTMUL          shift and go to state 45
    DOTDIV          shift and go to state 46

  ! +               [ reduce using rule 35 (expr -> expr LEQ expr .) ]
  ! -               [ reduce using rule 35 (expr -> expr LEQ expr .) ]
  ! *               [ reduce using rule 35 (expr -> expr LEQ expr .) ]
  ! /               [ reduce using rule 35 (expr -> expr LEQ expr .) ]
  ! DOTADD          [ reduce using rule 35 (expr -> expr LEQ expr .) ]
  ! DOTSUB          [ reduce using rule 35 (expr -> expr LEQ expr .) ]
  ! DOTMUL          [ reduce using rule 35 (expr -> expr LEQ expr .) ]
  ! DOTDIV          [ reduce using rule 35 (expr -> expr LEQ expr .) ]
  ! EQ              [ shift and go to state 47 ]
  ! GEQ             [ shift and go to state 48 ]
  ! LEQ             [ shift and go to state 49 ]
  ! NEQ             [ shift and go to state 50 ]
  ! <               [ shift and go to state 51 ]
  ! >               [ shift and go to state 52 ]
  ! '               [ shift and go to state 53 ]


state 88

    (36) expr -> expr NEQ expr .
    (25) expr -> expr . + expr
    (26) expr -> expr . - expr
    (27) expr -> expr . * expr
    (28) expr -> expr . / expr
    (29) expr -> expr . DOTADD expr
    (30) expr -> expr . DOTSUB expr
    (31) expr -> expr . DOTMUL expr
    (32) expr -> expr . DOTDIV expr
    (33) expr -> expr . EQ expr
    (34) expr -> expr . GEQ expr
    (35) expr -> expr . LEQ expr
    (36) expr -> expr . NEQ expr
    (37) expr -> expr . < expr
    (38) expr -> expr . > expr
    (40) expr -> expr . '

    ;               reduce using rule 36 (expr -> expr NEQ expr .)
    ,               reduce using rule 36 (expr -> expr NEQ expr .)
    EQ              reduce using rule 36 (expr -> expr NEQ expr .)
    NEQ             reduce using rule 36 (expr -> expr NEQ expr .)
    '               reduce using rule 36 (expr -> expr NEQ expr .)
    )               reduce using rule 36 (expr -> expr NEQ expr .)
    ]               reduce using rule 36 (expr -> expr NEQ expr .)
    :               reduce using rule 36 (expr -> expr NEQ expr .)
    {               reduce using rule 36 (expr -> expr NEQ expr .)
    BREAK           reduce using rule 36 (expr -> expr NEQ expr .)
    CONTINUE        reduce using rule 36 (expr -> expr NEQ expr .)
    RETURN          reduce using rule 36 (expr -> expr NEQ expr .)
    PRINT           reduce using rule 36 (expr -> expr NEQ expr .)
    (               reduce using rule 36 (expr -> expr NEQ expr .)
    ID              reduce using rule 36 (expr -> expr NEQ expr .)
    FOR             reduce using rule 36 (expr -> expr NEQ expr .)
    WHILE           reduce using rule 36 (expr -> expr NEQ expr .)
    INTNUM          reduce using rule 36 (expr -> expr NEQ expr .)
    FLOAT           reduce using rule 36 (expr -> expr NEQ expr .)
    STRING          reduce using rule 36 (expr -> expr NEQ expr .)
    ZEROS           reduce using rule 36 (expr -> expr NEQ expr .)
    ONES            reduce using rule 36 (expr -> expr NEQ expr .)
    EYE             reduce using rule 36 (expr -> expr NEQ expr .)
    [               reduce using rule 36 (expr -> expr NEQ expr .)
    IF              reduce using rule 36 (expr -> expr NEQ expr .)
    +               shift and go to state 39
    -               shift and go to state 40
    *               shift and go to state 41
    /               shift and go to state 42
    DOTADD          shift and go to state 43
    DOTSUB          shift and go to state 44
    DOTMUL          shift and go to state 45
    DOTDIV          shift and go to state 46
    GEQ             shift and go to state 48
    LEQ             shift and go to state 49
    <               shift and go to state 51
    >               shift and go to state 52

  ! +               [ reduce using rule 36 (expr -> expr NEQ expr .) ]
  ! -               [ reduce using rule 36 (expr -> expr NEQ expr .) ]
  ! *               [ reduce using rule 36 (expr -> expr NEQ expr .) ]
  ! /               [ reduce using rule 36 (expr -> expr NEQ expr .) ]
  ! DOTADD          [ reduce using rule 36 (expr -> expr NEQ expr .) ]
  ! DOTSUB          [ reduce using rule 36 (expr -> expr NEQ expr .) ]
  ! DOTMUL          [ reduce using rule 36 (expr -> expr NEQ expr .) ]
  ! DOTDIV          [ reduce using rule 36 (expr -> expr NEQ expr .) ]
  ! GEQ             [ reduce using rule 36 (expr -> expr NEQ expr .) ]
  ! LEQ             [ reduce using rule 36 (expr -> expr NEQ expr .) ]
  ! <               [ reduce using rule 36 (expr -> expr NEQ expr .) ]
  ! >               [ reduce using rule 36 (expr -> expr NEQ expr .) ]
  ! EQ              [ shift and go to state 47 ]
  ! NEQ             [ shift and go to state 50 ]
  ! '               [ shift and go to state 53 ]


state 89

    (37) expr -> expr < expr .
    (25) expr -> expr . + expr
    (26) expr -> expr . - expr
    (27) expr -> expr . * expr
    (28) expr -> expr . / expr
    (29) expr -> expr . DOTADD expr
    (30) expr -> expr . DOTSUB expr
    (31) expr -> expr . DOTMUL expr
    (32) expr -> expr . DOTDIV expr
    (33) expr -> expr . EQ expr
    (34) expr -> expr . GEQ expr
    (35) expr -> expr . LEQ expr
    (36) expr -> expr . NEQ expr
    (37) expr -> expr . < expr
    (38) expr -> expr . > expr
    (40) expr -> expr . '

    ;               reduce using rule 37 (expr -> expr < expr .)
    ,               reduce using rule 37 (expr -> expr < expr .)
    EQ              reduce using rule 37 (expr -> expr < expr .)
    GEQ             reduce using rule 37 (expr -> expr < expr .)
    LEQ             reduce using rule 37 (expr -> expr < expr .)
    NEQ             reduce using rule 37 (expr -> expr < expr .)
    <               reduce using rule 37 (expr -> expr < expr .)
    >               reduce using rule 37 (expr -> expr < expr .)
    '               reduce using rule 37 (expr -> expr < expr .)
    )               reduce using rule 37 (expr -> expr < expr .)
    ]               reduce using rule 37 (expr -> expr < expr .)
    :               reduce using rule 37 (expr -> expr < expr .)
    {               reduce using rule 37 (expr -> expr < expr .)
    BREAK           reduce using rule 37 (expr -> expr < expr .)
    CONTINUE        reduce using rule 37 (expr -> expr < expr .)
    RETURN          reduce using rule 37 (expr -> expr < expr .)
    PRINT           reduce using rule 37 (expr -> expr < expr .)
    (               reduce using rule 37 (expr -> expr < expr .)
    ID              reduce using rule 37 (expr -> expr < expr .)
    FOR             reduce using rule 37 (expr -> expr < expr .)
    WHILE           reduce using rule 37 (expr -> expr < expr .)
    INTNUM          reduce using rule 37 (expr -> expr < expr .)
    FLOAT           reduce using rule 37 (expr -> expr < expr .)
    STRING          reduce using rule 37 (expr -> expr < expr .)
    ZEROS           reduce using rule 37 (expr -> expr < expr .)
    ONES            reduce using rule 37 (expr -> expr < expr .)
    EYE             reduce using rule 37 (expr -> expr < expr .)
    [               reduce using rule 37 (expr -> expr < expr .)
    IF              reduce using rule 37 (expr -> expr < expr .)
    +               shift and go to state 39
    -               shift and go to state 40
    *               shift and go to state 41
    /               shift and go to state 42
    DOTADD          shift and go to state 43
    DOTSUB          shift and go to state 44
    DOTMUL          shift and go to state 45
    DOTDIV          shift and go to state 46

  ! +               [ reduce using rule 37 (expr -> expr < expr .) ]
  ! -               [ reduce using rule 37 (expr -> expr < expr .) ]
  ! *               [ reduce using rule 37 (expr -> expr < expr .) ]
  ! /               [ reduce using rule 37 (expr -> expr < expr .) ]
  ! DOTADD          [ reduce using rule 37 (expr -> expr < expr .) ]
  ! DOTSUB          [ reduce using rule 37 (expr -> expr < expr .) ]
  ! DOTMUL          [ reduce using rule 37 (expr -> expr < expr .) ]
  ! DOTDIV          [ reduce using rule 37 (expr -> expr < expr .) ]
  ! EQ              [ shift and go to state 47 ]
  ! GEQ             [ shift and go to state 48 ]
  ! LEQ             [ shift and go to state 49 ]
  ! NEQ             [ shift and go to state 50 ]
  ! <               [ shift and go to state 51 ]
  ! >               [ shift and go to state 52 ]
  ! '               [ shift and go to state 53 ]


state 90

    (38) expr -> expr > expr .
    (25) expr -> expr . + expr
    (26) expr -> expr . - expr
    (27) expr -> expr . * expr
    (28) expr -> expr . / expr
    (29) expr -> expr . DOTADD expr
    (30) expr -> expr . DOTSUB expr
    (31) expr -> expr . DOTMUL expr
    (32) expr -> expr . DOTDIV expr
    (33) expr -> expr . EQ expr
    (34) expr -> expr . GEQ expr
    (35) expr -> expr . LEQ expr
    (36) expr -> expr . NEQ expr
    (37) expr -> expr . < expr
    (38) expr -> expr . > expr
    (40) expr -> expr . '

    ;               reduce using rule 38 (expr -> expr > expr .)
    ,               reduce using rule 38 (expr -> expr > expr .)
    EQ              reduce using rule 38 (expr -> expr > expr .)
    GEQ             reduce using rule 38 (expr -> expr > expr .)
    LEQ             reduce using rule 38 (expr -> expr > expr .)
    NEQ             reduce using rule 38 (expr -> expr > expr .)
    <               reduce using rule 38 (expr -> expr > expr .)
    >               reduce using rule 38 (expr -> expr > expr .)
    '               reduce using rule 38 (expr -> expr > expr .)
    )               reduce using rule 38 (expr -> expr > expr .)
    ]               reduce using rule 38 (expr -> expr > expr .)
    :               reduce using rule 38 (expr -> expr > expr .)
    {               reduce using rule 38 (expr -> expr > expr .)
    BREAK           reduce using rule 38 (expr -> expr > expr .)
    CONTINUE        reduce using rule 38 (expr -> expr > expr .)
    RETURN          reduce using rule 38 (expr -> expr > expr .)
    PRINT           reduce using rule 38 (expr -> expr > expr .)
    (               reduce using rule 38 (expr -> expr > expr .)
    ID              reduce using rule 38 (expr -> expr > expr .)
    FOR             reduce using rule 38 (expr -> expr > expr .)
    WHILE           reduce using rule 38 (expr -> expr > expr .)
    INTNUM          reduce using rule 38 (expr -> expr > expr .)
    FLOAT           reduce using rule 38 (expr -> expr > expr .)
    STRING          reduce using rule 38 (expr -> expr > expr .)
    ZEROS           reduce using rule 38 (expr -> expr > expr .)
    ONES            reduce using rule 38 (expr -> expr > expr .)
    EYE             reduce using rule 38 (expr -> expr > expr .)
    [               reduce using rule 38 (expr -> expr > expr .)
    IF              reduce using rule 38 (expr -> expr > expr .)
    +               shift and go to state 39
    -               shift and go to state 40
    *               shift and go to state 41
    /               shift and go to state 42
    DOTADD          shift and go to state 43
    DOTSUB          shift and go to state 44
    DOTMUL          shift and go to state 45
    DOTDIV          shift and go to state 46

  ! +               [ reduce using rule 38 (expr -> expr > expr .) ]
  ! -               [ reduce using rule 38 (expr -> expr > expr .) ]
  ! *               [ reduce using rule 38 (expr -> expr > expr .) ]
  ! /               [ reduce using rule 38 (expr -> expr > expr .) ]
  ! DOTADD          [ reduce using rule 38 (expr -> expr > expr .) ]
  ! DOTSUB          [ reduce using rule 38 (expr -> expr > expr .) ]
  ! DOTMUL          [ reduce using rule 38 (expr -> expr > expr .) ]
  ! DOTDIV          [ reduce using rule 38 (expr -> expr > expr .) ]
  ! EQ              [ shift and go to state 47 ]
  ! GEQ             [ shift and go to state 48 ]
  ! LEQ             [ shift and go to state 49 ]
  ! NEQ             [ shift and go to state 50 ]
  ! <               [ shift and go to state 51 ]
  ! >               [ shift and go to state 52 ]
  ! '               [ shift and go to state 53 ]


state 91

    (11) inst -> ids = expr .
    (25) expr -> expr . + expr
    (26) expr -> expr . - expr
    (27) expr -> expr . * expr
    (28) expr -> expr . / expr
    (29) expr -> expr . DOTADD expr
    (30) expr -> expr . DOTSUB expr
    (31) expr -> expr . DOTMUL expr
    (32) expr -> expr . DOTDIV expr
    (33) expr -> expr . EQ expr
    (34) expr -> expr . GEQ expr
    (35) expr -> expr . LEQ expr
    (36) expr -> expr . NEQ expr
    (37) expr -> expr . < expr
    (38) expr -> expr . > expr
    (40) expr -> expr . '

    ;               reduce using rule 11 (inst -> ids = expr .)
    ,               reduce using rule 11 (inst -> ids = expr .)
    +               shift and go to state 39
    -               shift and go to state 40
    *               shift and go to state 41
    /               shift and go to state 42
    DOTADD          shift and go to state 43
    DOTSUB          shift and go to state 44
    DOTMUL          shift and go to state 45
    DOTDIV          shift and go to state 46
    EQ              shift and go to state 47
    GEQ             shift and go to state 48
    LEQ             shift and go to state 49
    NEQ             shift and go to state 50
    <               shift and go to state 51
    >               shift and go to state 52
    '               shift and go to state 53


state 92

    (12) inst -> ids ADDASSIGN expr .
    (25) expr -> expr . + expr
    (26) expr -> expr . - expr
    (27) expr -> expr . * expr
    (28) expr -> expr . / expr
    (29) expr -> expr . DOTADD expr
    (30) expr -> expr . DOTSUB expr
    (31) expr -> expr . DOTMUL expr
    (32) expr -> expr . DOTDIV expr
    (33) expr -> expr . EQ expr
    (34) expr -> expr . GEQ expr
    (35) expr -> expr . LEQ expr
    (36) expr -> expr . NEQ expr
    (37) expr -> expr . < expr
    (38) expr -> expr . > expr
    (40) expr -> expr . '

    ;               reduce using rule 12 (inst -> ids ADDASSIGN expr .)
    ,               reduce using rule 12 (inst -> ids ADDASSIGN expr .)
    +               shift and go to state 39
    -               shift and go to state 40
    *               shift and go to state 41
    /               shift and go to state 42
    DOTADD          shift and go to state 43
    DOTSUB          shift and go to state 44
    DOTMUL          shift and go to state 45
    DOTDIV          shift and go to state 46
    EQ              shift and go to state 47
    GEQ             shift and go to state 48
    LEQ             shift and go to state 49
    NEQ             shift and go to state 50
    <               shift and go to state 51
    >               shift and go to state 52
    '               shift and go to state 53


state 93

    (13) inst -> ids SUBASSIGN expr .
    (25) expr -> expr . + expr
    (26) expr -> expr . - expr
    (27) expr -> expr . * expr
    (28) expr -> expr . / expr
    (29) expr -> expr . DOTADD expr
    (30) expr -> expr . DOTSUB expr
    (31) expr -> expr . DOTMUL expr
    (32) expr -> expr . DOTDIV expr
    (33) expr -> expr . EQ expr
    (34) expr -> expr . GEQ expr
    (35) expr -> expr . LEQ expr
    (36) expr -> expr . NEQ expr
    (37) expr -> expr . < expr
    (38) expr -> expr . > expr
    (40) expr -> expr . '

    ;               reduce using rule 13 (inst -> ids SUBASSIGN expr .)
    ,               reduce using rule 13 (inst -> ids SUBASSIGN expr .)
    +               shift and go to state 39
    -               shift and go to state 40
    *               shift and go to state 41
    /               shift and go to state 42
    DOTADD          shift and go to state 43
    DOTSUB          shift and go to state 44
    DOTMUL          shift and go to state 45
    DOTDIV          shift and go to state 46
    EQ              shift and go to state 47
    GEQ             shift and go to state 48
    LEQ             shift and go to state 49
    NEQ             shift and go to state 50
    <               shift and go to state 51
    >               shift and go to state 52
    '               shift and go to state 53


state 94

    (14) inst -> ids MULASSIGN expr .
    (25) expr -> expr . + expr
    (26) expr -> expr . - expr
    (27) expr -> expr . * expr
    (28) expr -> expr . / expr
    (29) expr -> expr . DOTADD expr
    (30) expr -> expr . DOTSUB expr
    (31) expr -> expr . DOTMUL expr
    (32) expr -> expr . DOTDIV expr
    (33) expr -> expr . EQ expr
    (34) expr -> expr . GEQ expr
    (35) expr -> expr . LEQ expr
    (36) expr -> expr . NEQ expr
    (37) expr -> expr . < expr
    (38) expr -> expr . > expr
    (40) expr -> expr . '

    ;               reduce using rule 14 (inst -> ids MULASSIGN expr .)
    ,               reduce using rule 14 (inst -> ids MULASSIGN expr .)
    +               shift and go to state 39
    -               shift and go to state 40
    *               shift and go to state 41
    /               shift and go to state 42
    DOTADD          shift and go to state 43
    DOTSUB          shift and go to state 44
    DOTMUL          shift and go to state 45
    DOTDIV          shift and go to state 46
    EQ              shift and go to state 47
    GEQ             shift and go to state 48
    LEQ             shift and go to state 49
    NEQ             shift and go to state 50
    <               shift and go to state 51
    >               shift and go to state 52
    '               shift and go to state 53


state 95

    (15) inst -> ids DIVASSIGN expr .
    (25) expr -> expr . + expr
    (26) expr -> expr . - expr
    (27) expr -> expr . * expr
    (28) expr -> expr . / expr
    (29) expr -> expr . DOTADD expr
    (30) expr -> expr . DOTSUB expr
    (31) expr -> expr . DOTMUL expr
    (32) expr -> expr . DOTDIV expr
    (33) expr -> expr . EQ expr
    (34) expr -> expr . GEQ expr
    (35) expr -> expr . LEQ expr
    (36) expr -> expr . NEQ expr
    (37) expr -> expr . < expr
    (38) expr -> expr . > expr
    (40) expr -> expr . '

    ;               reduce using rule 15 (inst -> ids DIVASSIGN expr .)
    ,               reduce using rule 15 (inst -> ids DIVASSIGN expr .)
    +               shift and go to state 39
    -               shift and go to state 40
    *               shift and go to state 41
    /               shift and go to state 42
    DOTADD          shift and go to state 43
    DOTSUB          shift and go to state 44
    DOTMUL          shift and go to state 45
    DOTDIV          shift and go to state 46
    EQ              shift and go to state 47
    GEQ             shift and go to state 48
    LEQ             shift and go to state 49
    NEQ             shift and go to state 50
    <               shift and go to state 51
    >               shift and go to state 52
    '               shift and go to state 53


state 96

    (58) values -> values , . expr
    (25) expr -> . expr + expr
    (26) expr -> . expr - expr
    (27) expr -> . expr * expr
    (28) expr -> . expr / expr
    (29) expr -> . expr DOTADD expr
    (30) expr -> . expr DOTSUB expr
    (31) expr -> . expr DOTMUL expr
    (32) expr -> . expr DOTDIV expr
    (33) expr -> . expr EQ expr
    (34) expr -> . expr GEQ expr
    (35) expr -> . expr LEQ expr
    (36) expr -> . expr NEQ expr
    (37) expr -> . expr < expr
    (38) expr -> . expr > expr
    (39) expr -> . ( expr )
    (40) expr -> . expr '
    (41) expr -> . - expr
    (42) expr -> . ids
    (43) expr -> . integer
    (44) expr -> . float
    (45) expr -> . string
    (46) expr -> . matrix
    (16) ids -> . ID
    (17) ids -> . ID [ values ]
    (47) integer -> . INTNUM
    (48) float -> . FLOAT
    (49) string -> . STRING
    (50) matrix -> . ZEROS ( values )
    (51) matrix -> . ONES ( values )
    (52) matrix -> . EYE ( values )
    (53) matrix -> . [ rows ]
    (54) matrix -> . [ rows ; ]

    (               shift and go to state 17
    -               shift and go to state 16
    ID              shift and go to state 22
    INTNUM          shift and go to state 27
    FLOAT           shift and go to state 28
    STRING          shift and go to state 29
    ZEROS           shift and go to state 30
    ONES            shift and go to state 31
    EYE             shift and go to state 32
    [               shift and go to state 23

    expr                           shift and go to state 111
    ids                            shift and go to state 61
    integer                        shift and go to state 18
    float                          shift and go to state 19
    string                         shift and go to state 20
    matrix                         shift and go to state 21

state 97

    (39) expr -> ( expr ) .

    ;               reduce using rule 39 (expr -> ( expr ) .)
    ,               reduce using rule 39 (expr -> ( expr ) .)
    +               reduce using rule 39 (expr -> ( expr ) .)
    -               reduce using rule 39 (expr -> ( expr ) .)
    *               reduce using rule 39 (expr -> ( expr ) .)
    /               reduce using rule 39 (expr -> ( expr ) .)
    DOTADD          reduce using rule 39 (expr -> ( expr ) .)
    DOTSUB          reduce using rule 39 (expr -> ( expr ) .)
    DOTMUL          reduce using rule 39 (expr -> ( expr ) .)
    DOTDIV          reduce using rule 39 (expr -> ( expr ) .)
    EQ              reduce using rule 39 (expr -> ( expr ) .)
    GEQ             reduce using rule 39 (expr -> ( expr ) .)
    LEQ             reduce using rule 39 (expr -> ( expr ) .)
    NEQ             reduce using rule 39 (expr -> ( expr ) .)
    <               reduce using rule 39 (expr -> ( expr ) .)
    >               reduce using rule 39 (expr -> ( expr ) .)
    '               reduce using rule 39 (expr -> ( expr ) .)
    )               reduce using rule 39 (expr -> ( expr ) .)
    ]               reduce using rule 39 (expr -> ( expr ) .)
    :               reduce using rule 39 (expr -> ( expr ) .)
    {               reduce using rule 39 (expr -> ( expr ) .)
    BREAK           reduce using rule 39 (expr -> ( expr ) .)
    CONTINUE        reduce using rule 39 (expr -> ( expr ) .)
    RETURN          reduce using rule 39 (expr -> ( expr ) .)
    PRINT           reduce using rule 39 (expr -> ( expr ) .)
    (               reduce using rule 39 (expr -> ( expr ) .)
    ID              reduce using rule 39 (expr -> ( expr ) .)
    FOR             reduce using rule 39 (expr -> ( expr ) .)
    WHILE           reduce using rule 39 (expr -> ( expr ) .)
    INTNUM          reduce using rule 39 (expr -> ( expr ) .)
    FLOAT           reduce using rule 39 (expr -> ( expr ) .)
    STRING          reduce using rule 39 (expr -> ( expr ) .)
    ZEROS           reduce using rule 39 (expr -> ( expr ) .)
    ONES            reduce using rule 39 (expr -> ( expr ) .)
    EYE             reduce using rule 39 (expr -> ( expr ) .)
    [               reduce using rule 39 (expr -> ( expr ) .)
    IF              reduce using rule 39 (expr -> ( expr ) .)


state 98

    (17) ids -> ID [ values . ]
    (58) values -> values . , expr

    ]               shift and go to state 112
    ,               shift and go to state 96


state 99

    (53) matrix -> [ rows ] .

    ;               reduce using rule 53 (matrix -> [ rows ] .)
    ,               reduce using rule 53 (matrix -> [ rows ] .)
    +               reduce using rule 53 (matrix -> [ rows ] .)
    -               reduce using rule 53 (matrix -> [ rows ] .)
    *               reduce using rule 53 (matrix -> [ rows ] .)
    /               reduce using rule 53 (matrix -> [ rows ] .)
    DOTADD          reduce using rule 53 (matrix -> [ rows ] .)
    DOTSUB          reduce using rule 53 (matrix -> [ rows ] .)
    DOTMUL          reduce using rule 53 (matrix -> [ rows ] .)
    DOTDIV          reduce using rule 53 (matrix -> [ rows ] .)
    EQ              reduce using rule 53 (matrix -> [ rows ] .)
    GEQ             reduce using rule 53 (matrix -> [ rows ] .)
    LEQ             reduce using rule 53 (matrix -> [ rows ] .)
    NEQ             reduce using rule 53 (matrix -> [ rows ] .)
    <               reduce using rule 53 (matrix -> [ rows ] .)
    >               reduce using rule 53 (matrix -> [ rows ] .)
    '               reduce using rule 53 (matrix -> [ rows ] .)
    )               reduce using rule 53 (matrix -> [ rows ] .)
    ]               reduce using rule 53 (matrix -> [ rows ] .)
    :               reduce using rule 53 (matrix -> [ rows ] .)
    {               reduce using rule 53 (matrix -> [ rows ] .)
    BREAK           reduce using rule 53 (matrix -> [ rows ] .)
    CONTINUE        reduce using rule 53 (matrix -> [ rows ] .)
    RETURN          reduce using rule 53 (matrix -> [ rows ] .)
    PRINT           reduce using rule 53 (matrix -> [ rows ] .)
    (               reduce using rule 53 (matrix -> [ rows ] .)
    ID              reduce using rule 53 (matrix -> [ rows ] .)
    FOR             reduce using rule 53 (matrix -> [ rows ] .)
    WHILE           reduce using rule 53 (matrix -> [ rows ] .)
    INTNUM          reduce using rule 53 (matrix -> [ rows ] .)
    FLOAT           reduce using rule 53 (matrix -> [ rows ] .)
    STRING          reduce using rule 53 (matrix -> [ rows ] .)
    ZEROS           reduce using rule 53 (matrix -> [ rows ] .)
    ONES            reduce using rule 53 (matrix -> [ rows ] .)
    EYE             reduce using rule 53 (matrix -> [ rows ] .)
    [               reduce using rule 53 (matrix -> [ rows ] .)
    IF              reduce using rule 53 (matrix -> [ rows ] .)


state 100

    (54) matrix -> [ rows ; . ]
    (56) rows -> rows ; . values
    (57) values -> . expr
    (58) values -> . values , expr
    (25) expr -> . expr + expr
    (26) expr -> . expr - expr
    (27) expr -> . expr * expr
    (28) expr -> . expr / expr
    (29) expr -> . expr DOTADD expr
    (30) expr -> . expr DOTSUB expr
    (31) expr -> . expr DOTMUL expr
    (32) expr -> . expr DOTDIV expr
    (33) expr -> . expr EQ expr
    (34) expr -> . expr GEQ expr
    (35) expr -> . expr LEQ expr
    (36) expr -> . expr NEQ expr
    (37) expr -> . expr < expr
    (38) expr -> . expr > expr
    (39) expr -> . ( expr )
    (40) expr -> . expr '
    (41) expr -> . - expr
    (42) expr -> . ids
    (43) expr -> . integer
    (44) expr -> . float
    (45) expr -> . string
    (46) expr -> . matrix
    (16) ids -> . ID
    (17) ids -> . ID [ values ]
    (47) integer -> . INTNUM
    (48) float -> . FLOAT
    (49) string -> . STRING
    (50) matrix -> . ZEROS ( values )
    (51) matrix -> . ONES ( values )
    (52) matrix -> . EYE ( values )
    (53) matrix -> . [ rows ]
    (54) matrix -> . [ rows ; ]

    ]               shift and go to state 113
    (               shift and go to state 17
    -               shift and go to state 16
    ID              shift and go to state 22
    INTNUM          shift and go to state 27
    FLOAT           shift and go to state 28
    STRING          shift and go to state 29
    ZEROS           shift and go to state 30
    ONES            shift and go to state 31
    EYE             shift and go to state 32
    [               shift and go to state 23

    values                         shift and go to state 114
    expr                           shift and go to state 69
    ids                            shift and go to state 61
    integer                        shift and go to state 18
    float                          shift and go to state 19
    string                         shift and go to state 20
    matrix                         shift and go to state 21

state 101

    (65) if_condition -> if_cond ELSE block .

    BREAK           reduce using rule 65 (if_condition -> if_cond ELSE block .)
    CONTINUE        reduce using rule 65 (if_condition -> if_cond ELSE block .)
    RETURN          reduce using rule 65 (if_condition -> if_cond ELSE block .)
    PRINT           reduce using rule 65 (if_condition -> if_cond ELSE block .)
    (               reduce using rule 65 (if_condition -> if_cond ELSE block .)
    -               reduce using rule 65 (if_condition -> if_cond ELSE block .)
    ID              reduce using rule 65 (if_condition -> if_cond ELSE block .)
    FOR             reduce using rule 65 (if_condition -> if_cond ELSE block .)
    WHILE           reduce using rule 65 (if_condition -> if_cond ELSE block .)
    INTNUM          reduce using rule 65 (if_condition -> if_cond ELSE block .)
    FLOAT           reduce using rule 65 (if_condition -> if_cond ELSE block .)
    STRING          reduce using rule 65 (if_condition -> if_cond ELSE block .)
    ZEROS           reduce using rule 65 (if_condition -> if_cond ELSE block .)
    ONES            reduce using rule 65 (if_condition -> if_cond ELSE block .)
    EYE             reduce using rule 65 (if_condition -> if_cond ELSE block .)
    [               reduce using rule 65 (if_condition -> if_cond ELSE block .)
    IF              reduce using rule 65 (if_condition -> if_cond ELSE block .)
    $end            reduce using rule 65 (if_condition -> if_cond ELSE block .)
    }               reduce using rule 65 (if_condition -> if_cond ELSE block .)
    ELSE            reduce using rule 65 (if_condition -> if_cond ELSE block .)


state 102

    (66) if_condition -> if_cond ELSE if_condition .
    (61) condition -> if_condition .

  ! reduce/reduce conflict for BREAK resolved using rule 61 (condition -> if_condition .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 61 (condition -> if_condition .)
  ! reduce/reduce conflict for RETURN resolved using rule 61 (condition -> if_condition .)
  ! reduce/reduce conflict for PRINT resolved using rule 61 (condition -> if_condition .)
  ! reduce/reduce conflict for ( resolved using rule 61 (condition -> if_condition .)
  ! reduce/reduce conflict for - resolved using rule 61 (condition -> if_condition .)
  ! reduce/reduce conflict for ID resolved using rule 61 (condition -> if_condition .)
  ! reduce/reduce conflict for FOR resolved using rule 61 (condition -> if_condition .)
  ! reduce/reduce conflict for WHILE resolved using rule 61 (condition -> if_condition .)
  ! reduce/reduce conflict for INTNUM resolved using rule 61 (condition -> if_condition .)
  ! reduce/reduce conflict for FLOAT resolved using rule 61 (condition -> if_condition .)
  ! reduce/reduce conflict for STRING resolved using rule 61 (condition -> if_condition .)
  ! reduce/reduce conflict for ZEROS resolved using rule 61 (condition -> if_condition .)
  ! reduce/reduce conflict for ONES resolved using rule 61 (condition -> if_condition .)
  ! reduce/reduce conflict for EYE resolved using rule 61 (condition -> if_condition .)
  ! reduce/reduce conflict for [ resolved using rule 61 (condition -> if_condition .)
  ! reduce/reduce conflict for IF resolved using rule 61 (condition -> if_condition .)
  ! reduce/reduce conflict for $end resolved using rule 61 (condition -> if_condition .)
  ! reduce/reduce conflict for } resolved using rule 61 (condition -> if_condition .)
  ! reduce/reduce conflict for ELSE resolved using rule 61 (condition -> if_condition .)
    BREAK           reduce using rule 61 (condition -> if_condition .)
    CONTINUE        reduce using rule 61 (condition -> if_condition .)
    RETURN          reduce using rule 61 (condition -> if_condition .)
    PRINT           reduce using rule 61 (condition -> if_condition .)
    (               reduce using rule 61 (condition -> if_condition .)
    -               reduce using rule 61 (condition -> if_condition .)
    ID              reduce using rule 61 (condition -> if_condition .)
    FOR             reduce using rule 61 (condition -> if_condition .)
    WHILE           reduce using rule 61 (condition -> if_condition .)
    INTNUM          reduce using rule 61 (condition -> if_condition .)
    FLOAT           reduce using rule 61 (condition -> if_condition .)
    STRING          reduce using rule 61 (condition -> if_condition .)
    ZEROS           reduce using rule 61 (condition -> if_condition .)
    ONES            reduce using rule 61 (condition -> if_condition .)
    EYE             reduce using rule 61 (condition -> if_condition .)
    [               reduce using rule 61 (condition -> if_condition .)
    IF              reduce using rule 61 (condition -> if_condition .)
    $end            reduce using rule 61 (condition -> if_condition .)
    }               reduce using rule 61 (condition -> if_condition .)
    ELSE            reduce using rule 61 (condition -> if_condition .)

  ! BREAK           [ reduce using rule 66 (if_condition -> if_cond ELSE if_condition .) ]
  ! CONTINUE        [ reduce using rule 66 (if_condition -> if_cond ELSE if_condition .) ]
  ! RETURN          [ reduce using rule 66 (if_condition -> if_cond ELSE if_condition .) ]
  ! PRINT           [ reduce using rule 66 (if_condition -> if_cond ELSE if_condition .) ]
  ! (               [ reduce using rule 66 (if_condition -> if_cond ELSE if_condition .) ]
  ! -               [ reduce using rule 66 (if_condition -> if_cond ELSE if_condition .) ]
  ! ID              [ reduce using rule 66 (if_condition -> if_cond ELSE if_condition .) ]
  ! FOR             [ reduce using rule 66 (if_condition -> if_cond ELSE if_condition .) ]
  ! WHILE           [ reduce using rule 66 (if_condition -> if_cond ELSE if_condition .) ]
  ! INTNUM          [ reduce using rule 66 (if_condition -> if_cond ELSE if_condition .) ]
  ! FLOAT           [ reduce using rule 66 (if_condition -> if_cond ELSE if_condition .) ]
  ! STRING          [ reduce using rule 66 (if_condition -> if_cond ELSE if_condition .) ]
  ! ZEROS           [ reduce using rule 66 (if_condition -> if_cond ELSE if_condition .) ]
  ! ONES            [ reduce using rule 66 (if_condition -> if_cond ELSE if_condition .) ]
  ! EYE             [ reduce using rule 66 (if_condition -> if_cond ELSE if_condition .) ]
  ! [               [ reduce using rule 66 (if_condition -> if_cond ELSE if_condition .) ]
  ! IF              [ reduce using rule 66 (if_condition -> if_cond ELSE if_condition .) ]
  ! $end            [ reduce using rule 66 (if_condition -> if_cond ELSE if_condition .) ]
  ! }               [ reduce using rule 66 (if_condition -> if_cond ELSE if_condition .) ]
  ! ELSE            [ reduce using rule 66 (if_condition -> if_cond ELSE if_condition .) ]


state 103

    (59) block -> { . instructions_opt }
    (2) instructions_opt -> . instructions
    (3) instructions_opt -> .
    (4) instructions -> . instructions instruction
    (5) instructions -> . instruction
    (6) instruction -> . inst ;
    (7) instruction -> . condition
    (8) instruction -> . expr ;
    (9) instruction -> . inst ,
    (10) instruction -> . expr ,
    (11) inst -> . ids = expr
    (12) inst -> . ids ADDASSIGN expr
    (13) inst -> . ids SUBASSIGN expr
    (14) inst -> . ids MULASSIGN expr
    (15) inst -> . ids DIVASSIGN expr
    (18) inst -> . BREAK
    (19) inst -> . CONTINUE
    (20) inst -> . RETURN
    (21) inst -> . RETURN values
    (22) inst -> . RETURN expr
    (23) inst -> . PRINT values
    (24) inst -> . PRINT expr
    (61) condition -> . if_condition
    (62) condition -> . for_condition
    (63) condition -> . while_condition
    (25) expr -> . expr + expr
    (26) expr -> . expr - expr
    (27) expr -> . expr * expr
    (28) expr -> . expr / expr
    (29) expr -> . expr DOTADD expr
    (30) expr -> . expr DOTSUB expr
    (31) expr -> . expr DOTMUL expr
    (32) expr -> . expr DOTDIV expr
    (33) expr -> . expr EQ expr
    (34) expr -> . expr GEQ expr
    (35) expr -> . expr LEQ expr
    (36) expr -> . expr NEQ expr
    (37) expr -> . expr < expr
    (38) expr -> . expr > expr
    (39) expr -> . ( expr )
    (40) expr -> . expr '
    (41) expr -> . - expr
    (42) expr -> . ids
    (43) expr -> . integer
    (44) expr -> . float
    (45) expr -> . string
    (46) expr -> . matrix
    (16) ids -> . ID
    (17) ids -> . ID [ values ]
    (64) if_condition -> . if_cond
    (65) if_condition -> . if_cond ELSE block
    (66) if_condition -> . if_cond ELSE if_condition
    (68) for_condition -> . FOR ids = range block
    (70) while_condition -> . WHILE ( expr ) block
    (47) integer -> . INTNUM
    (48) float -> . FLOAT
    (49) string -> . STRING
    (50) matrix -> . ZEROS ( values )
    (51) matrix -> . ONES ( values )
    (52) matrix -> . EYE ( values )
    (53) matrix -> . [ rows ]
    (54) matrix -> . [ rows ; ]
    (67) if_cond -> . IF ( expr ) block

    }               reduce using rule 3 (instructions_opt -> .)
    BREAK           shift and go to state 9
    CONTINUE        shift and go to state 10
    RETURN          shift and go to state 11
    PRINT           shift and go to state 12
    (               shift and go to state 17
    -               shift and go to state 16
    ID              shift and go to state 22
    FOR             shift and go to state 25
    WHILE           shift and go to state 26
    INTNUM          shift and go to state 27
    FLOAT           shift and go to state 28
    STRING          shift and go to state 29
    ZEROS           shift and go to state 30
    ONES            shift and go to state 31
    EYE             shift and go to state 32
    [               shift and go to state 23
    IF              shift and go to state 33

    instructions_opt               shift and go to state 115
    instructions                   shift and go to state 3
    instruction                    shift and go to state 4
    inst                           shift and go to state 5
    condition                      shift and go to state 6
    expr                           shift and go to state 7
    ids                            shift and go to state 8
    if_condition                   shift and go to state 13
    for_condition                  shift and go to state 14
    while_condition                shift and go to state 15
    integer                        shift and go to state 18
    float                          shift and go to state 19
    string                         shift and go to state 20
    matrix                         shift and go to state 21
    if_cond                        shift and go to state 24

state 104

    (60) block -> instruction .

    BREAK           reduce using rule 60 (block -> instruction .)
    CONTINUE        reduce using rule 60 (block -> instruction .)
    RETURN          reduce using rule 60 (block -> instruction .)
    PRINT           reduce using rule 60 (block -> instruction .)
    (               reduce using rule 60 (block -> instruction .)
    -               reduce using rule 60 (block -> instruction .)
    ID              reduce using rule 60 (block -> instruction .)
    FOR             reduce using rule 60 (block -> instruction .)
    WHILE           reduce using rule 60 (block -> instruction .)
    INTNUM          reduce using rule 60 (block -> instruction .)
    FLOAT           reduce using rule 60 (block -> instruction .)
    STRING          reduce using rule 60 (block -> instruction .)
    ZEROS           reduce using rule 60 (block -> instruction .)
    ONES            reduce using rule 60 (block -> instruction .)
    EYE             reduce using rule 60 (block -> instruction .)
    [               reduce using rule 60 (block -> instruction .)
    IF              reduce using rule 60 (block -> instruction .)
    $end            reduce using rule 60 (block -> instruction .)
    }               reduce using rule 60 (block -> instruction .)
    ELSE            reduce using rule 60 (block -> instruction .)


state 105

    (68) for_condition -> FOR ids = . range block
    (69) range -> . expr : expr
    (25) expr -> . expr + expr
    (26) expr -> . expr - expr
    (27) expr -> . expr * expr
    (28) expr -> . expr / expr
    (29) expr -> . expr DOTADD expr
    (30) expr -> . expr DOTSUB expr
    (31) expr -> . expr DOTMUL expr
    (32) expr -> . expr DOTDIV expr
    (33) expr -> . expr EQ expr
    (34) expr -> . expr GEQ expr
    (35) expr -> . expr LEQ expr
    (36) expr -> . expr NEQ expr
    (37) expr -> . expr < expr
    (38) expr -> . expr > expr
    (39) expr -> . ( expr )
    (40) expr -> . expr '
    (41) expr -> . - expr
    (42) expr -> . ids
    (43) expr -> . integer
    (44) expr -> . float
    (45) expr -> . string
    (46) expr -> . matrix
    (16) ids -> . ID
    (17) ids -> . ID [ values ]
    (47) integer -> . INTNUM
    (48) float -> . FLOAT
    (49) string -> . STRING
    (50) matrix -> . ZEROS ( values )
    (51) matrix -> . ONES ( values )
    (52) matrix -> . EYE ( values )
    (53) matrix -> . [ rows ]
    (54) matrix -> . [ rows ; ]

    (               shift and go to state 17
    -               shift and go to state 16
    ID              shift and go to state 22
    INTNUM          shift and go to state 27
    FLOAT           shift and go to state 28
    STRING          shift and go to state 29
    ZEROS           shift and go to state 30
    ONES            shift and go to state 31
    EYE             shift and go to state 32
    [               shift and go to state 23

    ids                            shift and go to state 61
    range                          shift and go to state 116
    expr                           shift and go to state 117
    integer                        shift and go to state 18
    float                          shift and go to state 19
    string                         shift and go to state 20
    matrix                         shift and go to state 21

state 106

    (70) while_condition -> WHILE ( expr . ) block
    (25) expr -> expr . + expr
    (26) expr -> expr . - expr
    (27) expr -> expr . * expr
    (28) expr -> expr . / expr
    (29) expr -> expr . DOTADD expr
    (30) expr -> expr . DOTSUB expr
    (31) expr -> expr . DOTMUL expr
    (32) expr -> expr . DOTDIV expr
    (33) expr -> expr . EQ expr
    (34) expr -> expr . GEQ expr
    (35) expr -> expr . LEQ expr
    (36) expr -> expr . NEQ expr
    (37) expr -> expr . < expr
    (38) expr -> expr . > expr
    (40) expr -> expr . '

    )               shift and go to state 118
    +               shift and go to state 39
    -               shift and go to state 40
    *               shift and go to state 41
    /               shift and go to state 42
    DOTADD          shift and go to state 43
    DOTSUB          shift and go to state 44
    DOTMUL          shift and go to state 45
    DOTDIV          shift and go to state 46
    EQ              shift and go to state 47
    GEQ             shift and go to state 48
    LEQ             shift and go to state 49
    NEQ             shift and go to state 50
    <               shift and go to state 51
    >               shift and go to state 52
    '               shift and go to state 53


state 107

    (50) matrix -> ZEROS ( values . )
    (58) values -> values . , expr

    )               shift and go to state 119
    ,               shift and go to state 96


state 108

    (51) matrix -> ONES ( values . )
    (58) values -> values . , expr

    )               shift and go to state 120
    ,               shift and go to state 96


state 109

    (52) matrix -> EYE ( values . )
    (58) values -> values . , expr

    )               shift and go to state 121
    ,               shift and go to state 96


state 110

    (67) if_cond -> IF ( expr . ) block
    (25) expr -> expr . + expr
    (26) expr -> expr . - expr
    (27) expr -> expr . * expr
    (28) expr -> expr . / expr
    (29) expr -> expr . DOTADD expr
    (30) expr -> expr . DOTSUB expr
    (31) expr -> expr . DOTMUL expr
    (32) expr -> expr . DOTDIV expr
    (33) expr -> expr . EQ expr
    (34) expr -> expr . GEQ expr
    (35) expr -> expr . LEQ expr
    (36) expr -> expr . NEQ expr
    (37) expr -> expr . < expr
    (38) expr -> expr . > expr
    (40) expr -> expr . '

    )               shift and go to state 122
    +               shift and go to state 39
    -               shift and go to state 40
    *               shift and go to state 41
    /               shift and go to state 42
    DOTADD          shift and go to state 43
    DOTSUB          shift and go to state 44
    DOTMUL          shift and go to state 45
    DOTDIV          shift and go to state 46
    EQ              shift and go to state 47
    GEQ             shift and go to state 48
    LEQ             shift and go to state 49
    NEQ             shift and go to state 50
    <               shift and go to state 51
    >               shift and go to state 52
    '               shift and go to state 53


state 111

    (58) values -> values , expr .
    (25) expr -> expr . + expr
    (26) expr -> expr . - expr
    (27) expr -> expr . * expr
    (28) expr -> expr . / expr
    (29) expr -> expr . DOTADD expr
    (30) expr -> expr . DOTSUB expr
    (31) expr -> expr . DOTMUL expr
    (32) expr -> expr . DOTDIV expr
    (33) expr -> expr . EQ expr
    (34) expr -> expr . GEQ expr
    (35) expr -> expr . LEQ expr
    (36) expr -> expr . NEQ expr
    (37) expr -> expr . < expr
    (38) expr -> expr . > expr
    (40) expr -> expr . '

    ,               reduce using rule 58 (values -> values , expr .)
    ;               reduce using rule 58 (values -> values , expr .)
    ]               reduce using rule 58 (values -> values , expr .)
    )               reduce using rule 58 (values -> values , expr .)
    +               shift and go to state 39
    -               shift and go to state 40
    *               shift and go to state 41
    /               shift and go to state 42
    DOTADD          shift and go to state 43
    DOTSUB          shift and go to state 44
    DOTMUL          shift and go to state 45
    DOTDIV          shift and go to state 46
    EQ              shift and go to state 47
    GEQ             shift and go to state 48
    LEQ             shift and go to state 49
    NEQ             shift and go to state 50
    <               shift and go to state 51
    >               shift and go to state 52
    '               shift and go to state 53


state 112

    (17) ids -> ID [ values ] .

    =               reduce using rule 17 (ids -> ID [ values ] .)
    ADDASSIGN       reduce using rule 17 (ids -> ID [ values ] .)
    SUBASSIGN       reduce using rule 17 (ids -> ID [ values ] .)
    MULASSIGN       reduce using rule 17 (ids -> ID [ values ] .)
    DIVASSIGN       reduce using rule 17 (ids -> ID [ values ] .)
    ;               reduce using rule 17 (ids -> ID [ values ] .)
    ,               reduce using rule 17 (ids -> ID [ values ] .)
    +               reduce using rule 17 (ids -> ID [ values ] .)
    -               reduce using rule 17 (ids -> ID [ values ] .)
    *               reduce using rule 17 (ids -> ID [ values ] .)
    /               reduce using rule 17 (ids -> ID [ values ] .)
    DOTADD          reduce using rule 17 (ids -> ID [ values ] .)
    DOTSUB          reduce using rule 17 (ids -> ID [ values ] .)
    DOTMUL          reduce using rule 17 (ids -> ID [ values ] .)
    DOTDIV          reduce using rule 17 (ids -> ID [ values ] .)
    EQ              reduce using rule 17 (ids -> ID [ values ] .)
    GEQ             reduce using rule 17 (ids -> ID [ values ] .)
    LEQ             reduce using rule 17 (ids -> ID [ values ] .)
    NEQ             reduce using rule 17 (ids -> ID [ values ] .)
    <               reduce using rule 17 (ids -> ID [ values ] .)
    >               reduce using rule 17 (ids -> ID [ values ] .)
    '               reduce using rule 17 (ids -> ID [ values ] .)
    )               reduce using rule 17 (ids -> ID [ values ] .)
    ]               reduce using rule 17 (ids -> ID [ values ] .)
    :               reduce using rule 17 (ids -> ID [ values ] .)
    {               reduce using rule 17 (ids -> ID [ values ] .)
    BREAK           reduce using rule 17 (ids -> ID [ values ] .)
    CONTINUE        reduce using rule 17 (ids -> ID [ values ] .)
    RETURN          reduce using rule 17 (ids -> ID [ values ] .)
    PRINT           reduce using rule 17 (ids -> ID [ values ] .)
    (               reduce using rule 17 (ids -> ID [ values ] .)
    ID              reduce using rule 17 (ids -> ID [ values ] .)
    FOR             reduce using rule 17 (ids -> ID [ values ] .)
    WHILE           reduce using rule 17 (ids -> ID [ values ] .)
    INTNUM          reduce using rule 17 (ids -> ID [ values ] .)
    FLOAT           reduce using rule 17 (ids -> ID [ values ] .)
    STRING          reduce using rule 17 (ids -> ID [ values ] .)
    ZEROS           reduce using rule 17 (ids -> ID [ values ] .)
    ONES            reduce using rule 17 (ids -> ID [ values ] .)
    EYE             reduce using rule 17 (ids -> ID [ values ] .)
    [               reduce using rule 17 (ids -> ID [ values ] .)
    IF              reduce using rule 17 (ids -> ID [ values ] .)


state 113

    (54) matrix -> [ rows ; ] .

    ;               reduce using rule 54 (matrix -> [ rows ; ] .)
    ,               reduce using rule 54 (matrix -> [ rows ; ] .)
    +               reduce using rule 54 (matrix -> [ rows ; ] .)
    -               reduce using rule 54 (matrix -> [ rows ; ] .)
    *               reduce using rule 54 (matrix -> [ rows ; ] .)
    /               reduce using rule 54 (matrix -> [ rows ; ] .)
    DOTADD          reduce using rule 54 (matrix -> [ rows ; ] .)
    DOTSUB          reduce using rule 54 (matrix -> [ rows ; ] .)
    DOTMUL          reduce using rule 54 (matrix -> [ rows ; ] .)
    DOTDIV          reduce using rule 54 (matrix -> [ rows ; ] .)
    EQ              reduce using rule 54 (matrix -> [ rows ; ] .)
    GEQ             reduce using rule 54 (matrix -> [ rows ; ] .)
    LEQ             reduce using rule 54 (matrix -> [ rows ; ] .)
    NEQ             reduce using rule 54 (matrix -> [ rows ; ] .)
    <               reduce using rule 54 (matrix -> [ rows ; ] .)
    >               reduce using rule 54 (matrix -> [ rows ; ] .)
    '               reduce using rule 54 (matrix -> [ rows ; ] .)
    )               reduce using rule 54 (matrix -> [ rows ; ] .)
    ]               reduce using rule 54 (matrix -> [ rows ; ] .)
    :               reduce using rule 54 (matrix -> [ rows ; ] .)
    {               reduce using rule 54 (matrix -> [ rows ; ] .)
    BREAK           reduce using rule 54 (matrix -> [ rows ; ] .)
    CONTINUE        reduce using rule 54 (matrix -> [ rows ; ] .)
    RETURN          reduce using rule 54 (matrix -> [ rows ; ] .)
    PRINT           reduce using rule 54 (matrix -> [ rows ; ] .)
    (               reduce using rule 54 (matrix -> [ rows ; ] .)
    ID              reduce using rule 54 (matrix -> [ rows ; ] .)
    FOR             reduce using rule 54 (matrix -> [ rows ; ] .)
    WHILE           reduce using rule 54 (matrix -> [ rows ; ] .)
    INTNUM          reduce using rule 54 (matrix -> [ rows ; ] .)
    FLOAT           reduce using rule 54 (matrix -> [ rows ; ] .)
    STRING          reduce using rule 54 (matrix -> [ rows ; ] .)
    ZEROS           reduce using rule 54 (matrix -> [ rows ; ] .)
    ONES            reduce using rule 54 (matrix -> [ rows ; ] .)
    EYE             reduce using rule 54 (matrix -> [ rows ; ] .)
    [               reduce using rule 54 (matrix -> [ rows ; ] .)
    IF              reduce using rule 54 (matrix -> [ rows ; ] .)


state 114

    (56) rows -> rows ; values .
    (58) values -> values . , expr

    ]               reduce using rule 56 (rows -> rows ; values .)
    ;               reduce using rule 56 (rows -> rows ; values .)
    ,               shift and go to state 96


state 115

    (59) block -> { instructions_opt . }

    }               shift and go to state 123


state 116

    (68) for_condition -> FOR ids = range . block
    (59) block -> . { instructions_opt }
    (60) block -> . instruction
    (6) instruction -> . inst ;
    (7) instruction -> . condition
    (8) instruction -> . expr ;
    (9) instruction -> . inst ,
    (10) instruction -> . expr ,
    (11) inst -> . ids = expr
    (12) inst -> . ids ADDASSIGN expr
    (13) inst -> . ids SUBASSIGN expr
    (14) inst -> . ids MULASSIGN expr
    (15) inst -> . ids DIVASSIGN expr
    (18) inst -> . BREAK
    (19) inst -> . CONTINUE
    (20) inst -> . RETURN
    (21) inst -> . RETURN values
    (22) inst -> . RETURN expr
    (23) inst -> . PRINT values
    (24) inst -> . PRINT expr
    (61) condition -> . if_condition
    (62) condition -> . for_condition
    (63) condition -> . while_condition
    (25) expr -> . expr + expr
    (26) expr -> . expr - expr
    (27) expr -> . expr * expr
    (28) expr -> . expr / expr
    (29) expr -> . expr DOTADD expr
    (30) expr -> . expr DOTSUB expr
    (31) expr -> . expr DOTMUL expr
    (32) expr -> . expr DOTDIV expr
    (33) expr -> . expr EQ expr
    (34) expr -> . expr GEQ expr
    (35) expr -> . expr LEQ expr
    (36) expr -> . expr NEQ expr
    (37) expr -> . expr < expr
    (38) expr -> . expr > expr
    (39) expr -> . ( expr )
    (40) expr -> . expr '
    (41) expr -> . - expr
    (42) expr -> . ids
    (43) expr -> . integer
    (44) expr -> . float
    (45) expr -> . string
    (46) expr -> . matrix
    (16) ids -> . ID
    (17) ids -> . ID [ values ]
    (64) if_condition -> . if_cond
    (65) if_condition -> . if_cond ELSE block
    (66) if_condition -> . if_cond ELSE if_condition
    (68) for_condition -> . FOR ids = range block
    (70) while_condition -> . WHILE ( expr ) block
    (47) integer -> . INTNUM
    (48) float -> . FLOAT
    (49) string -> . STRING
    (50) matrix -> . ZEROS ( values )
    (51) matrix -> . ONES ( values )
    (52) matrix -> . EYE ( values )
    (53) matrix -> . [ rows ]
    (54) matrix -> . [ rows ; ]
    (67) if_cond -> . IF ( expr ) block

    {               shift and go to state 103
    BREAK           shift and go to state 9
    CONTINUE        shift and go to state 10
    RETURN          shift and go to state 11
    PRINT           shift and go to state 12
    (               shift and go to state 17
    -               shift and go to state 16
    ID              shift and go to state 22
    FOR             shift and go to state 25
    WHILE           shift and go to state 26
    INTNUM          shift and go to state 27
    FLOAT           shift and go to state 28
    STRING          shift and go to state 29
    ZEROS           shift and go to state 30
    ONES            shift and go to state 31
    EYE             shift and go to state 32
    [               shift and go to state 23
    IF              shift and go to state 33

    ids                            shift and go to state 8
    block                          shift and go to state 124
    instruction                    shift and go to state 104
    inst                           shift and go to state 5
    condition                      shift and go to state 6
    expr                           shift and go to state 7
    if_condition                   shift and go to state 13
    for_condition                  shift and go to state 14
    while_condition                shift and go to state 15
    integer                        shift and go to state 18
    float                          shift and go to state 19
    string                         shift and go to state 20
    matrix                         shift and go to state 21
    if_cond                        shift and go to state 24

state 117

    (69) range -> expr . : expr
    (25) expr -> expr . + expr
    (26) expr -> expr . - expr
    (27) expr -> expr . * expr
    (28) expr -> expr . / expr
    (29) expr -> expr . DOTADD expr
    (30) expr -> expr . DOTSUB expr
    (31) expr -> expr . DOTMUL expr
    (32) expr -> expr . DOTDIV expr
    (33) expr -> expr . EQ expr
    (34) expr -> expr . GEQ expr
    (35) expr -> expr . LEQ expr
    (36) expr -> expr . NEQ expr
    (37) expr -> expr . < expr
    (38) expr -> expr . > expr
    (40) expr -> expr . '

    :               shift and go to state 125
    +               shift and go to state 39
    -               shift and go to state 40
    *               shift and go to state 41
    /               shift and go to state 42
    DOTADD          shift and go to state 43
    DOTSUB          shift and go to state 44
    DOTMUL          shift and go to state 45
    DOTDIV          shift and go to state 46
    EQ              shift and go to state 47
    GEQ             shift and go to state 48
    LEQ             shift and go to state 49
    NEQ             shift and go to state 50
    <               shift and go to state 51
    >               shift and go to state 52
    '               shift and go to state 53


state 118

    (70) while_condition -> WHILE ( expr ) . block
    (59) block -> . { instructions_opt }
    (60) block -> . instruction
    (6) instruction -> . inst ;
    (7) instruction -> . condition
    (8) instruction -> . expr ;
    (9) instruction -> . inst ,
    (10) instruction -> . expr ,
    (11) inst -> . ids = expr
    (12) inst -> . ids ADDASSIGN expr
    (13) inst -> . ids SUBASSIGN expr
    (14) inst -> . ids MULASSIGN expr
    (15) inst -> . ids DIVASSIGN expr
    (18) inst -> . BREAK
    (19) inst -> . CONTINUE
    (20) inst -> . RETURN
    (21) inst -> . RETURN values
    (22) inst -> . RETURN expr
    (23) inst -> . PRINT values
    (24) inst -> . PRINT expr
    (61) condition -> . if_condition
    (62) condition -> . for_condition
    (63) condition -> . while_condition
    (25) expr -> . expr + expr
    (26) expr -> . expr - expr
    (27) expr -> . expr * expr
    (28) expr -> . expr / expr
    (29) expr -> . expr DOTADD expr
    (30) expr -> . expr DOTSUB expr
    (31) expr -> . expr DOTMUL expr
    (32) expr -> . expr DOTDIV expr
    (33) expr -> . expr EQ expr
    (34) expr -> . expr GEQ expr
    (35) expr -> . expr LEQ expr
    (36) expr -> . expr NEQ expr
    (37) expr -> . expr < expr
    (38) expr -> . expr > expr
    (39) expr -> . ( expr )
    (40) expr -> . expr '
    (41) expr -> . - expr
    (42) expr -> . ids
    (43) expr -> . integer
    (44) expr -> . float
    (45) expr -> . string
    (46) expr -> . matrix
    (16) ids -> . ID
    (17) ids -> . ID [ values ]
    (64) if_condition -> . if_cond
    (65) if_condition -> . if_cond ELSE block
    (66) if_condition -> . if_cond ELSE if_condition
    (68) for_condition -> . FOR ids = range block
    (70) while_condition -> . WHILE ( expr ) block
    (47) integer -> . INTNUM
    (48) float -> . FLOAT
    (49) string -> . STRING
    (50) matrix -> . ZEROS ( values )
    (51) matrix -> . ONES ( values )
    (52) matrix -> . EYE ( values )
    (53) matrix -> . [ rows ]
    (54) matrix -> . [ rows ; ]
    (67) if_cond -> . IF ( expr ) block

    {               shift and go to state 103
    BREAK           shift and go to state 9
    CONTINUE        shift and go to state 10
    RETURN          shift and go to state 11
    PRINT           shift and go to state 12
    (               shift and go to state 17
    -               shift and go to state 16
    ID              shift and go to state 22
    FOR             shift and go to state 25
    WHILE           shift and go to state 26
    INTNUM          shift and go to state 27
    FLOAT           shift and go to state 28
    STRING          shift and go to state 29
    ZEROS           shift and go to state 30
    ONES            shift and go to state 31
    EYE             shift and go to state 32
    [               shift and go to state 23
    IF              shift and go to state 33

    expr                           shift and go to state 7
    block                          shift and go to state 126
    instruction                    shift and go to state 104
    inst                           shift and go to state 5
    condition                      shift and go to state 6
    ids                            shift and go to state 8
    if_condition                   shift and go to state 13
    for_condition                  shift and go to state 14
    while_condition                shift and go to state 15
    integer                        shift and go to state 18
    float                          shift and go to state 19
    string                         shift and go to state 20
    matrix                         shift and go to state 21
    if_cond                        shift and go to state 24

state 119

    (50) matrix -> ZEROS ( values ) .

    ;               reduce using rule 50 (matrix -> ZEROS ( values ) .)
    ,               reduce using rule 50 (matrix -> ZEROS ( values ) .)
    +               reduce using rule 50 (matrix -> ZEROS ( values ) .)
    -               reduce using rule 50 (matrix -> ZEROS ( values ) .)
    *               reduce using rule 50 (matrix -> ZEROS ( values ) .)
    /               reduce using rule 50 (matrix -> ZEROS ( values ) .)
    DOTADD          reduce using rule 50 (matrix -> ZEROS ( values ) .)
    DOTSUB          reduce using rule 50 (matrix -> ZEROS ( values ) .)
    DOTMUL          reduce using rule 50 (matrix -> ZEROS ( values ) .)
    DOTDIV          reduce using rule 50 (matrix -> ZEROS ( values ) .)
    EQ              reduce using rule 50 (matrix -> ZEROS ( values ) .)
    GEQ             reduce using rule 50 (matrix -> ZEROS ( values ) .)
    LEQ             reduce using rule 50 (matrix -> ZEROS ( values ) .)
    NEQ             reduce using rule 50 (matrix -> ZEROS ( values ) .)
    <               reduce using rule 50 (matrix -> ZEROS ( values ) .)
    >               reduce using rule 50 (matrix -> ZEROS ( values ) .)
    '               reduce using rule 50 (matrix -> ZEROS ( values ) .)
    )               reduce using rule 50 (matrix -> ZEROS ( values ) .)
    ]               reduce using rule 50 (matrix -> ZEROS ( values ) .)
    :               reduce using rule 50 (matrix -> ZEROS ( values ) .)
    {               reduce using rule 50 (matrix -> ZEROS ( values ) .)
    BREAK           reduce using rule 50 (matrix -> ZEROS ( values ) .)
    CONTINUE        reduce using rule 50 (matrix -> ZEROS ( values ) .)
    RETURN          reduce using rule 50 (matrix -> ZEROS ( values ) .)
    PRINT           reduce using rule 50 (matrix -> ZEROS ( values ) .)
    (               reduce using rule 50 (matrix -> ZEROS ( values ) .)
    ID              reduce using rule 50 (matrix -> ZEROS ( values ) .)
    FOR             reduce using rule 50 (matrix -> ZEROS ( values ) .)
    WHILE           reduce using rule 50 (matrix -> ZEROS ( values ) .)
    INTNUM          reduce using rule 50 (matrix -> ZEROS ( values ) .)
    FLOAT           reduce using rule 50 (matrix -> ZEROS ( values ) .)
    STRING          reduce using rule 50 (matrix -> ZEROS ( values ) .)
    ZEROS           reduce using rule 50 (matrix -> ZEROS ( values ) .)
    ONES            reduce using rule 50 (matrix -> ZEROS ( values ) .)
    EYE             reduce using rule 50 (matrix -> ZEROS ( values ) .)
    [               reduce using rule 50 (matrix -> ZEROS ( values ) .)
    IF              reduce using rule 50 (matrix -> ZEROS ( values ) .)


state 120

    (51) matrix -> ONES ( values ) .

    ;               reduce using rule 51 (matrix -> ONES ( values ) .)
    ,               reduce using rule 51 (matrix -> ONES ( values ) .)
    +               reduce using rule 51 (matrix -> ONES ( values ) .)
    -               reduce using rule 51 (matrix -> ONES ( values ) .)
    *               reduce using rule 51 (matrix -> ONES ( values ) .)
    /               reduce using rule 51 (matrix -> ONES ( values ) .)
    DOTADD          reduce using rule 51 (matrix -> ONES ( values ) .)
    DOTSUB          reduce using rule 51 (matrix -> ONES ( values ) .)
    DOTMUL          reduce using rule 51 (matrix -> ONES ( values ) .)
    DOTDIV          reduce using rule 51 (matrix -> ONES ( values ) .)
    EQ              reduce using rule 51 (matrix -> ONES ( values ) .)
    GEQ             reduce using rule 51 (matrix -> ONES ( values ) .)
    LEQ             reduce using rule 51 (matrix -> ONES ( values ) .)
    NEQ             reduce using rule 51 (matrix -> ONES ( values ) .)
    <               reduce using rule 51 (matrix -> ONES ( values ) .)
    >               reduce using rule 51 (matrix -> ONES ( values ) .)
    '               reduce using rule 51 (matrix -> ONES ( values ) .)
    )               reduce using rule 51 (matrix -> ONES ( values ) .)
    ]               reduce using rule 51 (matrix -> ONES ( values ) .)
    :               reduce using rule 51 (matrix -> ONES ( values ) .)
    {               reduce using rule 51 (matrix -> ONES ( values ) .)
    BREAK           reduce using rule 51 (matrix -> ONES ( values ) .)
    CONTINUE        reduce using rule 51 (matrix -> ONES ( values ) .)
    RETURN          reduce using rule 51 (matrix -> ONES ( values ) .)
    PRINT           reduce using rule 51 (matrix -> ONES ( values ) .)
    (               reduce using rule 51 (matrix -> ONES ( values ) .)
    ID              reduce using rule 51 (matrix -> ONES ( values ) .)
    FOR             reduce using rule 51 (matrix -> ONES ( values ) .)
    WHILE           reduce using rule 51 (matrix -> ONES ( values ) .)
    INTNUM          reduce using rule 51 (matrix -> ONES ( values ) .)
    FLOAT           reduce using rule 51 (matrix -> ONES ( values ) .)
    STRING          reduce using rule 51 (matrix -> ONES ( values ) .)
    ZEROS           reduce using rule 51 (matrix -> ONES ( values ) .)
    ONES            reduce using rule 51 (matrix -> ONES ( values ) .)
    EYE             reduce using rule 51 (matrix -> ONES ( values ) .)
    [               reduce using rule 51 (matrix -> ONES ( values ) .)
    IF              reduce using rule 51 (matrix -> ONES ( values ) .)


state 121

    (52) matrix -> EYE ( values ) .

    ;               reduce using rule 52 (matrix -> EYE ( values ) .)
    ,               reduce using rule 52 (matrix -> EYE ( values ) .)
    +               reduce using rule 52 (matrix -> EYE ( values ) .)
    -               reduce using rule 52 (matrix -> EYE ( values ) .)
    *               reduce using rule 52 (matrix -> EYE ( values ) .)
    /               reduce using rule 52 (matrix -> EYE ( values ) .)
    DOTADD          reduce using rule 52 (matrix -> EYE ( values ) .)
    DOTSUB          reduce using rule 52 (matrix -> EYE ( values ) .)
    DOTMUL          reduce using rule 52 (matrix -> EYE ( values ) .)
    DOTDIV          reduce using rule 52 (matrix -> EYE ( values ) .)
    EQ              reduce using rule 52 (matrix -> EYE ( values ) .)
    GEQ             reduce using rule 52 (matrix -> EYE ( values ) .)
    LEQ             reduce using rule 52 (matrix -> EYE ( values ) .)
    NEQ             reduce using rule 52 (matrix -> EYE ( values ) .)
    <               reduce using rule 52 (matrix -> EYE ( values ) .)
    >               reduce using rule 52 (matrix -> EYE ( values ) .)
    '               reduce using rule 52 (matrix -> EYE ( values ) .)
    )               reduce using rule 52 (matrix -> EYE ( values ) .)
    ]               reduce using rule 52 (matrix -> EYE ( values ) .)
    :               reduce using rule 52 (matrix -> EYE ( values ) .)
    {               reduce using rule 52 (matrix -> EYE ( values ) .)
    BREAK           reduce using rule 52 (matrix -> EYE ( values ) .)
    CONTINUE        reduce using rule 52 (matrix -> EYE ( values ) .)
    RETURN          reduce using rule 52 (matrix -> EYE ( values ) .)
    PRINT           reduce using rule 52 (matrix -> EYE ( values ) .)
    (               reduce using rule 52 (matrix -> EYE ( values ) .)
    ID              reduce using rule 52 (matrix -> EYE ( values ) .)
    FOR             reduce using rule 52 (matrix -> EYE ( values ) .)
    WHILE           reduce using rule 52 (matrix -> EYE ( values ) .)
    INTNUM          reduce using rule 52 (matrix -> EYE ( values ) .)
    FLOAT           reduce using rule 52 (matrix -> EYE ( values ) .)
    STRING          reduce using rule 52 (matrix -> EYE ( values ) .)
    ZEROS           reduce using rule 52 (matrix -> EYE ( values ) .)
    ONES            reduce using rule 52 (matrix -> EYE ( values ) .)
    EYE             reduce using rule 52 (matrix -> EYE ( values ) .)
    [               reduce using rule 52 (matrix -> EYE ( values ) .)
    IF              reduce using rule 52 (matrix -> EYE ( values ) .)


state 122

    (67) if_cond -> IF ( expr ) . block
    (59) block -> . { instructions_opt }
    (60) block -> . instruction
    (6) instruction -> . inst ;
    (7) instruction -> . condition
    (8) instruction -> . expr ;
    (9) instruction -> . inst ,
    (10) instruction -> . expr ,
    (11) inst -> . ids = expr
    (12) inst -> . ids ADDASSIGN expr
    (13) inst -> . ids SUBASSIGN expr
    (14) inst -> . ids MULASSIGN expr
    (15) inst -> . ids DIVASSIGN expr
    (18) inst -> . BREAK
    (19) inst -> . CONTINUE
    (20) inst -> . RETURN
    (21) inst -> . RETURN values
    (22) inst -> . RETURN expr
    (23) inst -> . PRINT values
    (24) inst -> . PRINT expr
    (61) condition -> . if_condition
    (62) condition -> . for_condition
    (63) condition -> . while_condition
    (25) expr -> . expr + expr
    (26) expr -> . expr - expr
    (27) expr -> . expr * expr
    (28) expr -> . expr / expr
    (29) expr -> . expr DOTADD expr
    (30) expr -> . expr DOTSUB expr
    (31) expr -> . expr DOTMUL expr
    (32) expr -> . expr DOTDIV expr
    (33) expr -> . expr EQ expr
    (34) expr -> . expr GEQ expr
    (35) expr -> . expr LEQ expr
    (36) expr -> . expr NEQ expr
    (37) expr -> . expr < expr
    (38) expr -> . expr > expr
    (39) expr -> . ( expr )
    (40) expr -> . expr '
    (41) expr -> . - expr
    (42) expr -> . ids
    (43) expr -> . integer
    (44) expr -> . float
    (45) expr -> . string
    (46) expr -> . matrix
    (16) ids -> . ID
    (17) ids -> . ID [ values ]
    (64) if_condition -> . if_cond
    (65) if_condition -> . if_cond ELSE block
    (66) if_condition -> . if_cond ELSE if_condition
    (68) for_condition -> . FOR ids = range block
    (70) while_condition -> . WHILE ( expr ) block
    (47) integer -> . INTNUM
    (48) float -> . FLOAT
    (49) string -> . STRING
    (50) matrix -> . ZEROS ( values )
    (51) matrix -> . ONES ( values )
    (52) matrix -> . EYE ( values )
    (53) matrix -> . [ rows ]
    (54) matrix -> . [ rows ; ]
    (67) if_cond -> . IF ( expr ) block

    {               shift and go to state 103
    BREAK           shift and go to state 9
    CONTINUE        shift and go to state 10
    RETURN          shift and go to state 11
    PRINT           shift and go to state 12
    (               shift and go to state 17
    -               shift and go to state 16
    ID              shift and go to state 22
    FOR             shift and go to state 25
    WHILE           shift and go to state 26
    INTNUM          shift and go to state 27
    FLOAT           shift and go to state 28
    STRING          shift and go to state 29
    ZEROS           shift and go to state 30
    ONES            shift and go to state 31
    EYE             shift and go to state 32
    [               shift and go to state 23
    IF              shift and go to state 33

    expr                           shift and go to state 7
    block                          shift and go to state 127
    instruction                    shift and go to state 104
    inst                           shift and go to state 5
    condition                      shift and go to state 6
    ids                            shift and go to state 8
    if_condition                   shift and go to state 13
    for_condition                  shift and go to state 14
    while_condition                shift and go to state 15
    integer                        shift and go to state 18
    float                          shift and go to state 19
    string                         shift and go to state 20
    matrix                         shift and go to state 21
    if_cond                        shift and go to state 24

state 123

    (59) block -> { instructions_opt } .

    BREAK           reduce using rule 59 (block -> { instructions_opt } .)
    CONTINUE        reduce using rule 59 (block -> { instructions_opt } .)
    RETURN          reduce using rule 59 (block -> { instructions_opt } .)
    PRINT           reduce using rule 59 (block -> { instructions_opt } .)
    (               reduce using rule 59 (block -> { instructions_opt } .)
    -               reduce using rule 59 (block -> { instructions_opt } .)
    ID              reduce using rule 59 (block -> { instructions_opt } .)
    FOR             reduce using rule 59 (block -> { instructions_opt } .)
    WHILE           reduce using rule 59 (block -> { instructions_opt } .)
    INTNUM          reduce using rule 59 (block -> { instructions_opt } .)
    FLOAT           reduce using rule 59 (block -> { instructions_opt } .)
    STRING          reduce using rule 59 (block -> { instructions_opt } .)
    ZEROS           reduce using rule 59 (block -> { instructions_opt } .)
    ONES            reduce using rule 59 (block -> { instructions_opt } .)
    EYE             reduce using rule 59 (block -> { instructions_opt } .)
    [               reduce using rule 59 (block -> { instructions_opt } .)
    IF              reduce using rule 59 (block -> { instructions_opt } .)
    $end            reduce using rule 59 (block -> { instructions_opt } .)
    }               reduce using rule 59 (block -> { instructions_opt } .)
    ELSE            reduce using rule 59 (block -> { instructions_opt } .)


state 124

    (68) for_condition -> FOR ids = range block .

    BREAK           reduce using rule 68 (for_condition -> FOR ids = range block .)
    CONTINUE        reduce using rule 68 (for_condition -> FOR ids = range block .)
    RETURN          reduce using rule 68 (for_condition -> FOR ids = range block .)
    PRINT           reduce using rule 68 (for_condition -> FOR ids = range block .)
    (               reduce using rule 68 (for_condition -> FOR ids = range block .)
    -               reduce using rule 68 (for_condition -> FOR ids = range block .)
    ID              reduce using rule 68 (for_condition -> FOR ids = range block .)
    FOR             reduce using rule 68 (for_condition -> FOR ids = range block .)
    WHILE           reduce using rule 68 (for_condition -> FOR ids = range block .)
    INTNUM          reduce using rule 68 (for_condition -> FOR ids = range block .)
    FLOAT           reduce using rule 68 (for_condition -> FOR ids = range block .)
    STRING          reduce using rule 68 (for_condition -> FOR ids = range block .)
    ZEROS           reduce using rule 68 (for_condition -> FOR ids = range block .)
    ONES            reduce using rule 68 (for_condition -> FOR ids = range block .)
    EYE             reduce using rule 68 (for_condition -> FOR ids = range block .)
    [               reduce using rule 68 (for_condition -> FOR ids = range block .)
    IF              reduce using rule 68 (for_condition -> FOR ids = range block .)
    $end            reduce using rule 68 (for_condition -> FOR ids = range block .)
    }               reduce using rule 68 (for_condition -> FOR ids = range block .)
    ELSE            reduce using rule 68 (for_condition -> FOR ids = range block .)


state 125

    (69) range -> expr : . expr
    (25) expr -> . expr + expr
    (26) expr -> . expr - expr
    (27) expr -> . expr * expr
    (28) expr -> . expr / expr
    (29) expr -> . expr DOTADD expr
    (30) expr -> . expr DOTSUB expr
    (31) expr -> . expr DOTMUL expr
    (32) expr -> . expr DOTDIV expr
    (33) expr -> . expr EQ expr
    (34) expr -> . expr GEQ expr
    (35) expr -> . expr LEQ expr
    (36) expr -> . expr NEQ expr
    (37) expr -> . expr < expr
    (38) expr -> . expr > expr
    (39) expr -> . ( expr )
    (40) expr -> . expr '
    (41) expr -> . - expr
    (42) expr -> . ids
    (43) expr -> . integer
    (44) expr -> . float
    (45) expr -> . string
    (46) expr -> . matrix
    (16) ids -> . ID
    (17) ids -> . ID [ values ]
    (47) integer -> . INTNUM
    (48) float -> . FLOAT
    (49) string -> . STRING
    (50) matrix -> . ZEROS ( values )
    (51) matrix -> . ONES ( values )
    (52) matrix -> . EYE ( values )
    (53) matrix -> . [ rows ]
    (54) matrix -> . [ rows ; ]

    (               shift and go to state 17
    -               shift and go to state 16
    ID              shift and go to state 22
    INTNUM          shift and go to state 27
    FLOAT           shift and go to state 28
    STRING          shift and go to state 29
    ZEROS           shift and go to state 30
    ONES            shift and go to state 31
    EYE             shift and go to state 32
    [               shift and go to state 23

    expr                           shift and go to state 128
    ids                            shift and go to state 61
    integer                        shift and go to state 18
    float                          shift and go to state 19
    string                         shift and go to state 20
    matrix                         shift and go to state 21

state 126

    (70) while_condition -> WHILE ( expr ) block .

    BREAK           reduce using rule 70 (while_condition -> WHILE ( expr ) block .)
    CONTINUE        reduce using rule 70 (while_condition -> WHILE ( expr ) block .)
    RETURN          reduce using rule 70 (while_condition -> WHILE ( expr ) block .)
    PRINT           reduce using rule 70 (while_condition -> WHILE ( expr ) block .)
    (               reduce using rule 70 (while_condition -> WHILE ( expr ) block .)
    -               reduce using rule 70 (while_condition -> WHILE ( expr ) block .)
    ID              reduce using rule 70 (while_condition -> WHILE ( expr ) block .)
    FOR             reduce using rule 70 (while_condition -> WHILE ( expr ) block .)
    WHILE           reduce using rule 70 (while_condition -> WHILE ( expr ) block .)
    INTNUM          reduce using rule 70 (while_condition -> WHILE ( expr ) block .)
    FLOAT           reduce using rule 70 (while_condition -> WHILE ( expr ) block .)
    STRING          reduce using rule 70 (while_condition -> WHILE ( expr ) block .)
    ZEROS           reduce using rule 70 (while_condition -> WHILE ( expr ) block .)
    ONES            reduce using rule 70 (while_condition -> WHILE ( expr ) block .)
    EYE             reduce using rule 70 (while_condition -> WHILE ( expr ) block .)
    [               reduce using rule 70 (while_condition -> WHILE ( expr ) block .)
    IF              reduce using rule 70 (while_condition -> WHILE ( expr ) block .)
    $end            reduce using rule 70 (while_condition -> WHILE ( expr ) block .)
    }               reduce using rule 70 (while_condition -> WHILE ( expr ) block .)
    ELSE            reduce using rule 70 (while_condition -> WHILE ( expr ) block .)


state 127

    (67) if_cond -> IF ( expr ) block .

    ELSE            reduce using rule 67 (if_cond -> IF ( expr ) block .)
    BREAK           reduce using rule 67 (if_cond -> IF ( expr ) block .)
    CONTINUE        reduce using rule 67 (if_cond -> IF ( expr ) block .)
    RETURN          reduce using rule 67 (if_cond -> IF ( expr ) block .)
    PRINT           reduce using rule 67 (if_cond -> IF ( expr ) block .)
    (               reduce using rule 67 (if_cond -> IF ( expr ) block .)
    -               reduce using rule 67 (if_cond -> IF ( expr ) block .)
    ID              reduce using rule 67 (if_cond -> IF ( expr ) block .)
    FOR             reduce using rule 67 (if_cond -> IF ( expr ) block .)
    WHILE           reduce using rule 67 (if_cond -> IF ( expr ) block .)
    INTNUM          reduce using rule 67 (if_cond -> IF ( expr ) block .)
    FLOAT           reduce using rule 67 (if_cond -> IF ( expr ) block .)
    STRING          reduce using rule 67 (if_cond -> IF ( expr ) block .)
    ZEROS           reduce using rule 67 (if_cond -> IF ( expr ) block .)
    ONES            reduce using rule 67 (if_cond -> IF ( expr ) block .)
    EYE             reduce using rule 67 (if_cond -> IF ( expr ) block .)
    [               reduce using rule 67 (if_cond -> IF ( expr ) block .)
    IF              reduce using rule 67 (if_cond -> IF ( expr ) block .)
    $end            reduce using rule 67 (if_cond -> IF ( expr ) block .)
    }               reduce using rule 67 (if_cond -> IF ( expr ) block .)


state 128

    (69) range -> expr : expr .
    (25) expr -> expr . + expr
    (26) expr -> expr . - expr
    (27) expr -> expr . * expr
    (28) expr -> expr . / expr
    (29) expr -> expr . DOTADD expr
    (30) expr -> expr . DOTSUB expr
    (31) expr -> expr . DOTMUL expr
    (32) expr -> expr . DOTDIV expr
    (33) expr -> expr . EQ expr
    (34) expr -> expr . GEQ expr
    (35) expr -> expr . LEQ expr
    (36) expr -> expr . NEQ expr
    (37) expr -> expr . < expr
    (38) expr -> expr . > expr
    (40) expr -> expr . '

  ! shift/reduce conflict for - resolved as shift
    {               reduce using rule 69 (range -> expr : expr .)
    BREAK           reduce using rule 69 (range -> expr : expr .)
    CONTINUE        reduce using rule 69 (range -> expr : expr .)
    RETURN          reduce using rule 69 (range -> expr : expr .)
    PRINT           reduce using rule 69 (range -> expr : expr .)
    (               reduce using rule 69 (range -> expr : expr .)
    ID              reduce using rule 69 (range -> expr : expr .)
    FOR             reduce using rule 69 (range -> expr : expr .)
    WHILE           reduce using rule 69 (range -> expr : expr .)
    INTNUM          reduce using rule 69 (range -> expr : expr .)
    FLOAT           reduce using rule 69 (range -> expr : expr .)
    STRING          reduce using rule 69 (range -> expr : expr .)
    ZEROS           reduce using rule 69 (range -> expr : expr .)
    ONES            reduce using rule 69 (range -> expr : expr .)
    EYE             reduce using rule 69 (range -> expr : expr .)
    [               reduce using rule 69 (range -> expr : expr .)
    IF              reduce using rule 69 (range -> expr : expr .)
    +               shift and go to state 39
    -               shift and go to state 40
    *               shift and go to state 41
    /               shift and go to state 42
    DOTADD          shift and go to state 43
    DOTSUB          shift and go to state 44
    DOTMUL          shift and go to state 45
    DOTDIV          shift and go to state 46
    EQ              shift and go to state 47
    GEQ             shift and go to state 48
    LEQ             shift and go to state 49
    NEQ             shift and go to state 50
    <               shift and go to state 51
    >               shift and go to state 52
    '               shift and go to state 53

  ! -               [ reduce using rule 69 (range -> expr : expr .) ]

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for [ in state 22 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 24 resolved as shift
WARNING: shift/reduce conflict for , in state 59 resolved as shift
WARNING: shift/reduce conflict for , in state 62 resolved as shift
WARNING: shift/reduce conflict for - in state 128 resolved as shift
WARNING: reduce/reduce conflict in state 60 resolved using rule (inst -> RETURN expr)
WARNING: rejected rule (values -> expr) in state 60
WARNING: reduce/reduce conflict in state 63 resolved using rule (inst -> PRINT expr)
WARNING: rejected rule (values -> expr) in state 63
WARNING: reduce/reduce conflict in state 102 resolved using rule (condition -> if_condition)
WARNING: rejected rule (if_condition -> if_cond ELSE if_condition) in state 102
WARNING: Rule (if_condition -> if_cond ELSE if_condition) is never reduced
