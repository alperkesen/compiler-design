
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'left,right=ADDASSIGNSUBASSIGNMULASSIGNDIVASSIGNleftEQNEQleft<>LEQGEQleft+-DOTADDDOTSUBleft*/DOTMULDOTDIVrightUMINUSnonassocIFnonassocELSEADDASSIGN BREAK CONTINUE DIVASSIGN DOTADD DOTDIV DOTMUL DOTSUB ELSE EQ EYE FLOAT FOR GEQ ID IF INTNUM LEQ MULASSIGN NEQ ONES PRINT RETURN STRING SUBASSIGN WHILE ZEROSprogram : instructions_optinstructions_opt : instructions instructions_opt : instructions : instructions instruction instructions : instruction instruction : inst \';\'\n                       | condition \n                       | expr \';\' \n                       | inst \',\'\n                       | expr \',\' inst : ids \'=\' expr\n                | ids ADDASSIGN expr\n                | ids SUBASSIGN expr\n                | ids MULASSIGN expr\n                | ids DIVASSIGN expr ids : ID\n               | ID \'[\' values \']\' inst : BREAK inst : CONTINUE inst : RETURN\n                | RETURN values \n                | RETURN expr inst : PRINT values\n                | PRINT expr expr : expr \'+\' expr\n                | expr \'-\' expr\n                | expr \'*\' expr\n                | expr \'/\' expr expr : expr DOTADD expr\n                | expr DOTSUB expr\n                | expr DOTMUL expr\n                | expr DOTDIV expr expr : expr EQ expr\n                | expr GEQ expr\n                | expr LEQ expr\n                | expr NEQ expr\n                | expr \'<\' expr\n                | expr \'>\' exprexpr : \'(\' expr \')\' expr : expr "\'" expr : \'-\' expr %prec UMINUSexpr : ids\n                | integer\n                | float\n                | string\n                | matrix integer : INTNUM float : FLOAT string : STRING matrix : ZEROS \'(\' values \')\'\n                  | ONES \'(\' values \')\'\n                  | EYE \'(\' values \')\' matrix : \'[\' rows \']\'\n                  | \'[\' rows \';\' \']\' rows : values rows : rows \';\' values values : expr values : values \',\' expr  block : \'{\' instructions_opt \'}\'  block : instruction  condition : if_condition\n                      | for_condition\n                      | while_condition  if_condition : if_cond if_condition : if_cond ELSE block if_condition : if_cond ELSE if_condition if_cond : IF \'(\' expr \')\' block  for_condition : FOR ids \'=\' range block  range : expr \':\' expr  while_condition : WHILE \'(\' expr \')\' block '
    
_lr_action_items = {'$end':([0,1,2,3,4,6,13,14,15,24,34,35,36,37,38,101,102,104,123,124,126,127,],[-3,0,-1,-2,-5,-7,-61,-62,-63,-64,-4,-6,-9,-8,-10,-65,-61,-60,-59,-68,-70,-67,]),'BREAK':([0,3,4,6,13,14,15,18,19,20,21,22,24,27,28,29,34,35,36,37,38,53,61,64,70,77,78,79,80,81,82,83,84,85,86,87,88,89,90,97,99,101,102,103,104,112,113,116,118,119,120,121,122,123,124,126,127,128,],[9,9,-5,-7,-61,-62,-63,-43,-44,-45,-46,-16,-64,-47,-48,-49,-4,-6,-9,-8,-10,-40,-42,-41,9,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-53,-65,-61,9,-60,-17,-54,9,9,-50,-51,-52,9,-59,-68,-70,-67,-69,]),'CONTINUE':([0,3,4,6,13,14,15,18,19,20,21,22,24,27,28,29,34,35,36,37,38,53,61,64,70,77,78,79,80,81,82,83,84,85,86,87,88,89,90,97,99,101,102,103,104,112,113,116,118,119,120,121,122,123,124,126,127,128,],[10,10,-5,-7,-61,-62,-63,-43,-44,-45,-46,-16,-64,-47,-48,-49,-4,-6,-9,-8,-10,-40,-42,-41,10,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-53,-65,-61,10,-60,-17,-54,10,10,-50,-51,-52,10,-59,-68,-70,-67,-69,]),'RETURN':([0,3,4,6,13,14,15,18,19,20,21,22,24,27,28,29,34,35,36,37,38,53,61,64,70,77,78,79,80,81,82,83,84,85,86,87,88,89,90,97,99,101,102,103,104,112,113,116,118,119,120,121,122,123,124,126,127,128,],[11,11,-5,-7,-61,-62,-63,-43,-44,-45,-46,-16,-64,-47,-48,-49,-4,-6,-9,-8,-10,-40,-42,-41,11,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-53,-65,-61,11,-60,-17,-54,11,11,-50,-51,-52,11,-59,-68,-70,-67,-69,]),'PRINT':([0,3,4,6,13,14,15,18,19,20,21,22,24,27,28,29,34,35,36,37,38,53,61,64,70,77,78,79,80,81,82,83,84,85,86,87,88,89,90,97,99,101,102,103,104,112,113,116,118,119,120,121,122,123,124,126,127,128,],[12,12,-5,-7,-61,-62,-63,-43,-44,-45,-46,-16,-64,-47,-48,-49,-4,-6,-9,-8,-10,-40,-42,-41,12,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-53,-65,-61,12,-60,-17,-54,12,12,-50,-51,-52,12,-59,-68,-70,-67,-69,]),'(':([0,3,4,6,11,12,13,14,15,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,61,64,66,70,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,96,97,99,100,101,102,103,104,105,112,113,116,118,119,120,121,122,123,124,125,126,127,128,],[17,17,-5,-7,17,17,-61,-62,-63,17,17,-43,-44,-45,-46,-16,17,-64,72,-47,-48,-49,73,74,75,76,-4,-6,-9,-8,-10,17,17,17,17,17,17,17,17,17,17,17,17,17,17,-40,17,17,17,17,17,-42,-41,17,17,17,17,17,17,17,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,17,-39,-53,17,-65,-61,17,-60,17,-17,-54,17,17,-50,-51,-52,17,-59,-68,17,-70,-67,-69,]),'-':([0,3,4,6,7,8,11,12,13,14,15,16,17,18,19,20,21,22,23,24,27,28,29,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,60,61,63,64,65,66,69,70,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,99,100,101,102,103,104,105,106,110,111,112,113,116,117,118,119,120,121,122,123,124,125,126,127,128,],[16,16,-5,-7,40,-42,16,16,-61,-62,-63,16,16,-43,-44,-45,-46,-16,16,-64,-47,-48,-49,-4,-6,-9,-8,-10,16,16,16,16,16,16,16,16,16,16,16,16,16,16,-40,16,16,16,16,16,40,-42,40,-41,40,16,40,16,16,16,16,16,16,-25,-26,-27,-28,-29,-30,-31,-32,40,40,40,40,40,40,40,40,40,40,40,16,-39,-53,16,-65,-61,16,-60,16,40,40,40,-17,-54,16,40,16,-50,-51,-52,16,-59,-68,16,-70,-67,40,]),'ID':([0,3,4,6,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,27,28,29,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,61,64,66,70,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,96,97,99,100,101,102,103,104,105,112,113,116,118,119,120,121,122,123,124,125,126,127,128,],[22,22,-5,-7,22,22,-61,-62,-63,22,22,-43,-44,-45,-46,-16,22,-64,22,-47,-48,-49,-4,-6,-9,-8,-10,22,22,22,22,22,22,22,22,22,22,22,22,22,22,-40,22,22,22,22,22,-42,-41,22,22,22,22,22,22,22,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,22,-39,-53,22,-65,-61,22,-60,22,-17,-54,22,22,-50,-51,-52,22,-59,-68,22,-70,-67,-69,]),'FOR':([0,3,4,6,13,14,15,18,19,20,21,22,24,27,28,29,34,35,36,37,38,53,61,64,70,77,78,79,80,81,82,83,84,85,86,87,88,89,90,97,99,101,102,103,104,112,113,116,118,119,120,121,122,123,124,126,127,128,],[25,25,-5,-7,-61,-62,-63,-43,-44,-45,-46,-16,-64,-47,-48,-49,-4,-6,-9,-8,-10,-40,-42,-41,25,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-53,-65,-61,25,-60,-17,-54,25,25,-50,-51,-52,25,-59,-68,-70,-67,-69,]),'WHILE':([0,3,4,6,13,14,15,18,19,20,21,22,24,27,28,29,34,35,36,37,38,53,61,64,70,77,78,79,80,81,82,83,84,85,86,87,88,89,90,97,99,101,102,103,104,112,113,116,118,119,120,121,122,123,124,126,127,128,],[26,26,-5,-7,-61,-62,-63,-43,-44,-45,-46,-16,-64,-47,-48,-49,-4,-6,-9,-8,-10,-40,-42,-41,26,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-53,-65,-61,26,-60,-17,-54,26,26,-50,-51,-52,26,-59,-68,-70,-67,-69,]),'INTNUM':([0,3,4,6,11,12,13,14,15,16,17,18,19,20,21,22,23,24,27,28,29,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,61,64,66,70,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,96,97,99,100,101,102,103,104,105,112,113,116,118,119,120,121,122,123,124,125,126,127,128,],[27,27,-5,-7,27,27,-61,-62,-63,27,27,-43,-44,-45,-46,-16,27,-64,-47,-48,-49,-4,-6,-9,-8,-10,27,27,27,27,27,27,27,27,27,27,27,27,27,27,-40,27,27,27,27,27,-42,-41,27,27,27,27,27,27,27,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,27,-39,-53,27,-65,-61,27,-60,27,-17,-54,27,27,-50,-51,-52,27,-59,-68,27,-70,-67,-69,]),'FLOAT':([0,3,4,6,11,12,13,14,15,16,17,18,19,20,21,22,23,24,27,28,29,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,61,64,66,70,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,96,97,99,100,101,102,103,104,105,112,113,116,118,119,120,121,122,123,124,125,126,127,128,],[28,28,-5,-7,28,28,-61,-62,-63,28,28,-43,-44,-45,-46,-16,28,-64,-47,-48,-49,-4,-6,-9,-8,-10,28,28,28,28,28,28,28,28,28,28,28,28,28,28,-40,28,28,28,28,28,-42,-41,28,28,28,28,28,28,28,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,28,-39,-53,28,-65,-61,28,-60,28,-17,-54,28,28,-50,-51,-52,28,-59,-68,28,-70,-67,-69,]),'STRING':([0,3,4,6,11,12,13,14,15,16,17,18,19,20,21,22,23,24,27,28,29,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,61,64,66,70,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,96,97,99,100,101,102,103,104,105,112,113,116,118,119,120,121,122,123,124,125,126,127,128,],[29,29,-5,-7,29,29,-61,-62,-63,29,29,-43,-44,-45,-46,-16,29,-64,-47,-48,-49,-4,-6,-9,-8,-10,29,29,29,29,29,29,29,29,29,29,29,29,29,29,-40,29,29,29,29,29,-42,-41,29,29,29,29,29,29,29,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,29,-39,-53,29,-65,-61,29,-60,29,-17,-54,29,29,-50,-51,-52,29,-59,-68,29,-70,-67,-69,]),'ZEROS':([0,3,4,6,11,12,13,14,15,16,17,18,19,20,21,22,23,24,27,28,29,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,61,64,66,70,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,96,97,99,100,101,102,103,104,105,112,113,116,118,119,120,121,122,123,124,125,126,127,128,],[30,30,-5,-7,30,30,-61,-62,-63,30,30,-43,-44,-45,-46,-16,30,-64,-47,-48,-49,-4,-6,-9,-8,-10,30,30,30,30,30,30,30,30,30,30,30,30,30,30,-40,30,30,30,30,30,-42,-41,30,30,30,30,30,30,30,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,30,-39,-53,30,-65,-61,30,-60,30,-17,-54,30,30,-50,-51,-52,30,-59,-68,30,-70,-67,-69,]),'ONES':([0,3,4,6,11,12,13,14,15,16,17,18,19,20,21,22,23,24,27,28,29,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,61,64,66,70,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,96,97,99,100,101,102,103,104,105,112,113,116,118,119,120,121,122,123,124,125,126,127,128,],[31,31,-5,-7,31,31,-61,-62,-63,31,31,-43,-44,-45,-46,-16,31,-64,-47,-48,-49,-4,-6,-9,-8,-10,31,31,31,31,31,31,31,31,31,31,31,31,31,31,-40,31,31,31,31,31,-42,-41,31,31,31,31,31,31,31,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,31,-39,-53,31,-65,-61,31,-60,31,-17,-54,31,31,-50,-51,-52,31,-59,-68,31,-70,-67,-69,]),'EYE':([0,3,4,6,11,12,13,14,15,16,17,18,19,20,21,22,23,24,27,28,29,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,61,64,66,70,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,96,97,99,100,101,102,103,104,105,112,113,116,118,119,120,121,122,123,124,125,126,127,128,],[32,32,-5,-7,32,32,-61,-62,-63,32,32,-43,-44,-45,-46,-16,32,-64,-47,-48,-49,-4,-6,-9,-8,-10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,-40,32,32,32,32,32,-42,-41,32,32,32,32,32,32,32,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,32,-39,-53,32,-65,-61,32,-60,32,-17,-54,32,32,-50,-51,-52,32,-59,-68,32,-70,-67,-69,]),'[':([0,3,4,6,11,12,13,14,15,16,17,18,19,20,21,22,23,24,27,28,29,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,61,64,66,70,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,96,97,99,100,101,102,103,104,105,112,113,116,118,119,120,121,122,123,124,125,126,127,128,],[23,23,-5,-7,23,23,-61,-62,-63,23,23,-43,-44,-45,-46,66,23,-64,-47,-48,-49,-4,-6,-9,-8,-10,23,23,23,23,23,23,23,23,23,23,23,23,23,23,-40,23,23,23,23,23,-42,-41,23,23,23,23,23,23,23,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,23,-39,-53,23,-65,-61,23,-60,23,-17,-54,23,23,-50,-51,-52,23,-59,-68,23,-70,-67,-69,]),'IF':([0,3,4,6,13,14,15,18,19,20,21,22,24,27,28,29,34,35,36,37,38,53,61,64,70,77,78,79,80,81,82,83,84,85,86,87,88,89,90,97,99,101,102,103,104,112,113,116,118,119,120,121,122,123,124,126,127,128,],[33,33,-5,-7,-61,-62,-63,-43,-44,-45,-46,-16,-64,-47,-48,-49,-4,-6,-9,-8,-10,-40,-42,-41,33,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-53,-65,-61,33,-60,-17,-54,33,33,-50,-51,-52,33,-59,-68,-70,-67,-69,]),'}':([3,4,6,13,14,15,24,34,35,36,37,38,101,102,103,104,115,123,124,126,127,],[-2,-5,-7,-61,-62,-63,-64,-4,-6,-9,-8,-10,-65,-61,-3,-60,123,-59,-68,-70,-67,]),';':([5,7,8,9,10,11,18,19,20,21,22,27,28,29,53,59,60,61,62,63,64,67,68,69,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,97,99,111,112,113,114,119,120,121,],[35,37,-42,-18,-19,-20,-43,-44,-45,-46,-16,-47,-48,-49,-40,-21,-22,-42,-23,-24,-41,100,-55,-57,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-11,-12,-13,-14,-15,-39,-53,-58,-17,-54,-56,-50,-51,-52,]),',':([5,7,8,9,10,11,18,19,20,21,22,27,28,29,53,59,60,61,62,63,64,68,69,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,97,98,99,107,108,109,111,112,113,114,119,120,121,],[36,38,-42,-18,-19,-20,-43,-44,-45,-46,-16,-47,-48,-49,-40,96,-22,-42,96,-24,-41,96,-57,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-11,-12,-13,-14,-15,-39,96,-53,96,96,96,-58,-17,-54,96,-50,-51,-52,]),'ELSE':([6,13,14,15,24,35,36,37,38,101,102,104,123,124,126,127,],[-7,-61,-62,-63,70,-6,-9,-8,-10,-65,-61,-60,-59,-68,-70,-67,]),'+':([7,8,18,19,20,21,22,27,28,29,53,60,61,63,64,65,69,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,97,99,106,110,111,112,113,117,119,120,121,128,],[39,-42,-43,-44,-45,-46,-16,-47,-48,-49,-40,39,-42,39,-41,39,39,-25,-26,-27,-28,-29,-30,-31,-32,39,39,39,39,39,39,39,39,39,39,39,-39,-53,39,39,39,-17,-54,39,-50,-51,-52,39,]),'*':([7,8,18,19,20,21,22,27,28,29,53,60,61,63,64,65,69,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,97,99,106,110,111,112,113,117,119,120,121,128,],[41,-42,-43,-44,-45,-46,-16,-47,-48,-49,-40,41,-42,41,-41,41,41,41,41,-27,-28,41,41,-31,-32,41,41,41,41,41,41,41,41,41,41,41,-39,-53,41,41,41,-17,-54,41,-50,-51,-52,41,]),'/':([7,8,18,19,20,21,22,27,28,29,53,60,61,63,64,65,69,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,97,99,106,110,111,112,113,117,119,120,121,128,],[42,-42,-43,-44,-45,-46,-16,-47,-48,-49,-40,42,-42,42,-41,42,42,42,42,-27,-28,42,42,-31,-32,42,42,42,42,42,42,42,42,42,42,42,-39,-53,42,42,42,-17,-54,42,-50,-51,-52,42,]),'DOTADD':([7,8,18,19,20,21,22,27,28,29,53,60,61,63,64,65,69,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,97,99,106,110,111,112,113,117,119,120,121,128,],[43,-42,-43,-44,-45,-46,-16,-47,-48,-49,-40,43,-42,43,-41,43,43,-25,-26,-27,-28,-29,-30,-31,-32,43,43,43,43,43,43,43,43,43,43,43,-39,-53,43,43,43,-17,-54,43,-50,-51,-52,43,]),'DOTSUB':([7,8,18,19,20,21,22,27,28,29,53,60,61,63,64,65,69,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,97,99,106,110,111,112,113,117,119,120,121,128,],[44,-42,-43,-44,-45,-46,-16,-47,-48,-49,-40,44,-42,44,-41,44,44,-25,-26,-27,-28,-29,-30,-31,-32,44,44,44,44,44,44,44,44,44,44,44,-39,-53,44,44,44,-17,-54,44,-50,-51,-52,44,]),'DOTMUL':([7,8,18,19,20,21,22,27,28,29,53,60,61,63,64,65,69,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,97,99,106,110,111,112,113,117,119,120,121,128,],[45,-42,-43,-44,-45,-46,-16,-47,-48,-49,-40,45,-42,45,-41,45,45,45,45,-27,-28,45,45,-31,-32,45,45,45,45,45,45,45,45,45,45,45,-39,-53,45,45,45,-17,-54,45,-50,-51,-52,45,]),'DOTDIV':([7,8,18,19,20,21,22,27,28,29,53,60,61,63,64,65,69,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,97,99,106,110,111,112,113,117,119,120,121,128,],[46,-42,-43,-44,-45,-46,-16,-47,-48,-49,-40,46,-42,46,-41,46,46,46,46,-27,-28,46,46,-31,-32,46,46,46,46,46,46,46,46,46,46,46,-39,-53,46,46,46,-17,-54,46,-50,-51,-52,46,]),'EQ':([7,8,18,19,20,21,22,27,28,29,53,60,61,63,64,65,69,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,97,99,106,110,111,112,113,117,119,120,121,128,],[47,-42,-43,-44,-45,-46,-16,-47,-48,-49,-40,47,-42,47,-41,47,47,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,47,47,47,47,47,-39,-53,47,47,47,-17,-54,47,-50,-51,-52,47,]),'GEQ':([7,8,18,19,20,21,22,27,28,29,53,60,61,63,64,65,69,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,97,99,106,110,111,112,113,117,119,120,121,128,],[48,-42,-43,-44,-45,-46,-16,-47,-48,-49,-40,48,-42,48,-41,48,48,-25,-26,-27,-28,-29,-30,-31,-32,48,-34,-35,48,-37,-38,48,48,48,48,48,-39,-53,48,48,48,-17,-54,48,-50,-51,-52,48,]),'LEQ':([7,8,18,19,20,21,22,27,28,29,53,60,61,63,64,65,69,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,97,99,106,110,111,112,113,117,119,120,121,128,],[49,-42,-43,-44,-45,-46,-16,-47,-48,-49,-40,49,-42,49,-41,49,49,-25,-26,-27,-28,-29,-30,-31,-32,49,-34,-35,49,-37,-38,49,49,49,49,49,-39,-53,49,49,49,-17,-54,49,-50,-51,-52,49,]),'NEQ':([7,8,18,19,20,21,22,27,28,29,53,60,61,63,64,65,69,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,97,99,106,110,111,112,113,117,119,120,121,128,],[50,-42,-43,-44,-45,-46,-16,-47,-48,-49,-40,50,-42,50,-41,50,50,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,50,50,50,50,50,-39,-53,50,50,50,-17,-54,50,-50,-51,-52,50,]),'<':([7,8,18,19,20,21,22,27,28,29,53,60,61,63,64,65,69,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,97,99,106,110,111,112,113,117,119,120,121,128,],[51,-42,-43,-44,-45,-46,-16,-47,-48,-49,-40,51,-42,51,-41,51,51,-25,-26,-27,-28,-29,-30,-31,-32,51,-34,-35,51,-37,-38,51,51,51,51,51,-39,-53,51,51,51,-17,-54,51,-50,-51,-52,51,]),'>':([7,8,18,19,20,21,22,27,28,29,53,60,61,63,64,65,69,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,97,99,106,110,111,112,113,117,119,120,121,128,],[52,-42,-43,-44,-45,-46,-16,-47,-48,-49,-40,52,-42,52,-41,52,52,-25,-26,-27,-28,-29,-30,-31,-32,52,-34,-35,52,-37,-38,52,52,52,52,52,-39,-53,52,52,52,-17,-54,52,-50,-51,-52,52,]),"'":([7,8,18,19,20,21,22,27,28,29,53,60,61,63,64,65,69,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,97,99,106,110,111,112,113,117,119,120,121,128,],[53,-42,-43,-44,-45,-46,-16,-47,-48,-49,-40,53,-42,53,-41,53,53,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,53,53,53,53,53,-39,-53,53,53,53,-17,-54,53,-50,-51,-52,53,]),'=':([8,22,71,112,],[54,-16,105,-17,]),'ADDASSIGN':([8,22,112,],[55,-16,-17,]),'SUBASSIGN':([8,22,112,],[56,-16,-17,]),'MULASSIGN':([8,22,112,],[57,-16,-17,]),'DIVASSIGN':([8,22,112,],[58,-16,-17,]),')':([18,19,20,21,22,27,28,29,53,61,64,65,69,77,78,79,80,81,82,83,84,85,86,87,88,89,90,97,99,106,107,108,109,110,111,112,113,119,120,121,],[-43,-44,-45,-46,-16,-47,-48,-49,-40,-42,-41,97,-57,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-53,118,119,120,121,122,-58,-17,-54,-50,-51,-52,]),']':([18,19,20,21,22,27,28,29,53,61,64,67,68,69,77,78,79,80,81,82,83,84,85,86,87,88,89,90,97,98,99,100,111,112,113,114,119,120,121,],[-43,-44,-45,-46,-16,-47,-48,-49,-40,-42,-41,99,-55,-57,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,112,-53,113,-58,-17,-54,-56,-50,-51,-52,]),':':([18,19,20,21,22,27,28,29,53,61,64,77,78,79,80,81,82,83,84,85,86,87,88,89,90,97,99,112,113,117,119,120,121,],[-43,-44,-45,-46,-16,-47,-48,-49,-40,-42,-41,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-53,-17,-54,125,-50,-51,-52,]),'{':([18,19,20,21,22,27,28,29,53,61,64,70,77,78,79,80,81,82,83,84,85,86,87,88,89,90,97,99,112,113,116,118,119,120,121,122,128,],[-43,-44,-45,-46,-16,-47,-48,-49,-40,-42,-41,103,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-53,-17,-54,103,103,-50,-51,-52,103,-69,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'instructions_opt':([0,103,],[2,115,]),'instructions':([0,103,],[3,3,]),'instruction':([0,3,70,103,116,118,122,],[4,34,104,4,104,104,104,]),'inst':([0,3,70,103,116,118,122,],[5,5,5,5,5,5,5,]),'condition':([0,3,70,103,116,118,122,],[6,6,6,6,6,6,6,]),'expr':([0,3,11,12,16,17,23,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,58,66,70,72,73,74,75,76,96,100,103,105,116,118,122,125,],[7,7,60,63,64,65,69,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,69,7,106,69,69,69,110,111,69,7,117,7,7,7,128,]),'ids':([0,3,11,12,16,17,23,25,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,58,66,70,72,73,74,75,76,96,100,103,105,116,118,122,125,],[8,8,61,61,61,61,61,71,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,8,61,61,61,61,61,61,61,8,61,8,8,8,61,]),'if_condition':([0,3,70,103,116,118,122,],[13,13,102,13,13,13,13,]),'for_condition':([0,3,70,103,116,118,122,],[14,14,14,14,14,14,14,]),'while_condition':([0,3,70,103,116,118,122,],[15,15,15,15,15,15,15,]),'integer':([0,3,11,12,16,17,23,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,58,66,70,72,73,74,75,76,96,100,103,105,116,118,122,125,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'float':([0,3,11,12,16,17,23,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,58,66,70,72,73,74,75,76,96,100,103,105,116,118,122,125,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'string':([0,3,11,12,16,17,23,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,58,66,70,72,73,74,75,76,96,100,103,105,116,118,122,125,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'matrix':([0,3,11,12,16,17,23,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,58,66,70,72,73,74,75,76,96,100,103,105,116,118,122,125,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'if_cond':([0,3,70,103,116,118,122,],[24,24,24,24,24,24,24,]),'values':([11,12,23,66,73,74,75,100,],[59,62,68,98,107,108,109,114,]),'rows':([23,],[67,]),'block':([70,116,118,122,],[101,124,126,127,]),'range':([105,],[116,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> instructions_opt','program',1,'p_program','Mparser.py',40),
  ('instructions_opt -> instructions','instructions_opt',1,'p_instructions_opt_1','Mparser.py',45),
  ('instructions_opt -> <empty>','instructions_opt',0,'p_instructions_opt_2','Mparser.py',50),
  ('instructions -> instructions instruction','instructions',2,'p_instructions_1','Mparser.py',53),
  ('instructions -> instruction','instructions',1,'p_instructions_2','Mparser.py',58),
  ('instruction -> inst ;','instruction',2,'p_instruction','Mparser.py',63),
  ('instruction -> condition','instruction',1,'p_instruction','Mparser.py',64),
  ('instruction -> expr ;','instruction',2,'p_instruction','Mparser.py',65),
  ('instruction -> inst ,','instruction',2,'p_instruction','Mparser.py',66),
  ('instruction -> expr ,','instruction',2,'p_instruction','Mparser.py',67),
  ('inst -> ids = expr','inst',3,'p_inst_assign','Mparser.py',72),
  ('inst -> ids ADDASSIGN expr','inst',3,'p_inst_assign','Mparser.py',73),
  ('inst -> ids SUBASSIGN expr','inst',3,'p_inst_assign','Mparser.py',74),
  ('inst -> ids MULASSIGN expr','inst',3,'p_inst_assign','Mparser.py',75),
  ('inst -> ids DIVASSIGN expr','inst',3,'p_inst_assign','Mparser.py',76),
  ('ids -> ID','ids',1,'p_ids','Mparser.py',81),
  ('ids -> ID [ values ]','ids',4,'p_ids','Mparser.py',82),
  ('inst -> BREAK','inst',1,'p_break','Mparser.py',90),
  ('inst -> CONTINUE','inst',1,'p_continue','Mparser.py',95),
  ('inst -> RETURN','inst',1,'p_return','Mparser.py',100),
  ('inst -> RETURN values','inst',2,'p_return','Mparser.py',101),
  ('inst -> RETURN expr','inst',2,'p_return','Mparser.py',102),
  ('inst -> PRINT values','inst',2,'p_print','Mparser.py',112),
  ('inst -> PRINT expr','inst',2,'p_print','Mparser.py',113),
  ('expr -> expr + expr','expr',3,'p_expr_binary','Mparser.py',118),
  ('expr -> expr - expr','expr',3,'p_expr_binary','Mparser.py',119),
  ('expr -> expr * expr','expr',3,'p_expr_binary','Mparser.py',120),
  ('expr -> expr / expr','expr',3,'p_expr_binary','Mparser.py',121),
  ('expr -> expr DOTADD expr','expr',3,'p_expr_elementwise','Mparser.py',126),
  ('expr -> expr DOTSUB expr','expr',3,'p_expr_elementwise','Mparser.py',127),
  ('expr -> expr DOTMUL expr','expr',3,'p_expr_elementwise','Mparser.py',128),
  ('expr -> expr DOTDIV expr','expr',3,'p_expr_elementwise','Mparser.py',129),
  ('expr -> expr EQ expr','expr',3,'p_expr_eq','Mparser.py',134),
  ('expr -> expr GEQ expr','expr',3,'p_expr_eq','Mparser.py',135),
  ('expr -> expr LEQ expr','expr',3,'p_expr_eq','Mparser.py',136),
  ('expr -> expr NEQ expr','expr',3,'p_expr_eq','Mparser.py',137),
  ('expr -> expr < expr','expr',3,'p_expr_eq','Mparser.py',138),
  ('expr -> expr > expr','expr',3,'p_expr_eq','Mparser.py',139),
  ('expr -> ( expr )','expr',3,'p_expr_paren','Mparser.py',144),
  ("expr -> expr '",'expr',2,'p_expr_transpose','Mparser.py',149),
  ('expr -> - expr','expr',2,'p_expr_negative','Mparser.py',154),
  ('expr -> ids','expr',1,'p_expr','Mparser.py',159),
  ('expr -> integer','expr',1,'p_expr','Mparser.py',160),
  ('expr -> float','expr',1,'p_expr','Mparser.py',161),
  ('expr -> string','expr',1,'p_expr','Mparser.py',162),
  ('expr -> matrix','expr',1,'p_expr','Mparser.py',163),
  ('integer -> INTNUM','integer',1,'p_integer','Mparser.py',168),
  ('float -> FLOAT','float',1,'p_float','Mparser.py',173),
  ('string -> STRING','string',1,'p_string','Mparser.py',178),
  ('matrix -> ZEROS ( values )','matrix',4,'p_matrix_operations','Mparser.py',183),
  ('matrix -> ONES ( values )','matrix',4,'p_matrix_operations','Mparser.py',184),
  ('matrix -> EYE ( values )','matrix',4,'p_matrix_operations','Mparser.py',185),
  ('matrix -> [ rows ]','matrix',3,'p_matrix_init','Mparser.py',190),
  ('matrix -> [ rows ; ]','matrix',4,'p_matrix_init','Mparser.py',191),
  ('rows -> values','rows',1,'p_rows','Mparser.py',196),
  ('rows -> rows ; values','rows',3,'p_rows_2','Mparser.py',201),
  ('values -> expr','values',1,'p_values','Mparser.py',206),
  ('values -> values , expr','values',3,'p_values_2','Mparser.py',211),
  ('block -> { instructions_opt }','block',3,'p_block','Mparser.py',216),
  ('block -> instruction','block',1,'p_block_2','Mparser.py',221),
  ('condition -> if_condition','condition',1,'p_conditional','Mparser.py',226),
  ('condition -> for_condition','condition',1,'p_conditional','Mparser.py',227),
  ('condition -> while_condition','condition',1,'p_conditional','Mparser.py',228),
  ('if_condition -> if_cond','if_condition',1,'p_if','Mparser.py',233),
  ('if_condition -> if_cond ELSE block','if_condition',3,'p_if_2','Mparser.py',238),
  ('if_condition -> if_cond ELSE if_condition','if_condition',3,'p_if_3','Mparser.py',244),
  ('if_cond -> IF ( expr ) block','if_cond',5,'p_if_cond','Mparser.py',250),
  ('for_condition -> FOR ids = range block','for_condition',5,'p_for','Mparser.py',255),
  ('range -> expr : expr','range',3,'p_range','Mparser.py',260),
  ('while_condition -> WHILE ( expr ) block','while_condition',5,'p_while','Mparser.py',265),
]
